/* Generated By:JavaCC: Do not edit this line. JavaCharStream.java Version 5.0 */
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */


using org.javacc.jjtree;
using System.Text;
/**
* This file contains the code for JavaCCParser generated
* by JavaCCParser itself.
*/
namespace org.javacc.parser;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (with java-like unicode escape processing).
 */

public
class JavaCharStream
{
    /** Whether parser is static. */
    public static readonly bool staticFlag = false;

    public static int hexval(char c) => c switch
    {
        '0' => 0,
        '1' => 1,
        '2' => 2,
        '3' => 3,
        '4' => 4,
        '5' => 5,
        '6' => 6,
        '7' => 7,
        '8' => 8,
        '9' => 9,
        'a' or 'A' => 10,
        'b' or 'B' => 11,
        'c' or 'C' => 12,
        'd' or 'D' => 13,
        'e' or 'E' => 14,
        'f' or 'F' => 15,
        _ => throw new IOException(),// Should never come here
    };

    /** Position in buffer. */
    public int bufpos = -1;
    int bufsize;
    int available;
    int tokenBegin;
    protected int[] bufline;
    protected int[] bufcolumn;

    protected int column = 0;
    protected int line = 1;

    protected bool prevCharIsCR = false;
    protected bool prevCharIsLF = false;

    protected TextReader inputStream;

    protected char[] nextCharBuf;
    protected char[] buffer;
    protected int maxNextCharInd = 0;
    protected int nextCharInd = -1;
    protected int inBuf = 0;
    protected int tabSize = 8;

    protected void setTabSize(int i) { tabSize = i; }
    protected int getTabSize(int i) { return tabSize; }

    protected void ExpandBuff(bool wrapAround)
    {
        char[] newbuffer = new char[bufsize + 2048];
        int[] newbufline = new int[bufsize + 2048];
        int[] newbufcolumn = new int[bufsize + 2048];

        try
        {
            if (wrapAround)
            {
                Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                Array.Copy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
                buffer = newbuffer;

                Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                Array.Copy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
                bufline = newbufline;

                Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                Array.Copy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
                bufcolumn = newbufcolumn;

                bufpos += (bufsize - tokenBegin);
            }
            else
            {
                Array.Copy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                buffer = newbuffer;

                Array.Copy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                bufline = newbufline;

                Array.Copy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                bufcolumn = newbufcolumn;

                bufpos -= tokenBegin;
            }
        }
        catch (Exception t)
        {
            throw new Error(t.Message);
        }

        available = (bufsize += 2048);
        tokenBegin = 0;
    }

    protected void FillBuff()
    {
        int i;
        if (maxNextCharInd == 4096)
            maxNextCharInd = nextCharInd = 0;

        try
        {
            if ((i = inputStream.Read(nextCharBuf, maxNextCharInd,
                                                4096 - maxNextCharInd)) == -1)
            {
                inputStream.Close();
                throw new IOException();
            }
            else
                maxNextCharInd += i;
            return;
        }
        catch (IOException e)
        {
            if (bufpos != 0)
            {
                --bufpos;
                backup(0);
            }
            else
            {
                bufline[bufpos] = line;
                bufcolumn[bufpos] = column;
            }
            throw e;
        }
    }

    protected char ReadByte()
    {
        if (++nextCharInd >= maxNextCharInd)
            FillBuff();

        return nextCharBuf[nextCharInd];
    }

    /** @return starting character for token. */
    public char BeginToken()
    {
        if (inBuf > 0)
        {
            --inBuf;

            if (++bufpos == bufsize)
                bufpos = 0;

            tokenBegin = bufpos;
            return buffer[bufpos];
        }

        tokenBegin = 0;
        bufpos = -1;

        return readChar();
    }

    protected void AdjustBuffSize()
    {
        if (available == bufsize)
        {
            if (tokenBegin > 2048)
            {
                bufpos = 0;
                available = tokenBegin;
            }
            else
                ExpandBuff(false);
        }
        else if (available > tokenBegin)
            available = bufsize;
        else if ((tokenBegin - available) < 2048)
            ExpandBuff(true);
        else
            available = tokenBegin;
    }

    protected void UpdateLineColumn(char c)
    {
        column++;

        if (prevCharIsLF)
        {
            prevCharIsLF = false;
            line += (column = 1);
        }
        else if (prevCharIsCR)
        {
            prevCharIsCR = false;
            if (c == '\n')
            {
                prevCharIsLF = true;
            }
            else
                line += (column = 1);
        }

        switch (c)
        {
            case '\r':
                prevCharIsCR = true;
                break;
            case '\n':
                prevCharIsLF = true;
                break;
            case '\t':
                column--;
                column += (tabSize - (column % tabSize));
                break;
            default:
                break;
        }

        bufline[bufpos] = line;
        bufcolumn[bufpos] = column;
    }

    /** Read a character. */
    public char readChar()
    {
        if (inBuf > 0)
        {
            --inBuf;

            if (++bufpos == bufsize)
                bufpos = 0;

            return buffer[bufpos];
        }

        char c;

        if (++bufpos == available)
            AdjustBuffSize();

        if ((buffer[bufpos] = c = ReadByte()) == '\\')
        {
            UpdateLineColumn(c);

            int backSlashCnt = 1;

            for (; ; ) // Read all the backslashes
            {
                if (++bufpos == available)
                    AdjustBuffSize();

                try
                {
                    if ((buffer[bufpos] = c = ReadByte()) != '\\')
                    {
                        UpdateLineColumn(c);
                        // found a non-backslash char.
                        if ((c == 'u') && ((backSlashCnt & 1) == 1))
                        {
                            if (--bufpos < 0)
                                bufpos = bufsize - 1;

                            break;
                        }

                        backup(backSlashCnt);
                        return '\\';
                    }
                }
                catch (IOException e)
                {
                    // We are returning one backslash so we should only backup (count-1)
                    if (backSlashCnt > 1)
                        backup(backSlashCnt - 1);

                    return '\\';
                }

                UpdateLineColumn(c);
                backSlashCnt++;
            }

            // Here, we have seen an odd number of backslash's followed by a 'u'
            try
            {
                while ((c = ReadByte()) == 'u')
                    ++column;

                buffer[bufpos] = c = (char)(hexval(c) << 12 |
                                            hexval(ReadByte()) << 8 |
                                            hexval(ReadByte()) << 4 |
                                            hexval(ReadByte()));

                column += 4;
            }
            catch (IOException e)
            {
                throw new Error("Invalid escape character at line " + line +
                                                 " column " + column + ".");
            }

            if (backSlashCnt == 1)
                return c;
            else
            {
                backup(backSlashCnt - 1);
                return '\\';
            }
        }
        else
        {
            UpdateLineColumn(c);
            return c;
        }
    }

    //@Deprecated
    /**
     * @deprecated
     * @see #getEndColumn
     */
    public int getColumn()
    {
        return bufcolumn[bufpos];
    }

    //@Deprecated
    /**
     * @deprecated
     * @see #getEndLine
     */
    public int getLine()
    {
        return bufline[bufpos];
    }

    /** Get end column. */
    public int getEndColumn()
    {
        return bufcolumn[bufpos];
    }

    /** Get end line. */
    public int getEndLine()
    {
        return bufline[bufpos];
    }

    /** @return column of token start */
    public int getBeginColumn()
    {
        return bufcolumn[tokenBegin];
    }

    /** @return line number of token start */
    public int getBeginLine()
    {
        return bufline[tokenBegin];
    }

    /** Retreat. */
    public void backup(int amount)
    {

        inBuf += amount;
        if ((bufpos -= amount) < 0)
            bufpos += bufsize;
    }

    /** Constructor. */
    public JavaCharStream(TextReader dstream,
                   int startline, int startcolumn, int buffersize)
    {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;

        available = bufsize = buffersize;
        buffer = new char[buffersize];
        bufline = new int[buffersize];
        bufcolumn = new int[buffersize];
        nextCharBuf = new char[4096];
    }

    /** Constructor. */
    public JavaCharStream(TextReader dstream,
                                          int startline, int startcolumn)
        : this(dstream, startline, startcolumn, 4096)
    {
    }

    /** Constructor. */
    public JavaCharStream(TextReader dstream)
        : this(dstream, 1, 1, 4096)
    {
    }
    /** Reinitialise. */
    public void ReInit(TextReader dstream,
                   int startline, int startcolumn, int buffersize)
    {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;

        if (buffer == null || buffersize != buffer.Length)
        {
            available = bufsize = buffersize;
            buffer = new char[buffersize];
            bufline = new int[buffersize];
            bufcolumn = new int[buffersize];
            nextCharBuf = new char[4096];
        }
        prevCharIsLF = prevCharIsCR = false;
        tokenBegin = inBuf = maxNextCharInd = 0;
        nextCharInd = bufpos = -1;
    }

    /** Reinitialise. */
    public void ReInit(TextReader dstream,
                                          int startline, int startcolumn)
    {
        ReInit(dstream, startline, startcolumn, 4096);
    }

    /** Reinitialise. */
    public void ReInit(TextReader dstream)
    {
        ReInit(dstream, 1, 1, 4096);
    }
    /** Constructor. */
    public JavaCharStream(Stream dstream, Encoding encoding, int startline,
    int startcolumn, int buffersize)
        : this(encoding == null ? new StreamReader(dstream) : new StreamReader(dstream, encoding), startline, startcolumn, buffersize)
    {
        ;
    }

    /** Constructor. */
    public JavaCharStream(Stream dstream, int startline,
    int startcolumn, int buffersize)
        : this(new StreamReader(dstream), startline, startcolumn, 4096)
    {
        ;
    }

    /** Constructor. */
    public JavaCharStream(Stream dstream, Encoding encoding, int startline,
                          int startcolumn)
        : this(dstream, encoding, startline, startcolumn, 4096)
    {
        ;
    }

    /** Constructor. */
    public JavaCharStream(Stream dstream, int startline,
                          int startcolumn)
        : this(dstream, startline, startcolumn, 4096)
    {
        ;
    }

    /** Constructor. */
    public JavaCharStream(Stream dstream, Encoding encoding)
        : this(dstream, encoding, 1, 1, 4096)
    {
        ;
    }

    /** Constructor. */
    public JavaCharStream(Stream dstream)
        : this(dstream, 1, 1, 4096)
    {
        ;
    }

    /** Reinitialise. */
    public void ReInit(Stream dstream, Encoding encoding, int startline,
    int startcolumn, int buffersize)
    {
        ReInit(encoding == null ? new StreamReader(dstream) : new StreamReader(dstream, encoding), startline, startcolumn, buffersize);
    }

    /** Reinitialise. */
    public void ReInit(Stream dstream, int startline,
    int startcolumn, int buffersize)
    {
        ReInit(new StreamReader(dstream), startline, startcolumn, buffersize);
    }
    /** Reinitialise. */
    public void ReInit(Stream dstream, Encoding encoding, int startline,
                       int startcolumn)
    {
        ReInit(dstream, encoding, startline, startcolumn, 4096);
    }
    /** Reinitialise. */
    public void ReInit(Stream dstream, int startline,
                       int startcolumn)
    {
        ReInit(dstream, startline, startcolumn, 4096);
    }
    /** Reinitialise. */
    public void ReInit(Stream dstream, Encoding encoding)
    {
        ReInit(dstream, encoding, 1, 1, 4096);
    }

    /** Reinitialise. */
    public void ReInit(Stream dstream)
    {
        ReInit(dstream, 1, 1, 4096);
    }

    /** @return token image as String */
    public String GetImage()
    {
        if (bufpos >= tokenBegin)
            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
        else
            return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                                    new String(buffer, 0, bufpos + 1);
    }

    /** @return suffix */
    public char[] GetSuffix(int len)
    {
        char[] ret = new char[len];

        if ((bufpos + 1) >= len)
            Array.Copy(buffer, bufpos - len + 1, ret, 0, len);
        else
        {
            Array.Copy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                                                              len - bufpos - 1);
            Array.Copy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
        }

        return ret;
    }

    /** Set buffers back to null when finished. */
    public void Done()
    {
        nextCharBuf = null;
        buffer = null;
        bufline = null;
        bufcolumn = null;
    }

    /**
     * Method to adjust line and column numbers for the start of a token.
     */
    public void adjustBeginLineColumn(int newLine, int newCol)
    {
        int start = tokenBegin;
        int len;

        if (bufpos >= tokenBegin)
        {
            len = bufpos - tokenBegin + inBuf + 1;
        }
        else
        {
            len = bufsize - tokenBegin + bufpos + 1 + inBuf;
        }

        int i = 0, j = 0, k = 0;
        int nextColDiff = 0, columnDiff = 0;

        while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize])
        {
            bufline[j] = newLine;
            nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
            bufcolumn[j] = newCol + columnDiff;
            columnDiff = nextColDiff;
            i++;
        }

        if (i < len)
        {
            bufline[j] = newLine++;
            bufcolumn[j] = newCol + columnDiff;

            while (i++ < len)
            {
                if (bufline[j = start % bufsize] != bufline[++start % bufsize])
                    bufline[j] = newLine++;
                else
                    bufline[j] = newLine;
            }
        }

        line = bufline[j];
        column = bufcolumn[j];
    }

}
/* JavaCC - OriginalChecksum=3b1b68631db7e0854771120fe5044999 (do not edit this line) */
