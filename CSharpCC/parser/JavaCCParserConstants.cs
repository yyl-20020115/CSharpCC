/* Generated By:JavaCC: Do not edit this line. JavaCCParserConstants.java */
/**
 * This file contains the code for JavaCCParser generated
 * by JavaCCParser itself.
 */

namespace org.javacc.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCParserConstants {

  /** End of File. */
  const int EOF = 0;
  /** RegularExpression Id. */
  const int  _LOOKAHEAD = 1;
  /** RegularExpression Id. */
  const int  _IGNORE_CASE = 2;
  /** RegularExpression Id. */
  const int  _PARSER_BEGIN = 3;
  /** RegularExpression Id. */
  const int  _PARSER_END = 4;
  /** RegularExpression Id. */
  const int  _JAVACODE = 5;
  /** RegularExpression Id. */
  const int  _CPPCODE = 6;
  /** RegularExpression Id. */
  const int  _TOKEN = 7;
  /** RegularExpression Id. */
  const int  _SPECIAL_TOKEN = 8;
  /** RegularExpression Id. */
  const int  _MORE = 9;
  /** RegularExpression Id. */
  const int  _SKIP = 10;
  /** RegularExpression Id. */
  const int  _TOKEN_MGR_DECLS = 11;
  /** RegularExpression Id. */
  const int  _EOF = 12;
  /** RegularExpression Id. */
  const int  SINGLE_LINE_COMMENT = 24;
  /** RegularExpression Id. */
  const int  FORMAL_COMMENT = 25;
  /** RegularExpression Id. */
  const int  MULTI_LINE_COMMENT = 26;
  /** RegularExpression Id. */
  const int  ABSTRACT = 28;
  /** RegularExpression Id. */
  const int  ASSERT = 29;
  /** RegularExpression Id. */
  const int  BOOLEAN = 30;
  /** RegularExpression Id. */
  const int  BREAK = 31;
  /** RegularExpression Id. */
  const int  BYTE = 32;
  /** RegularExpression Id. */
  const int  CASE = 33;
  /** RegularExpression Id. */
  const int  CATCH = 34;
  /** RegularExpression Id. */
  const int  CHAR = 35;
  /** RegularExpression Id. */
  const int  CLASS = 36;
  /** RegularExpression Id. */
  const int  CONST = 37;
  /** RegularExpression Id. */
  const int  CONTINUE = 38;
  /** RegularExpression Id. */
  const int  _DEFAULT = 39;
  /** RegularExpression Id. */
  const int  DO = 40;
  /** RegularExpression Id. */
  const int  DOUBLE = 41;
  /** RegularExpression Id. */
  const int  ELSE = 42;
  /** RegularExpression Id. */
  const int  ENUM = 43;
  /** RegularExpression Id. */
  const int  EXTENDS = 44;
  /** RegularExpression Id. */
  const int  FALSE = 45;
  /** RegularExpression Id. */
  const int  FINAL = 46;
  /** RegularExpression Id. */
  const int  FINALLY = 47;
  /** RegularExpression Id. */
  const int  FLOAT = 48;
  /** RegularExpression Id. */
  const int  FOR = 49;
  /** RegularExpression Id. */
  const int  GOTO = 50;
  /** RegularExpression Id. */
  const int  IF = 51;
  /** RegularExpression Id. */
  const int  IMPLEMENTS = 52;
  /** RegularExpression Id. */
  const int  IMPORT = 53;
  /** RegularExpression Id. */
  const int  INSTANCEOF = 54;
  /** RegularExpression Id. */
  const int  INT = 55;
  /** RegularExpression Id. */
  const int  INTERFACE = 56;
  /** RegularExpression Id. */
  const int  LONG = 57;
  /** RegularExpression Id. */
  const int  NATIVE = 58;
  /** RegularExpression Id. */
  const int  NEW = 59;
  /** RegularExpression Id. */
  const int  NULL = 60;
  /** RegularExpression Id. */
  const int  PACKAGE = 61;
  /** RegularExpression Id. */
  const int  PRIVATE = 62;
  /** RegularExpression Id. */
  const int  PROTECTED = 63;
  /** RegularExpression Id. */
  const int  PUBLIC = 64;
  /** RegularExpression Id. */
  const int  RETURN = 65;
  /** RegularExpression Id. */
  const int  SHORT = 66;
  /** RegularExpression Id. */
  const int  STATIC = 67;
  /** RegularExpression Id. */
  const int  STRICTFP = 68;
  /** RegularExpression Id. */
  const int  SUPER = 69;
  /** RegularExpression Id. */
  const int  SWITCH = 70;
  /** RegularExpression Id. */
  const int  SYNCHRONIZED = 71;
  /** RegularExpression Id. */
  const int  THIS = 72;
  /** RegularExpression Id. */
  const int  THROW = 73;
  /** RegularExpression Id. */
  const int  THROWS = 74;
  /** RegularExpression Id. */
  const int  TRANSIENT = 75;
  /** RegularExpression Id. */
  const int  TRUE = 76;
  /** RegularExpression Id. */
  const int  TRY = 77;
  /** RegularExpression Id. */
  const int  VOID = 78;
  /** RegularExpression Id. */
  const int  VOLATILE = 79;
  /** RegularExpression Id. */
  const int  WHILE = 80;
  /** RegularExpression Id. */
  const int  TEMPLATE = 81;
  /** RegularExpression Id. */
  const int  TYPENAME = 82;
  /** RegularExpression Id. */
  const int  INTEGER_LITERAL = 83;
  /** RegularExpression Id. */
  const int  DECIMAL_LITERAL = 84;
  /** RegularExpression Id. */
  const int  HEX_LITERAL = 85;
  /** RegularExpression Id. */
  const int  OCTAL_LITERAL = 86;
  /** RegularExpression Id. */
  const int  BINARY_LITERAL = 87;
  /** RegularExpression Id. */
  const int  FLOATING_POINT_LITERAL = 88;
  /** RegularExpression Id. */
  const int  DECIMAL_FLOATING_POINT_LITERAL = 89;
  /** RegularExpression Id. */
  const int  DECIMAL_EXPONENT = 90;
  /** RegularExpression Id. */
  const int  HEXADECIMAL_FLOATING_POINT_LITERAL = 91;
  /** RegularExpression Id. */
  const int  HEXADECIMAL_EXPONENT = 92;
  /** RegularExpression Id. */
  const int  CHARACTER_LITERAL = 93;
  /** RegularExpression Id. */
  const int  STRING_LITERAL = 94;
  /** RegularExpression Id. */
  const int  LPAREN = 95;
  /** RegularExpression Id. */
  const int  RPAREN = 96;
  /** RegularExpression Id. */
  const int  LBRACE = 97;
  /** RegularExpression Id. */
  const int  RBRACE = 98;
  /** RegularExpression Id. */
  const int  LBRACKET = 99;
  /** RegularExpression Id. */
  const int  RBRACKET = 100;
  /** RegularExpression Id. */
  const int  SEMICOLON = 101;
  /** RegularExpression Id. */
  const int  COMMA = 102;
  /** RegularExpression Id. */
  const int  DOT = 103;
  /** RegularExpression Id. */
  const int  ASSIGN = 104;
  /** RegularExpression Id. */
  const int  LT = 105;
  /** RegularExpression Id. */
  const int  BANG = 106;
  /** RegularExpression Id. */
  const int  TILDE = 107;
  /** RegularExpression Id. */
  const int  HOOK = 108;
  /** RegularExpression Id. */
  const int  COLON = 109;
  /** RegularExpression Id. */
  const int  DOUBLECOLON = 110;
  /** RegularExpression Id. */
  const int  EQ = 111;
  /** RegularExpression Id. */
  const int  LE = 112;
  /** RegularExpression Id. */
  const int  GE = 113;
  /** RegularExpression Id. */
  const int  NE = 114;
  /** RegularExpression Id. */
  const int  SC_OR = 115;
  /** RegularExpression Id. */
  const int  SC_AND = 116;
  /** RegularExpression Id. */
  const int  INCR = 117;
  /** RegularExpression Id. */
  const int  DECR = 118;
  /** RegularExpression Id. */
  const int  PLUS = 119;
  /** RegularExpression Id. */
  const int  MINUS = 120;
  /** RegularExpression Id. */
  const int  STAR = 121;
  /** RegularExpression Id. */
  const int  SLASH = 122;
  /** RegularExpression Id. */
  const int  BIT_AND = 123;
  /** RegularExpression Id. */
  const int  BIT_OR = 124;
  /** RegularExpression Id. */
  const int  XOR = 125;
  /** RegularExpression Id. */
  const int  REM = 126;
  /** RegularExpression Id. */
  const int  PLUSASSIGN = 127;
  /** RegularExpression Id. */
  const int  MINUSASSIGN = 128;
  /** RegularExpression Id. */
  const int  STARASSIGN = 129;
  /** RegularExpression Id. */
  const int  SLASHASSIGN = 130;
  /** RegularExpression Id. */
  const int  ANDASSIGN = 131;
  /** RegularExpression Id. */
  const int  ORASSIGN = 132;
  /** RegularExpression Id. */
  const int  XORASSIGN = 133;
  /** RegularExpression Id. */
  const int  REMASSIGN = 134;
  /** RegularExpression Id. */
  const int  RUNSIGNEDSHIFT = 135;
  /** RegularExpression Id. */
  const int  RSIGNEDSHIFT = 136;
  /** RegularExpression Id. */
  const int  GT = 137;
  /** RegularExpression Id. */
  const int  LANGLE = 105;
  /** RegularExpression Id. */
  const int  RANGLE = 137;
  /** RegularExpression Id. */
  const int  IDENTIFIER = 151;
  /** RegularExpression Id. */
  const int  LETTER = 152;
  /** RegularExpression Id. */
  const int  PART_LETTER = 153;
  /** RegularExpression Id. */
  const int  ACT_TOK = 154;

  /** Lexical state. */
  const int  DEFAULT = 0;
  /** Lexical state. */
  const int  AFTER_EGEN = 1;
  /** Lexical state. */
  const int  IN_SINGLE_LINE_COMMENT = 2;
  /** Lexical state. */
  const int  IN_FORMAL_COMMENT = 3;
  /** Lexical state. */
  const int  IN_MULTI_LINE_COMMENT = 4;

  /** Literal token values. */
  public static readonly string[] tokenImage = {
    "<EOF>",
    "\"LOOKAHEAD\"",
    "\"IGNORE_CASE\"",
    "\"PARSER_BEGIN\"",
    "\"PARSER_END\"",
    "\"JAVACODE\"",
    "\"CPPCODE\"",
    "\"TOKEN\"",
    "\"SPECIAL_TOKEN\"",
    "\"MORE\"",
    "\"SKIP\"",
    "\"TOKEN_MGR_DECLS\"",
    "\"EOF\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*@egen*/\"",
    "<token of kind 19>",
    "\"//\"",
    "<token of kind 21>",
    "\"/*\"",
    "\"/*@bgen(jjtree\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 27>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"template\"",
    "\"typename\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"::\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"#\"",
    "\"DCL_PARSER_BEGIN\"",
    "\"DCL_PARSER_END\"",
    "\"INC_PARSER_BEGIN\"",
    "\"INC_PARSER_END\"",
    "\"DEF_PARSER_BEGIN\"",
    "\"DEF_PARSER_END\"",
    "\"...\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"<<\"",
    "\"@\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "<ACT_TOK>",
  };

}
