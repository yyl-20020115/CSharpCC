/* Generated By:JavaCC: Do not edit this line. JavaCCParserConstants.java */
/**
 * This file contains the code for JavaCCParser generated
 * by JavaCCParser itself.
 */

namespace org.javacc.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int _LOOKAHEAD = 1;
  /** RegularExpression Id. */
  int _IGNORE_CASE = 2;
  /** RegularExpression Id. */
  int _PARSER_BEGIN = 3;
  /** RegularExpression Id. */
  int _PARSER_END = 4;
  /** RegularExpression Id. */
  int _JAVACODE = 5;
  /** RegularExpression Id. */
  int _CPPCODE = 6;
  /** RegularExpression Id. */
  int _TOKEN = 7;
  /** RegularExpression Id. */
  int _SPECIAL_TOKEN = 8;
  /** RegularExpression Id. */
  int _MORE = 9;
  /** RegularExpression Id. */
  int _SKIP = 10;
  /** RegularExpression Id. */
  int _TOKEN_MGR_DECLS = 11;
  /** RegularExpression Id. */
  int _EOF = 12;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 24;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 25;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 26;
  /** RegularExpression Id. */
  int ABSTRACT = 28;
  /** RegularExpression Id. */
  int ASSERT = 29;
  /** RegularExpression Id. */
  int BOOLEAN = 30;
  /** RegularExpression Id. */
  int BREAK = 31;
  /** RegularExpression Id. */
  int BYTE = 32;
  /** RegularExpression Id. */
  int CASE = 33;
  /** RegularExpression Id. */
  int CATCH = 34;
  /** RegularExpression Id. */
  int CHAR = 35;
  /** RegularExpression Id. */
  int CLASS = 36;
  /** RegularExpression Id. */
  int CONST = 37;
  /** RegularExpression Id. */
  int CONTINUE = 38;
  /** RegularExpression Id. */
  int _DEFAULT = 39;
  /** RegularExpression Id. */
  int DO = 40;
  /** RegularExpression Id. */
  int DOUBLE = 41;
  /** RegularExpression Id. */
  int ELSE = 42;
  /** RegularExpression Id. */
  int ENUM = 43;
  /** RegularExpression Id. */
  int EXTENDS = 44;
  /** RegularExpression Id. */
  int FALSE = 45;
  /** RegularExpression Id. */
  int FINAL = 46;
  /** RegularExpression Id. */
  int FINALLY = 47;
  /** RegularExpression Id. */
  int FLOAT = 48;
  /** RegularExpression Id. */
  int FOR = 49;
  /** RegularExpression Id. */
  int GOTO = 50;
  /** RegularExpression Id. */
  int IF = 51;
  /** RegularExpression Id. */
  int IMPLEMENTS = 52;
  /** RegularExpression Id. */
  int IMPORT = 53;
  /** RegularExpression Id. */
  int INSTANCEOF = 54;
  /** RegularExpression Id. */
  int INT = 55;
  /** RegularExpression Id. */
  int INTERFACE = 56;
  /** RegularExpression Id. */
  int LONG = 57;
  /** RegularExpression Id. */
  int NATIVE = 58;
  /** RegularExpression Id. */
  int NEW = 59;
  /** RegularExpression Id. */
  int NULL = 60;
  /** RegularExpression Id. */
  int PACKAGE = 61;
  /** RegularExpression Id. */
  int PRIVATE = 62;
  /** RegularExpression Id. */
  int PROTECTED = 63;
  /** RegularExpression Id. */
  int PUBLIC = 64;
  /** RegularExpression Id. */
  int RETURN = 65;
  /** RegularExpression Id. */
  int SHORT = 66;
  /** RegularExpression Id. */
  int STATIC = 67;
  /** RegularExpression Id. */
  int STRICTFP = 68;
  /** RegularExpression Id. */
  int SUPER = 69;
  /** RegularExpression Id. */
  int SWITCH = 70;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 71;
  /** RegularExpression Id. */
  int THIS = 72;
  /** RegularExpression Id. */
  int THROW = 73;
  /** RegularExpression Id. */
  int THROWS = 74;
  /** RegularExpression Id. */
  int TRANSIENT = 75;
  /** RegularExpression Id. */
  int TRUE = 76;
  /** RegularExpression Id. */
  int TRY = 77;
  /** RegularExpression Id. */
  int VOID = 78;
  /** RegularExpression Id. */
  int VOLATILE = 79;
  /** RegularExpression Id. */
  int WHILE = 80;
  /** RegularExpression Id. */
  int TEMPLATE = 81;
  /** RegularExpression Id. */
  int TYPENAME = 82;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 83;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 84;
  /** RegularExpression Id. */
  int HEX_LITERAL = 85;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 86;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 87;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 88;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 89;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 90;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 91;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 92;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 93;
  /** RegularExpression Id. */
  int STRING_LITERAL = 94;
  /** RegularExpression Id. */
  int LPAREN = 95;
  /** RegularExpression Id. */
  int RPAREN = 96;
  /** RegularExpression Id. */
  int LBRACE = 97;
  /** RegularExpression Id. */
  int RBRACE = 98;
  /** RegularExpression Id. */
  int LBRACKET = 99;
  /** RegularExpression Id. */
  int RBRACKET = 100;
  /** RegularExpression Id. */
  int SEMICOLON = 101;
  /** RegularExpression Id. */
  int COMMA = 102;
  /** RegularExpression Id. */
  int DOT = 103;
  /** RegularExpression Id. */
  int ASSIGN = 104;
  /** RegularExpression Id. */
  int LT = 105;
  /** RegularExpression Id. */
  int BANG = 106;
  /** RegularExpression Id. */
  int TILDE = 107;
  /** RegularExpression Id. */
  int HOOK = 108;
  /** RegularExpression Id. */
  int COLON = 109;
  /** RegularExpression Id. */
  int DOUBLECOLON = 110;
  /** RegularExpression Id. */
  int EQ = 111;
  /** RegularExpression Id. */
  int LE = 112;
  /** RegularExpression Id. */
  int GE = 113;
  /** RegularExpression Id. */
  int NE = 114;
  /** RegularExpression Id. */
  int SC_OR = 115;
  /** RegularExpression Id. */
  int SC_AND = 116;
  /** RegularExpression Id. */
  int INCR = 117;
  /** RegularExpression Id. */
  int DECR = 118;
  /** RegularExpression Id. */
  int PLUS = 119;
  /** RegularExpression Id. */
  int MINUS = 120;
  /** RegularExpression Id. */
  int STAR = 121;
  /** RegularExpression Id. */
  int SLASH = 122;
  /** RegularExpression Id. */
  int BIT_AND = 123;
  /** RegularExpression Id. */
  int BIT_OR = 124;
  /** RegularExpression Id. */
  int XOR = 125;
  /** RegularExpression Id. */
  int REM = 126;
  /** RegularExpression Id. */
  int PLUSASSIGN = 127;
  /** RegularExpression Id. */
  int MINUSASSIGN = 128;
  /** RegularExpression Id. */
  int STARASSIGN = 129;
  /** RegularExpression Id. */
  int SLASHASSIGN = 130;
  /** RegularExpression Id. */
  int ANDASSIGN = 131;
  /** RegularExpression Id. */
  int ORASSIGN = 132;
  /** RegularExpression Id. */
  int XORASSIGN = 133;
  /** RegularExpression Id. */
  int REMASSIGN = 134;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 135;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 136;
  /** RegularExpression Id. */
  int GT = 137;
  /** RegularExpression Id. */
  int LANGLE = 105;
  /** RegularExpression Id. */
  int RANGLE = 137;
  /** RegularExpression Id. */
  int IDENTIFIER = 151;
  /** RegularExpression Id. */
  int LETTER = 152;
  /** RegularExpression Id. */
  int PART_LETTER = 153;
  /** RegularExpression Id. */
  int ACT_TOK = 154;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int AFTER_EGEN = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 3;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"LOOKAHEAD\"",
    "\"IGNORE_CASE\"",
    "\"PARSER_BEGIN\"",
    "\"PARSER_END\"",
    "\"JAVACODE\"",
    "\"CPPCODE\"",
    "\"TOKEN\"",
    "\"SPECIAL_TOKEN\"",
    "\"MORE\"",
    "\"SKIP\"",
    "\"TOKEN_MGR_DECLS\"",
    "\"EOF\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*@egen*/\"",
    "<token of kind 19>",
    "\"//\"",
    "<token of kind 21>",
    "\"/*\"",
    "\"/*@bgen(jjtree\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 27>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"template\"",
    "\"typename\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"::\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"#\"",
    "\"DCL_PARSER_BEGIN\"",
    "\"DCL_PARSER_END\"",
    "\"INC_PARSER_BEGIN\"",
    "\"INC_PARSER_END\"",
    "\"DEF_PARSER_BEGIN\"",
    "\"DEF_PARSER_END\"",
    "\"...\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"<<\"",
    "\"@\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "<ACT_TOK>",
  };

}
