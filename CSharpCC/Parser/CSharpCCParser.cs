/* Generated By:JavaCC: Do not edit this line. JavaCCParser.java */


using CSharpCC.CCTree;
using System.Text;
/**
* This file contains the code for JavaCCParser generated
* by JavaCCParser itself.
*/
namespace CSharpCC.Parser;


public class CSharpCCParser : CSharpCCParserInternals
{

    /**
     * The name of the parser class.
     */
    String parser_class_name;

    /**
     * This flag is set to true when the part between PARSER_BEGIN and
     * PARSER_END is being parsed.
     */
    bool processing_cu = false;

    /**
     * The level of class nesting.
     */
    int class_nesting = 0;

    /**
     * This int variable is incremented while parsing local lookaheads.
     * Hence it keeps track of *syntactic* lookahead nesting.
     * This is used to provide warnings when actions and nested lookaheads
     * are used in syntactic lookahead productions.  This is to prevent
     * typos such as leaving out the comma in LOOKAHEAD( foo(), {check()} ).
     */
    int inLocalLA = 0;

    /**
     * Set to true when the parser is within an action.
     */
    bool inAction = false;

    /**
     * This flag keeps track of whether or not return and throw
     * statements have been patched during the parsing of a production.
     * The value of this flag is assigned the field with the same
     * name in BNFProduction.java.
     */
    bool jumpPatched = false;

    protected static bool IsJavaLanguage => Options.language == Language.Java;
    protected static bool IsCppLanguage => Options.language == Language.CPP;
    protected static bool IsCSharpLanguage => Options.language == Language.CSharp;
    /*
     * Returns true if the next token is not in the FOLLOW list of "expansion".
     * It is used to decide when the end of an "expansion" has been reached.
     */
    private bool NotTailOfExpansionUnit()
    {
        Token t;
        t = GetToken(1);
        if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
        return true;
    }

    /*
     * return true if the token is allowed in a ResultType. Used to  mark a c++
     * result type as an error for a java grammar
     */
    private bool IsAllowed(Token t)
    {
        if (IsJavaLanguage && (t.kind == STAR || t.kind == BIT_AND || t.kind == CONST))
            return false;
        else
            return true;
    }

    /**
     * Class to hold modifiers.
     */
    public class ModifierSet
    {
        /* Definitions of the bits in the modifiers field.  */
        public const int PUBLIC = 0x0001;
        public const int PROTECTED = 0x0002;
        public const int PRIVATE = 0x0004;
        public const int ABSTRACT = 0x0008;
        public const int STATIC = 0x0010;
        public const int FINAL = 0x0020;
        public const int SYNCHRONIZED = 0x0040;
        public const int NATIVE = 0x0080;
        public const int TRANSIENT = 0x0100;
        public const int VOLATILE = 0x0200;
        public const int STRICTFP = 0x1000;

        /** A set of accessors that indicate whether the specified modifier
            is in the set. */

        public bool IsPublic(int modifiers)
        {
            return (modifiers & PUBLIC) != 0;
        }

        public bool IsProtected(int modifiers)
        {
            return (modifiers & PROTECTED) != 0;
        }

        public bool IsPrivate(int modifiers)
        {
            return (modifiers & PRIVATE) != 0;
        }

        public bool IsStatic(int modifiers)
        {
            return (modifiers & STATIC) != 0;
        }

        public bool IsAbstract(int modifiers)
        {
            return (modifiers & ABSTRACT) != 0;
        }

        public bool IsFinal(int modifiers)
        {
            return (modifiers & FINAL) != 0;
        }

        public bool IsNative(int modifiers)
        {
            return (modifiers & NATIVE) != 0;
        }

        public bool IsStrictfp(int modifiers)
        {
            return (modifiers & STRICTFP) != 0;
        }

        public bool IsSynchronized(int modifiers)
        {
            return (modifiers & SYNCHRONIZED) != 0;
        }

        public bool IsTransient(int modifiers)
        {
            return (modifiers & TRANSIENT) != 0;
        }

        public bool IsVolatile(int modifiers)
        {
            return (modifiers & VOLATILE) != 0;
        }

        /**
         * Removes the given modifier.
         */
        static int RemoveModifier(int modifiers, int mod)
        {
            return modifiers & ~mod;
        }
    }

    private void EatUptoCloseBrace(List<Token> tokens)
    {
        int b = 1;
        Token t;
        while ((t = GetToken(1)).kind != RBRACE || --b != 0)
        {
            tokens?.Add(t);
            if (t.kind == EOF) break;
            if (t.kind == LBRACE) b++;
            getNextToken(); // eat it
        }
    }


    private void EatUptoRParen(List<Token> tokens)
    {
        int b = 1;
        Token t;
        while ((t = GetToken(1)).kind != RPAREN || --b != 0)
        {
            tokens?.Add(t);
            if (t.kind == EOF) break;
            if (t.kind == LPAREN) b++;
            getNextToken(); // eat it
        }
    }

    public void CSharpCC_Input()
    {
        string id1, id2;
        Initialize();
        CSharpCC_Options();

        cc_consume_token(_PARSER_BEGIN);
        cc_consume_token(LPAREN);
        id1 = Identifier();
        Addcuname(id1);
        cc_consume_token(RPAREN);
        processing_cu = true;
        parser_class_name = id1;

        if (!IsJavaLanguage)
        {
            CSharpCCGlobals.otherLanguageDeclTokenBeg = GetToken(1);
            while (GetToken(1).kind != _PARSER_END)
            {
                getNextToken();
            }
            CSharpCCGlobals.otherLanguageDeclTokenEnd = GetToken(1);
        }
        CompilationUnit();
        processing_cu = false;
        cc_consume_token(_PARSER_END);
        cc_consume_token(LPAREN);
        id2 = Identifier();
        Compare(GetToken(0), id1, id2);
        cc_consume_token(RPAREN);
    label_1:
        while (true)
        {
            Production();
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _JAVACODE:
                case _CPPCODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case VOID:
                case TEMPLATE:
                case LANGLE:
                case DOUBLECOLON:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    cc_la1[0] = cc_gen;
                    goto label_1_exit;
            }
        }
    label_1_exit:
        cc_consume_token(0);
    }

    public void CSharpCC_Options()
    {
        if (GetToken(1).image.Equals("options"))
        {
            cc_consume_token(IDENTIFIER);
            cc_consume_token(LBRACE);
        label_2:
            while (true)
            {
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case _LOOKAHEAD:
                    case _IGNORE_CASE:
                    case _PARSER_BEGIN:
                    case STATIC:
                    case IDENTIFIER:
                        ;
                        break;
                    default:
                        cc_la1[1] = cc_gen;
                        goto label_2_exit;
                }
                OptionBinding();
            }
        label_2_exit:
            cc_consume_token(RBRACE);
        }
        else
        {
            ;
        }
        Options.Normalize();
    }

    public void OptionBinding()
    {
        String option_name;
        int int_val;
        bool bool_val;
        String string_val;
        List<string> string_list;
        Token t = GetToken(1);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case IDENTIFIER:
                cc_consume_token(IDENTIFIER);
                break;
            case _LOOKAHEAD:
                cc_consume_token(_LOOKAHEAD);
                break;
            case _IGNORE_CASE:
                cc_consume_token(_IGNORE_CASE);
                break;
            case STATIC:
                cc_consume_token(STATIC);
                break;
            case _PARSER_BEGIN:
                cc_consume_token(_PARSER_BEGIN);
                break;
            default:
                cc_la1[2] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
        option_name = t.image;
        cc_consume_token(ASSIGN);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case INTEGER_LITERAL:
                int_val = IntegerLiteral();
                Options.SetInputFileOption(t, GetToken(0), option_name, (int_val));
                break;
            case FALSE:
            case TRUE:
                bool_val = BooleanLiteral();
                Options.SetInputFileOption(t, GetToken(0), option_name, (bool_val));
                break;
            case STRING_LITERAL:
                string_val = StringLiteral();
                Options.SetInputFileOption(t, GetToken(0), option_name, string_val);
                break;
            case LPAREN:
                string_list = StringList();
                Options.SetInputFileOption(t, GetToken(0), option_name, string_list);
                break;
            default:
                cc_la1[3] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
        cc_consume_token(SEMICOLON);
    }

    public List<string> StringList()
    {
        List<string> strings = new();
        String s;
        cc_consume_token(LPAREN);
        s = StringLiteral();
        strings.Add(s);
    label_3:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[4] = cc_gen;
                    goto label_3_exit;
            }
            cc_consume_token(COMMA);
            s = StringLiteral();
            strings.Add(s);
        }
    label_3_exit:
        cc_consume_token(RPAREN);
        { if (true) return strings; }
        throw new Error("Missing return statement in function");
    }

    public void Production()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _JAVACODE:
                JavaCodeProduction();
                break;
            case _CPPCODE:
                CPPCodeProduction();
                break;
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case LANGLE:
                RegularExprProduction();
                break;
            case _TOKEN_MGR_DECLS:
                TokenManagerDecls();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case VOID:
            case TEMPLATE:
            case DOUBLECOLON:
            case IDENTIFIER:
                BnfProduction();
                break;
            default:
                cc_la1[5] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void JavaCodeProduction()
    {
        var p = new CSharpCodeProduction();
        String lhs;
        Token t = GetToken(1);
        p.        FirstToken = t;
        List<Token> excName;
        p.        ThrowsList = new();
        p.        Line = t.beginLine;
        p.        Column = t.beginColumn;
        cc_consume_token(_JAVACODE);
        AccessModifier(p);
        ResultType(p.ReturnTypeTokens);
        lhs = Identifier();
        p.        Lhs = lhs;
        FormalParameters(p.ParameterListTokens);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case THROWS:
                cc_consume_token(THROWS);
                excName = new();
                Name(excName);
                p.                ThrowsList.Add(excName);
            label_4:
                while (true)
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case COMMA:
                            ;
                            break;
                        default:
                            cc_la1[6] = cc_gen;
                            goto label_4_exit;
                    }
                    excName = new();
                    cc_consume_token(COMMA);
                    Name(excName);
                    p.                    ThrowsList.Add(excName);
                }
            label_4_exit:
                break;
            default:
                cc_la1[7] = cc_gen;
                break;
        }
        Block(p.CodeTokens);
        p.        LastToken = GetToken(0);
        AddProduction(p);
    }

    public void CPPCodeProduction()
    {
        var p = new CppCodeProduction();
        String lhs;
        Token t = GetToken(1);
        p.        FirstToken = t;
        List<Token> excName;
        p.        ThrowsList = new();
        p.        Line = t.beginLine;
        p.        Column = t.beginColumn;
        cc_consume_token(_CPPCODE);
        AccessModifier(p);
        ResultType(p.ReturnTypeTokens);
        lhs = Identifier();
        p.        Lhs = lhs;
        FormalParameters(p.ParameterListTokens);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case THROWS:
                cc_consume_token(THROWS);
                excName = new();
                Name(excName);
                p.                ThrowsList.Add(excName);
            label_5:
                while (true)
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case COMMA:
                            ;
                            break;
                        default:
                            cc_la1[8] = cc_gen;
                            goto label_5_exit;
                    }
                    excName = new();
                    cc_consume_token(COMMA);
                    Name(excName);
                    p.                    ThrowsList.Add(excName);
                }
            label_5_exit:
                break;
            default:
                cc_la1[9] = cc_gen;
                break;
                ;
        }
        Block(p.CodeTokens);
        p.        LastToken = GetToken(0);
        AddProduction(p);
    }

    public void BnfProduction()
    {
        BNFProduction p = new();
        Container c = new();
        Token t = GetToken(1);
        p.        FirstToken = t;
        List<Token> excName;
        String lhs;
        p.        ThrowsList = new();
        p.        Line = t.beginLine;
        p.        Column = t.beginColumn;
        jumpPatched = false;
        AccessModifier(p);
        ResultType(p.ReturnTypeTokens);
        lhs = Identifier();
        p.        Lhs = lhs;
        FormalParameters(p.ParameterListTokens);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case THROWS:
                cc_consume_token(THROWS);
                excName = new();
                Name(excName);
                p.                ThrowsList.Add(excName);
            label_6:
                while (true)
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case COMMA:
                            ;
                            break;
                        default:
                            cc_la1[10] = cc_gen;
                            goto label_6_exit;
                    }
                    excName = new();
                    cc_consume_token(COMMA);
                    Name(excName);
                    p.                    ThrowsList.Add(excName);
                }
            label_6_exit:
                break;
            default:
                cc_la1[11] = cc_gen;
                break;

        }
        cc_consume_token(COLON);
        Block(p.GetDeclarationTokens());
        cc_consume_token(LBRACE);
        ExpansionChoices(c);
        t = cc_consume_token(RBRACE);
        p.        LastToken = t;
        p.SetJumpPatched(jumpPatched);
        ProductionAddexpansion(p, (Expansion)(c.Member));
        AddProduction(p);
    }

    public void AccessModifier(NormalProduction p)
    {
        Token t = null;
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case PUBLIC:
                        t = cc_consume_token(PUBLIC);
                        break;
                    case PROTECTED:
                        t = cc_consume_token(PROTECTED);
                        break;
                    case PRIVATE:
                        t = cc_consume_token(PRIVATE);
                        break;
                    default:
                        cc_la1[12] = cc_gen;
                        cc_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                cc_la1[13] = cc_gen;
                break;
        }
        if (t != null)
        {
            p.            AccessMod = t.image;
        }
    }

    public void RegularExprProduction()
    {
        var p = new TokenProduction();
        List<string> states;
        Token t = p.firstToken = GetToken(1);
        p.        Line = t.beginLine;
        p.        Column = t.beginColumn;
        // set p.lexStates assuming there is no state spec.
        // and then override if necessary.
        p.lexStates = new String[] { "DEFAULT" };
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LANGLE:
                if (jj_2_1(2))
                {
                    cc_consume_token(LANGLE);
                    cc_consume_token(STAR);
                    cc_consume_token(RANGLE);
                    p.lexStates = null;
                }
                else
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case LANGLE:
                            cc_consume_token(LANGLE);
                            states = new();
                            t = cc_consume_token(IDENTIFIER);
                            states.Add(t.image);
                        label_7:
                            while (true)
                            {
                                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                                {
                                    case COMMA:
                                        ;
                                        break;
                                    default:
                                        cc_la1[14] = cc_gen;
                                        goto label_7_exit;
                                }
                                cc_consume_token(COMMA);
                                t = cc_consume_token(IDENTIFIER);
                                states.Add(t.image);
                            }
                        label_7_exit:
                            cc_consume_token(RANGLE);
                            p.lexStates = new String[states.Count];
                            for (int i = 0; i < states.Count; i++)
                            {
                                p.lexStates[i] = (String)states[i];
                            }
                            break;
                        default:
                            cc_la1[15] = cc_gen;
                            cc_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
            default:
                cc_la1[16] = cc_gen;
                break;
        }
        RegexprKind(p);
        if (p.kind != TokenProduction.TOKEN && Options.GetUserTokenManager())
        {
            CSharpCCErrors.Warning(GetToken(0), "Regular expression is being treated as if it were a TOKEN since option USER_TOKEN_MANAGER has been set to true.");
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LBRACKET:
                cc_consume_token(LBRACKET);
                t = cc_consume_token(_IGNORE_CASE);
                cc_consume_token(RBRACKET);
                p.ignoreCase = true;
                if (Options.GetUserTokenManager())
                {
                    CSharpCCErrors.Warning(t, "Ignoring \u005c\"IGNORE_CASE\u005c\" specification since option USER_TOKEN_MANAGER has been set to true.");
                }
                break;
            default:
                cc_la1[17] = cc_gen;
                break;
        }
        cc_consume_token(COLON);
        cc_consume_token(LBRACE);
        RegexprSpec(p);
    label_8:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case BIT_OR:
                    ;
                    break;
                default:
                    cc_la1[18] = cc_gen;
                    goto label_8_exit;
            }
            cc_consume_token(BIT_OR);
            RegexprSpec(p);
        }
    label_8_exit:
        t = cc_consume_token(RBRACE);
        p.lastToken = t;
        AddRegexpr(p);
    }

    public void TokenManagerDecls()
    {
        List<Token> decls = new();
        Token t;
        t = cc_consume_token(_TOKEN_MGR_DECLS);
        cc_consume_token(COLON);
        if (!IsJavaLanguage)
        {
            getNextToken(); // eat {
            EatUptoCloseBrace(decls);
            getNextToken(); // eat }
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LBRACE:
                ClassOrInterfaceBody(false, decls);
                break;
            default:
                cc_la1[19] = cc_gen;
                break;
        }
        AddTokenManagerDecls(t, decls);
    }

    public void RegexprKind(TokenProduction p)
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _TOKEN:
                cc_consume_token(_TOKEN);
                p.kind = TokenProduction.TOKEN;
                break;
            case _SPECIAL_TOKEN:
                cc_consume_token(_SPECIAL_TOKEN);
                p.kind = TokenProduction.SPECIAL;
                break;
            case _SKIP:
                cc_consume_token(_SKIP);
                p.kind = TokenProduction.SKIP;
                break;
            case _MORE:
                cc_consume_token(_MORE);
                p.kind = TokenProduction.MORE;
                break;
            default:
                cc_la1[20] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void RegexprSpec(TokenProduction p)
    {
        var c = new Container();
        var act = new Action();
        Token t = null;
        var res = new RegExprSpec();
        RegularExpression(c);
        res.Rexp = (RegularExpression)c.Member;
        res.Rexp.tpContext = p;
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LBRACE:
                t = GetToken(1);
                Block(act.ActionTokens);
                if (Options.GetUserTokenManager())
                {
                    CSharpCCErrors.Warning(t, "Ignoring action in regular expression specification since option USER_TOKEN_MANAGER has been set to true.");
                }
                if (res.Rexp.private_rexp)
                {
                    CSharpCCErrors.ParseError(t, "Actions are not permitted on private (#) regular expressions.");
                }
                break;
            default:
                cc_la1[21] = cc_gen;
                break;
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case COLON:
                cc_consume_token(COLON);
                t = cc_consume_token(IDENTIFIER);
                res.NextState = t.image;
                if (res.Rexp.private_rexp)
                {
                    CSharpCCErrors.ParseError(t, "Lexical state changes are not permitted after private (#) regular expressions.");
                }
                break;
            default:
                cc_la1[22] = cc_gen;
                break;
        }
        res.Act = act;
        res.NsToken = t;
        p.respecs.Add(res);
    }

    public void ExpansionChoices(Container c1)
    {
        bool morethanone = false;
        Choice ch = null; // unnecessary initialization to make Java compiler happy!
        var c2 = new Container();
        Expansion(c1);
    label_9:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case BIT_OR:
                    ;
                    break;
                default:
                    cc_la1[23] = cc_gen;
                    goto label_9_exit;
            }
            cc_consume_token(BIT_OR);
            Expansion(c2);
            if (morethanone)
            {
                ch.Choices.Add(c2.Member as Expansion);
                ((Expansion)c2.Member).Parent = ch;
            }
            else
            {
                morethanone = true;
                ch = new Choice((Expansion)c1.Member);
                ((Expansion)c1.Member).Parent = ch;
                ch.Choices.Add(c2.Member as Expansion);
                ((Expansion)c2.Member).Parent = ch;
            }
        }
    label_9_exit:
        if (morethanone)
        {
            c1.Member = ch;
        }
    }

    public void Expansion(Container c1)
    {
        var seq = new Sequence();
        var c2 = new Container();
        var la = new Lookahead();
        var t = GetToken(1);
        seq.Line = t.beginLine;
        seq.Column = t.beginColumn;
        la.Line = t.beginLine;
        la.Column = t.beginColumn;
        la.        Amount = Options.GetLookahead();
        la.        LaExpansion = null;
        la.SetExplicit(false);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _LOOKAHEAD:
                t = cc_consume_token(_LOOKAHEAD);
                cc_consume_token(LPAREN);
                la = LocalLookahead();
                cc_consume_token(RPAREN);
                if (inLocalLA != 0 && la.Amount != 0)
                {
                    CSharpCCErrors.Warning(t, "Only semantic lookahead specifications within other lookahead specifications is considered.  Syntactic lookahead is ignored.");
                }
                break;
            default:
                cc_la1[24] = cc_gen;
                break;
        }
        seq.units.Add(la);
    label_10:
        while (true)
        {
            ExpansionUnit(c2);
            seq.units.Add(c2.Member as Expansion);
            ((Expansion)c2.Member).Parent = seq;
            ((Expansion)c2.Member).Ordinal = seq.units.Count - 1;
            if (NotTailOfExpansionUnit())
            {
                ;
            }
            else
            {
                goto label_10_exit;
            }
        }
    label_10_exit:
        if (la.LaExpansion == null)
        {
            la.            LaExpansion = seq;
        }
        c1.Member = seq;
    }

    public Lookahead LocalLookahead()
    {
        var la = new Lookahead();
        la.SetExplicit(true);
        var t = GetToken(1);
        la.Line = t.beginLine;
        la.Column = t.beginColumn;
        la.        LaExpansion = null;
        Container c = new();
        bool commaAtEnd = false, emptyLA = true;
        int laAmount;
        inLocalLA++;
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case INTEGER_LITERAL:
                laAmount = IntegerLiteral();
                emptyLA = false;
                la.                Amount = laAmount;
                break;
            default:
                cc_la1[25] = cc_gen;
                break;
        }
        if (!emptyLA && (GetToken(1).kind != RPAREN))
        {
            cc_consume_token(COMMA);
            commaAtEnd = true;
        }
        else
        {
            ;
        }
        if (GetToken(1).kind != RPAREN && GetToken(1).kind != LBRACE)
        {
            ExpansionChoices(c);
            emptyLA = false; commaAtEnd = false;
            la.            LaExpansion = (Expansion)c.Member;
        }
        else
        {
            ;
        }
        if (!emptyLA && !commaAtEnd && (GetToken(1).kind != RPAREN))
        {
            cc_consume_token(COMMA);
            commaAtEnd = true;
        }
        else
        {
            ;
        }
        if (emptyLA || commaAtEnd)
        {
            cc_consume_token(LBRACE);
            if (!IsJavaLanguage)
            {
                int b = 0;
                while (GetToken(1).kind != RBRACE || --b > 0)
                {
                    t = getNextToken();
                    la.                    ActionTokens.Add(t);
                    if (t.kind == LBRACE) b++;
                }
            }
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case TEMPLATE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case BANG:
                case TILDE:
                case DOUBLECOLON:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case IDENTIFIER:
                    Expression(la.ActionTokens);
                    break;
                default:
                    cc_la1[26] = cc_gen;
                    break;
            }
            cc_consume_token(RBRACE);
            if (emptyLA)
            {
                la.                Amount = 0;
            }
        }
        else
        {
            ;
        }
        inLocalLA--;
        { if (true) return la; }
        throw new Error("Missing return statement in function");
    }

    public void ExpansionUnit(Container c)
    {
        String name;
        List<Token> lhsTokens = new();
        NonTerminal nt;
        Action act;
        Token t;
        Lookahead la;
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _LOOKAHEAD:
                /*
                   * We give this priority over primary expressions which use LOOKAHEAD as the
                   * name of its identifier.
                   */
                t = cc_consume_token(_LOOKAHEAD);
                cc_consume_token(LPAREN);
                la = LocalLookahead();
                cc_consume_token(RPAREN);
                // Now set the la_expansion field of la with a dummy
                // expansion (we use EOF).
                la.                // Now set the la_expansion field of la with a dummy
                // expansion (we use EOF).
                LaExpansion = new REndOfFile();
                // Create a singleton choice with an empty action.
                var ch = new Choice(t);
                var seq = new Sequence(t, la);
                la.Parent = seq; la.Ordinal = 0;
                act = new Action();
                act.Line = t.beginLine;
                act.Column = t.beginColumn;
                seq.units.Add(act);
                act.Parent = seq; act.Ordinal = 1;
                ch.Choices.Add(seq);
                seq.Parent = ch; seq.Ordinal = 0;
                if (la.Amount != 0)
                {
                    if (la.ActionTokens.Count != 0)
                    {
                        CSharpCCErrors.Warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  Only semantic lookahead will be considered here.");
                    }
                    else
                    {
                        CSharpCCErrors.Warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  This will be ignored.");
                    }
                }
                c.Member = ch;
                break;
            case LBRACE:
                act = new Action();
                t = GetToken(1);
                act.Line = t.beginLine;
                act.Column = t.beginColumn;
                inAction = true;
                Block(act.ActionTokens);
                inAction = false;
                if (inLocalLA != 0)
                {
                    CSharpCCErrors.Warning(t, "Action within lookahead specification will be ignored.");
                }
                c.Member = act;
                break;
            case LBRACKET:
                t = cc_consume_token(LBRACKET);
                ExpansionChoices(c);
                cc_consume_token(RBRACKET);
                c.Member = new ZeroOrOne(t, (Expansion)c.Member);
                break;
            case TRY:
                Container expch = new();
                List<List<Token>> types = new();
                List<Token> ids = new();
                List<List<Token>> catchblks = new();
                List<Token> finallyblk = null;
                List<Token> vec = new();
                Token t0;
                t0 = cc_consume_token(TRY);
                cc_consume_token(LBRACE);
                ExpansionChoices(expch);
                cc_consume_token(RBRACE);
            label_11:
                while (true)
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case CATCH:
                            ;
                            break;
                        default:
                            cc_la1[27] = cc_gen;
                            goto label_11_exit;
                    }
                    cc_consume_token(CATCH);
                    cc_consume_token(LPAREN);
                    if (!IsJavaLanguage)
                    {
                        while (GetToken(1).kind != RPAREN) getNextToken();
                    }
                    t = GetToken(0);
                    t.kind = IDENTIFIER;
                    t.image = "...";
                    if (IsJavaLanguage)
                    {
                        Name(vec);
                        t = cc_consume_token(IDENTIFIER);
                    }
                    else
                    {
                        ;
                    }
                    cc_consume_token(RPAREN);
                    types.Add(vec);
                    ids.Add(t);
                    vec = new();
                    inAction = true;
                    Block(vec);
                    inAction = false;
                    catchblks.Add(vec);
                    vec = new();
                }
            label_11_exit:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case FINALLY:
                        inAction = true;
                        cc_consume_token(FINALLY);
                        Block(vec);
                        inAction = false;
                        finallyblk = vec;
                        break;
                    default:
                        cc_la1[28] = cc_gen;
                        break;
                }
                MakeTryBlock(t0, c, expch, types, ids, catchblks, finallyblk);
                break;
            default:
                cc_la1[34] = cc_gen;
                if (jj_2_4(2147483647))
                {
                    if (jj_2_2(2147483647))
                    {
                        Token first = GetToken(1);
                        PrimaryExpression();
                        Token last = GetToken(0);
                        cc_consume_token(ASSIGN);
                        t = first;
                        while (true)
                        {
                            lhsTokens.Add(t);
                            if (t == last) break;
                            t = t.next;
                        }
                    }
                    else
                    {
                        ;
                    }
                    if (jj_2_3(2147483647))
                    {
                        t = GetToken(1);
                        nt = new NonTerminal();
                        nt.Line = t.beginLine;
                        nt.Column = t.beginColumn;
                        nt.                        LhsTokens = lhsTokens;
                        name = Identifier();
                        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                        {
                            case LANGLE:
                                TypeArguments(nt.ParametrizedTypeTokens);
                                break;
                            default:
                                cc_la1[29] = cc_gen;
                                break;
                        }
                        Arguments(nt.ArgumentTokens);
                        nt.                        Name = name;
                        c.Member = nt;
                    }
                    else
                    {
                        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                        {
                            case STRING_LITERAL:
                            case LANGLE:
                                RegularExpression(c);
                                ((RegularExpression)(c.Member)).lhsTokens = lhsTokens;
                                AddInlineRegexpr((RegularExpression)(c.Member));
                                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                                {
                                    case DOT:
                                        cc_consume_token(DOT);
                                        t = cc_consume_token(IDENTIFIER);
                                        ((RegularExpression)(c.Member)).rhsToken = t;
                                        break;
                                    default:
                                        cc_la1[30] = cc_gen;
                                        break;
                                }
                                break;
                            default:
                                cc_la1[31] = cc_gen;
                                cc_consume_token(-1);
                                throw new ParseException();
                        }
                    }
                }
                else
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case LPAREN:
                            t = cc_consume_token(LPAREN);
                            ExpansionChoices(c);
                            cc_consume_token(RPAREN);
                            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                            {
                                case HOOK:
                                case PLUS:
                                case STAR:
                                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                                    {
                                        case PLUS:
                                            cc_consume_token(PLUS);
                                            c.Member = new OneOrMore(t, (Expansion)c.Member);
                                            break;
                                        case STAR:
                                            cc_consume_token(STAR);
                                            c.Member = new ZeroOrMore(t, (Expansion)c.Member);
                                            break;
                                        case HOOK:
                                            cc_consume_token(HOOK);
                                            c.Member = new ZeroOrOne(t, (Expansion)c.Member);
                                            break;
                                        default:
                                            cc_la1[32] = cc_gen;
                                            cc_consume_token(-1);
                                            throw new ParseException();
                                    }
                                    break;
                                default:
                                    cc_la1[33] = cc_gen;
                                    break;
                            }
                            break;
                        default:
                            cc_la1[35] = cc_gen;
                            cc_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
        }
    }

    public void RegularExpression(Container c)
    {
        REndOfFile ef;
        String image;
        bool private_rexp = false;
        Token t = GetToken(1);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case STRING_LITERAL:
                image = StringLiteral();
                c.Member = new RStringLiteral(t, image);
                break;
            default:
                cc_la1[38] = cc_gen;
                if (jj_2_5(3))
                {
                    image = "";
                    cc_consume_token(LANGLE);
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case 138:
                        case IDENTIFIER:
                            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                            {
                                case 138:
                                    cc_consume_token(138);
                                    private_rexp = true;
                                    break;
                                default:
                                    cc_la1[36] = cc_gen;
                                    break;
                            }
                            image = Identifier();
                            cc_consume_token(COLON);
                            break;
                        default:
                            cc_la1[37] = cc_gen;
                            break;
                    }
                    ComplexRegularExpressionChoices(c);
                    cc_consume_token(RANGLE);
                    RegularExpression re;
                    if (c.Member is RJustName rj)
                    {
                        RSequence seq = new();
                        seq.units.Add(rj);
                        re = seq;
                    }
                    else
                    {
                        re = (RegularExpression)c.Member;
                    }
                    re.label = image;
                    re.private_rexp = private_rexp;
                    re.Line = t.beginLine;
                    re.Column = t.beginColumn;
                    c.Member = re;
                }
                else if (jj_2_6(2))
                {
                    cc_consume_token(LANGLE);
                    image = Identifier();
                    cc_consume_token(RANGLE);
                    c.Member = new RJustName(t, image);
                }
                else
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case LANGLE:
                            cc_consume_token(LANGLE);
                            cc_consume_token(_EOF);
                            cc_consume_token(RANGLE);
                            ef = new REndOfFile();
                            ef.Line = t.beginLine;
                            ef.Column = t.beginColumn;
                            ef.ordinal = 0;
                            c.Member = ef;
                            break;
                        default:
                            cc_la1[39] = cc_gen;
                            cc_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
        }
    }

    public void ComplexRegularExpressionChoices(Container c1)
    {
        bool morethanone = false;
        RChoice ch = null; // unnecessary initialization to make Java compiler happy!
        Container c2 = new();
        ComplexRegularExpression(c1);
    label_12:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case BIT_OR:
                    ;
                    break;
                default:
                    cc_la1[40] = cc_gen;
                    goto label_12_exit;
            }
            cc_consume_token(BIT_OR);
            ComplexRegularExpression(c2);
            if (morethanone)
            {
                ch.                Choices.Add(c2.Member as Expansion);
            }
            else
            {
                morethanone = true;
                ch = new RChoice();
                ch.Line = ((RegularExpression)c1.Member).Line;
                ch.Column = ((RegularExpression)c1.Member).Column;
                ch.                Choices.Add(c1.Member as Expansion);
                ch.                Choices.Add(c2.Member as Expansion);
            }
        }
    label_12_exit:

        if (morethanone)
        {
            c1.Member = ch;
        }
    }

    public void ComplexRegularExpression(Container c1)
    {
        int count = 0;
        RSequence seq = null; // unnecessary initialization to make Java compiler happy!
        var c2 = new Container();
    label_13:
        while (true)
        {
            ComplexRegularExpressionUnit(c2);
            count++;
            if (count == 1)
            {
                c1.Member = c2.Member; // if count does not go beyond 1, we are done.
            }
            else if (count == 2)
            { // more than 1, so create a sequence.
                seq = new RSequence();
                seq.Line = ((RegularExpression)c1.Member).Line;
                seq.Column = ((RegularExpression)c1.Member).Column;
                seq.units.Add(c1.Member as RegularExpression);
                seq.units.Add(c2.Member as RegularExpression);
            }
            else
            {
                seq.units.Add(c2.Member as RegularExpression);
            }
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case STRING_LITERAL:
                case LPAREN:
                case LBRACKET:
                case LANGLE:
                case TILDE:
                    ;
                    break;
                default:
                    cc_la1[41] = cc_gen;
                    goto label_13_exit;
            }
        }
    label_13_exit:
        if (count > 1)
        {
            c1.Member = seq;
        }
    }

    public void ComplexRegularExpressionUnit(Container c)
    {
        String image;
        Token t = GetToken(1);
        int r1 = 0, r2 = -1;
        bool hasMax = false;
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case STRING_LITERAL:
                image = StringLiteral();
                c.Member = new RStringLiteral(t, image);
                break;
            case LANGLE:
                cc_consume_token(LANGLE);
                image = Identifier();
                cc_consume_token(RANGLE);
                c.Member = new RJustName(t, image);
                break;
            case LBRACKET:
            case TILDE:
                CharacterList(c);
                break;
            case LPAREN:
                cc_consume_token(LPAREN);
                ComplexRegularExpressionChoices(c);
                cc_consume_token(RPAREN);
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case LBRACE:
                    case HOOK:
                    case PLUS:
                    case STAR:
                        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                        {
                            case PLUS:
                                cc_consume_token(PLUS);
                                c.Member = new ROneOrMore(t, (RegularExpression)c.Member);
                                break;
                            case STAR:
                                cc_consume_token(STAR);
                                c.Member = new RZeroOrMore(t, (RegularExpression)c.Member);
                                break;
                            case HOOK:
                                cc_consume_token(HOOK);
                                RZeroOrOne zorexp = new();
                                zorexp.Line = t.beginLine;
                                zorexp.Column = t.beginColumn;
                                zorexp.regexpr = (RegularExpression)c.Member;
                                c.Member = zorexp;
                                break;
                            case LBRACE:
                                cc_consume_token(LBRACE);
                                r1 = IntegerLiteral();
                                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                                {
                                    case COMMA:
                                        cc_consume_token(COMMA);
                                        hasMax = true;
                                        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                                        {
                                            case INTEGER_LITERAL:
                                                r2 = IntegerLiteral();
                                                break;
                                            default:
                                                cc_la1[42] = cc_gen;
                                                break;
                                        }
                                        break;
                                    default:
                                        cc_la1[43] = cc_gen;
                                        break;
                                }
                                cc_consume_token(RBRACE);
                                RRepetitionRange rrrexp = new();
                                rrrexp.Line = t.beginLine;
                                rrrexp.Column = t.beginColumn;
                                rrrexp.min = r1;
                                rrrexp.max = r2;
                                rrrexp.hasMax = hasMax;
                                rrrexp.regexpr = (RegularExpression)c.Member;
                                c.Member = rrrexp;
                                break;
                            default:
                                cc_la1[44] = cc_gen;
                                cc_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    default:
                        cc_la1[45] = cc_gen;
                        break;
                }
                break;
            default:
                cc_la1[46] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void CharacterList(Container c1)
    {
        RCharacterList chlist = new();
        Token t = GetToken(1);
        chlist.Line = t.beginLine;
        chlist.Column = t.beginColumn;
        Container c2 = new();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case TILDE:
                cc_consume_token(TILDE);
                chlist.negated_list = true;
                break;
            default:
                cc_la1[47] = cc_gen;
                break;
        }
        cc_consume_token(LBRACKET);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case STRING_LITERAL:
                CharacterDescriptor(c2);
                chlist.descriptors.Add(c2.Member);
            label_14:
                while (true)
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case COMMA:
                            ;
                            break;
                        default:
                            cc_la1[48] = cc_gen;
                            goto label_14_exit;
                    }
                    cc_consume_token(COMMA);
                    CharacterDescriptor(c2);
                    chlist.descriptors.Add(c2.Member);
                }
            label_14_exit:

                break;
            default:
                cc_la1[49] = cc_gen;
                break;
        }
        cc_consume_token(RBRACKET);
        c1.Member = chlist;
    }

    public void CharacterDescriptor(Container c)
    {
        char c1, c2 = ' '; // unnecessary initialization to make Java compiler happy!
        bool isrange = false;
        String imageL, imageR;
        Token t = GetToken(1);
        imageL = StringLiteral();
        c1 = CharacterDescriptorAssign(GetToken(0), imageL);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case MINUS:
                cc_consume_token(MINUS);
                imageR = StringLiteral();
                isrange = true;
                c2 = CharacterDescriptorAssign(GetToken(0), imageR, imageL);
                break;
            default:
                cc_la1[50] = cc_gen;
                break;
        }
        if (isrange)
        {
            var cr = new CharacterRange();
            cr.Line = t.beginLine;
            cr.Column = t.beginColumn;
            cr.Left = c1;
            cr.Right = c2;
            c.Member = cr;
        }
        else
        {
            var sc = new SingleCharacter();
            sc.Line = t.beginLine;
            sc.Column = t.beginColumn;
            sc.ch = c1;
            c.Member = sc;
        }
    }

    public String Identifier()
    {
        Token t;
        t = cc_consume_token(IDENTIFIER);
        { if (true) return t.image; }
        throw new Error("Missing return statement in function");
    }

    /**********************************************
     * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
     **********************************************/

    /*
     * The Java grammar is modified to use sequences of tokens
     * for the missing tokens - those that include "<<" and ">>".
     */

    /*
     * The following production defines Java identifiers - it
     * includes the reserved words of JavaCC also.
     */
    public Token JavaIdentifier()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case IDENTIFIER:
                cc_consume_token(IDENTIFIER);
                break;
            case _LOOKAHEAD:
                cc_consume_token(_LOOKAHEAD);
                break;
            case _IGNORE_CASE:
                cc_consume_token(_IGNORE_CASE);
                break;
            case _PARSER_BEGIN:
                cc_consume_token(_PARSER_BEGIN);
                break;
            case _PARSER_END:
                cc_consume_token(_PARSER_END);
                break;
            case _JAVACODE:
                cc_consume_token(_JAVACODE);
                break;
            case _TOKEN:
                cc_consume_token(_TOKEN);
                break;
            case _SPECIAL_TOKEN:
                cc_consume_token(_SPECIAL_TOKEN);
                break;
            case _MORE:
                cc_consume_token(_MORE);
                break;
            case _SKIP:
                cc_consume_token(_SKIP);
                break;
            case _TOKEN_MGR_DECLS:
                cc_consume_token(_TOKEN_MGR_DECLS);
                break;
            case _EOF:
                cc_consume_token(_EOF);
                break;
            case TEMPLATE:
                cc_consume_token(TEMPLATE);
                break;
            case 139:
                cc_consume_token(139);
                break;
            case 140:
                cc_consume_token(140);
                break;
            case 141:
                cc_consume_token(141);
                break;
            case 142:
                cc_consume_token(142);
                break;
            case 143:
                cc_consume_token(143);
                break;
            case 144:
                cc_consume_token(144);
                break;
            default:
                cc_la1[51] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
        Token retval = GetToken(0);
        retval.kind = IDENTIFIER;
        { if (true) return retval; }
        throw new Error("Missing return statement in function");
    }

    /*
     * Program structuring syntax follows.
     */
    public void CompilationUnit()
    {
        SetInitialCuToken(GetToken(1));
        if (jj_2_7(2147483647))
        {
            PackageDeclaration();
        }
        else
        {
            ;
        }
    label_15:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case IMPORT:
                    ;
                    break;
                default:
                    cc_la1[52] = cc_gen;
                    goto label_16;
            }
            ImportDeclaration();
        }
    label_16:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case ABSTRACT:
                case CLASS:
                case ENUM:
                case FINAL:
                case INTERFACE:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOLATILE:
                case SEMICOLON:
                case 150:
                    ;
                    break;
                default:
                    cc_la1[53] = cc_gen;
                    goto label_16_exit;
            }
            TypeDeclaration();
        }
    label_16_exit:
        if (Options.IsOutputLanguageJava())
        {
            InsertionPointErrors(GetToken(1));
        }
    }

    public void PackageDeclaration()
    {
        Modifiers();
        cc_consume_token(PACKAGE);
        Name(null);
        cc_consume_token(SEMICOLON);
    }

    public void ImportDeclaration()
    {
        cc_consume_token(IMPORT);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case STATIC:
                cc_consume_token(STATIC);
                break;
            default:
                cc_la1[54] = cc_gen;
                break;
        }
        Name(null);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case DOT:
                cc_consume_token(DOT);
                cc_consume_token(STAR);
                break;
            default:
                cc_la1[55] = cc_gen;
                break;
        }
        cc_consume_token(SEMICOLON);
    }

    /*
     * Modifiers. We match all modifiers in a single rule to reduce the chances of
     * syntax errors for simple modifier mistakes. It will also enable us to give
     * better error messages.
     */
    public int Modifiers()
    {
        int modifiers = 0;
    label_17:
        while (true)
        {
            if (jj_2_8(2))
            {
                ;
            }
            else
            {
                goto label_17_exit;
            }
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case PUBLIC:
                    cc_consume_token(PUBLIC);
                    modifiers |= ModifierSet.PUBLIC;
                    break;
                case STATIC:
                    cc_consume_token(STATIC);
                    modifiers |= ModifierSet.STATIC;
                    break;
                case PROTECTED:
                    cc_consume_token(PROTECTED);
                    modifiers |= ModifierSet.PROTECTED;
                    break;
                case PRIVATE:
                    cc_consume_token(PRIVATE);
                    modifiers |= ModifierSet.PRIVATE;
                    break;
                case FINAL:
                    cc_consume_token(FINAL);
                    modifiers |= ModifierSet.FINAL;
                    break;
                case ABSTRACT:
                    cc_consume_token(ABSTRACT);
                    modifiers |= ModifierSet.ABSTRACT;
                    break;
                case SYNCHRONIZED:
                    cc_consume_token(SYNCHRONIZED);
                    modifiers |= ModifierSet.SYNCHRONIZED;
                    break;
                case NATIVE:
                    cc_consume_token(NATIVE);
                    modifiers |= ModifierSet.NATIVE;
                    break;
                case TRANSIENT:
                    cc_consume_token(TRANSIENT);
                    modifiers |= ModifierSet.TRANSIENT;
                    break;
                case VOLATILE:
                    cc_consume_token(VOLATILE);
                    modifiers |= ModifierSet.VOLATILE;
                    break;
                case STRICTFP:
                    cc_consume_token(STRICTFP);
                    modifiers |= ModifierSet.STRICTFP;
                    break;
                case 150:
                    Annotation();
                    break;
                default:
                    cc_la1[56] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    label_17_exit:
        { if (true) return modifiers; }
        throw new Error("Missing return statement in function");
    }

    /*
     * Declaration syntax follows.
     */
    public void TypeDeclaration()
    {
        int modifiers;
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case SEMICOLON:
                cc_consume_token(SEMICOLON);
                break;
            case ABSTRACT:
            case CLASS:
            case ENUM:
            case FINAL:
            case INTERFACE:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case STRICTFP:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case 150:
                modifiers = Modifiers();
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case CLASS:
                    case INTERFACE:
                        ClassOrInterfaceDeclaration(modifiers, null);
                        break;
                    case ENUM:
                        EnumDeclaration(modifiers);
                        break;
                    case 150:
                        AnnotationTypeDeclaration(modifiers);
                        break;
                    default:
                        cc_la1[57] = cc_gen;
                        cc_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                cc_la1[58] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ClassOrInterfaceDeclaration(int modifiers, List<Token> tokens)
    {
        bool isInterface = false;
        class_nesting++;
        Token t;
        bool is_parser_class = false;
        tokens ??= new();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case CLASS:
                cc_consume_token(CLASS);
                break;
            case INTERFACE:
                cc_consume_token(INTERFACE);
                isInterface = true;
                break;
            default:
                cc_la1[59] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
        t = JavaIdentifier();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LANGLE:
                TypeParameters();
                break;
            default:
                cc_la1[60] = cc_gen;
                break;
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case EXTENDS:
                ExtendsList(isInterface);
                break;
            default:
                cc_la1[61] = cc_gen;
                break;
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case IMPLEMENTS:
                ImplementsList(isInterface);
                break;
            default:
                cc_la1[62] = cc_gen;
                break;
        }
        if (t.image.Equals(parser_class_name) && class_nesting == 1 && processing_cu)
        {
            is_parser_class = true;
            SetInsertionPoint(GetToken(1), 1);
        }
        ClassOrInterfaceBody(isInterface, null);
        if (is_parser_class)
        {
            SetInsertionPoint(GetToken(0), 2);
        }
        class_nesting--;
    }

    public void ExtendsList(bool isInterface)
    {
        bool extendsMoreThanOne = false;
        cc_consume_token(EXTENDS);
        ClassOrInterfaceType();
    label_18:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[63] = cc_gen;
                    goto label_18_exit;
            }
            cc_consume_token(COMMA);
            ClassOrInterfaceType();
            extendsMoreThanOne = true;
        }
    label_18_exit:
        if (extendsMoreThanOne && !isInterface)
        { if (true) throw new ParseException("A class cannot extend more than one other class"); }
    }

    public void ImplementsList(bool isInterface)
    {
        cc_consume_token(IMPLEMENTS);
        ClassOrInterfaceType();
    label_19:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[64] = cc_gen;
                    goto label_19_exit;
            }
            cc_consume_token(COMMA);
            ClassOrInterfaceType();
        }
    label_19_exit:
        if (isInterface)
        { if (true) throw new ParseException("An interface cannot implement other interfaces"); }
    }

    public void EnumDeclaration(int modifiers)
    {
        cc_consume_token(ENUM);
        JavaIdentifier();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case IMPLEMENTS:
                ImplementsList(false);
                break;
            default:
                cc_la1[65] = cc_gen;
                break;
        }
        EnumBody();
    }

    public void EnumBody()
    {
        cc_consume_token(LBRACE);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case ABSTRACT:
            case FINAL:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case STRICTFP:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case TEMPLATE:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 150:
            case IDENTIFIER:
                EnumConstant();
            label_20:
                while (true)
                {
                    if (jj_2_9(2))
                    {
                        ;
                    }
                    else
                    {
                        goto label_20_exit;
                    }
                    cc_consume_token(COMMA);
                    EnumConstant();
                }
            label_20_exit:
                break;
            default:
                cc_la1[66] = cc_gen;
                break;

        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case COMMA:
                cc_consume_token(COMMA);
                break;
            default:
                cc_la1[67] = cc_gen;
                break;
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case SEMICOLON:
                cc_consume_token(SEMICOLON);
            label_21:
                while (true)
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case ABSTRACT:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CLASS:
                        case CONST:
                        case DOUBLE:
                        case ENUM:
                        case FINAL:
                        case FLOAT:
                        case INT:
                        case INTERFACE:
                        case LONG:
                        case NATIVE:
                        case PRIVATE:
                        case PROTECTED:
                        case PUBLIC:
                        case SHORT:
                        case STATIC:
                        case STRICTFP:
                        case SYNCHRONIZED:
                        case TRANSIENT:
                        case VOID:
                        case VOLATILE:
                        case TEMPLATE:
                        case LBRACE:
                        case SEMICOLON:
                        case LANGLE:
                        case DOUBLECOLON:
                        case 139:
                        case 140:
                        case 141:
                        case 142:
                        case 143:
                        case 144:
                        case 150:
                        case IDENTIFIER:
                            ;
                            break;
                        default:
                            cc_la1[68] = cc_gen;
                            goto label_21_exit;
                    }
                    ClassOrInterfaceBodyDeclaration(false);
                }
            label_21_exit:
                break;
            default:
                cc_la1[69] = cc_gen;
                break;
        }
        cc_consume_token(RBRACE);
    }

    public void EnumConstant()
    {
        Modifiers();
        JavaIdentifier();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LPAREN:
                Arguments(null);
                break;
            default:
                cc_la1[70] = cc_gen;
                break;
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LBRACE:
                ClassOrInterfaceBody(false, null);
                break;
            default:
                cc_la1[71] = cc_gen;
                break;
        }
    }

    public void TypeParameters()
    {
        cc_consume_token(LANGLE);
        TypeParameter();
    label_22:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[72] = cc_gen;
                    goto label_22_exit;
            }
            cc_consume_token(COMMA);
            TypeParameter();
        }
    label_22_exit:
        cc_consume_token(RANGLE);
    }

    public void TypeParameter()
    {
        JavaIdentifier();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case EXTENDS:
                TypeBound();
                break;
            default:
                cc_la1[73] = cc_gen;
                break;
        }
    }

    public void TypeBound()
    {
        cc_consume_token(EXTENDS);
        ClassOrInterfaceType();
    label_23:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case BIT_AND:
                    ;
                    break;
                default:
                    cc_la1[74] = cc_gen;
                    goto label_23_exit;
            }
            cc_consume_token(BIT_AND);
            ClassOrInterfaceType();
        }
    label_23_exit:
        ;
    }

    public void ClassOrInterfaceBody(bool isInterface, List<Token> tokens)
    {
        Token first, last;
        tokens ??= new();
        cc_consume_token(LBRACE);
        first = GetToken(1);
    label_24:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONST:
                case DOUBLE:
                case ENUM:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case TEMPLATE:
                case LBRACE:
                case SEMICOLON:
                case LANGLE:
                case DOUBLECOLON:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 150:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    cc_la1[75] = cc_gen;
                    goto label_24_exit;
            }
            ClassOrInterfaceBodyDeclaration(isInterface);
        }
    label_24_exit:
        last = GetToken(0);
        cc_consume_token(RBRACE);
        if (last.next != first)
        { // i.e., this is not an empty sequence
            Token t = first;
            while (true)
            {
                tokens.Add(t);
                if (t == last) break;
                t = t.next;
            }
        }
    }

    public void ClassOrInterfaceBodyDeclaration(bool isInterface)
    {
        int modifiers;
        if (jj_2_12(2))
        {
            Initializer();
            if (isInterface)
            { if (true) throw new ParseException("An interface cannot have initializers"); }
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONST:
                case DOUBLE:
                case ENUM:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case TEMPLATE:
                case LANGLE:
                case DOUBLECOLON:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 150:
                case IDENTIFIER:
                    modifiers = Modifiers();
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case CLASS:
                        case INTERFACE:
                            ClassOrInterfaceDeclaration(modifiers, null);
                            break;
                        case ENUM:
                            EnumDeclaration(modifiers);
                            break;
                        default:
                            cc_la1[76] = cc_gen;
                            if (jj_2_10(2147483647))
                            {
                                ConstructorDeclaration();
                            }
                            else if (jj_2_11(2147483647))
                            {
                                FieldDeclaration(modifiers);
                            }
                            else
                            {
                                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                                {
                                    case BOOLEAN:
                                    case BYTE:
                                    case CHAR:
                                    case CONST:
                                    case DOUBLE:
                                    case FLOAT:
                                    case INT:
                                    case LONG:
                                    case SHORT:
                                    case VOID:
                                    case TEMPLATE:
                                    case LANGLE:
                                    case DOUBLECOLON:
                                    case IDENTIFIER:
                                        MethodDeclaration(modifiers);
                                        break;
                                    default:
                                        cc_la1[77] = cc_gen;
                                        cc_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                    }
                    break;
                case SEMICOLON:
                    cc_consume_token(SEMICOLON);
                    break;
                default:
                    cc_la1[78] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void FieldDeclaration(int modifiers)
    {
        Type();
        VariableDeclarator();
    label_25:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[79] = cc_gen;
                    goto label_25_exit;
            }
            cc_consume_token(COMMA);
            VariableDeclarator();
        }
    label_25_exit:
        cc_consume_token(SEMICOLON);
    }

    public void VariableDeclarator()
    {
        VariableDeclaratorId();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case ASSIGN:
                cc_consume_token(ASSIGN);
                VariableInitializer();
                break;
            default:
                cc_la1[80] = cc_gen;
                break;
        }
    }

    public void VariableDeclaratorId()
    {
        JavaIdentifier();
    label_26:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case LBRACKET:
                    ;
                    break;
                default:
                    cc_la1[81] = cc_gen;
                    goto label_26_exit;
            }
            cc_consume_token(LBRACKET);
            cc_consume_token(RBRACKET);
        }
    label_26_exit:
        ;
    }

    public void VariableInitializer()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LBRACE:
                ArrayInitializer();
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case TEMPLATE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case DOUBLECOLON:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                Expression(null);
                break;
            default:
                cc_la1[82] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ArrayInitializer()
    {
        cc_consume_token(LBRACE);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case TEMPLATE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case LBRACE:
            case BANG:
            case TILDE:
            case DOUBLECOLON:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                VariableInitializer();
            label_27:
                while (true)
                {
                    if (jj_2_13(2))
                    {
                        ;
                    }
                    else
                    {
                        goto label_27_exit;
                    }
                    cc_consume_token(COMMA);
                    VariableInitializer();
                }
            label_27_exit:
                break;
            default:
                cc_la1[83] = cc_gen;
                break;
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case COMMA:
                cc_consume_token(COMMA);
                break;
            default:
                cc_la1[84] = cc_gen;
                break;
        }
        cc_consume_token(RBRACE);
    }

    public void MethodDeclaration(int modifiers)
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LANGLE:
                TypeParameters();
                break;
            default:
                cc_la1[85] = cc_gen;
                break;
        }
        ResultType(null);
        MethodDeclarator();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case THROWS:
                cc_consume_token(THROWS);
                NameList();
                break;
            default:
                cc_la1[86] = cc_gen;
                break;
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LBRACE:
                Block(null);
                break;
            case SEMICOLON:
                cc_consume_token(SEMICOLON);
                break;
            default:
                cc_la1[87] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void MethodDeclarator()
    {
        JavaIdentifier();
        FormalParameters(null);
    label_28:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case LBRACKET:
                    ;
                    break;
                default:
                    cc_la1[88] = cc_gen;
                    goto label_28_exit;
            }
            cc_consume_token(LBRACKET);
            cc_consume_token(RBRACKET);
        }
    label_28_exit:
        ;
    }

    public void FormalParameters(List<Token> tokens)
    {
        Token first, last;
        tokens ??= new();
        cc_consume_token(LPAREN);
        first = GetToken(1);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case STRICTFP:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case TEMPLATE:
            case DOUBLECOLON:
            case 150:
            case IDENTIFIER:
                FormalParameter();
            label_29:
                while (true)
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case COMMA:
                            ;
                            break;
                        default:
                            cc_la1[89] = cc_gen;
                            goto label_29_exit;
                    }
                    cc_consume_token(COMMA);
                    FormalParameter();
                }
            label_29_exit:
                break;
            default:
                cc_la1[90] = cc_gen;
                break;
        }
        last = GetToken(0);
        cc_consume_token(RPAREN);
        if (last.next != first)
        { // i.e., this is not an empty sequence
            Token t = first;
            while (true)
            {
                tokens.Add(t);
                if (t == last) break;
                t = t.next;
            }
        }
    }

    public void FormalParameter()
    {
        Token t;
        Modifiers();
        Type();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case STAR:
            case BIT_AND:
            case 145:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case STAR:
                    case BIT_AND:
                        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                        {
                            case BIT_AND:
                                t = cc_consume_token(BIT_AND);
                                break;
                            case STAR:
                                t = cc_consume_token(STAR);
                                break;
                            default:
                                cc_la1[91] = cc_gen;
                                cc_consume_token(-1);
                                throw new ParseException();
                        }
                        if (!IsAllowed(t)) { if (true) throw new ParseException(t.image + " is invalid in this context"); }
                        break;
                    case 145:
                        cc_consume_token(145);
                        break;
                    default:
                        cc_la1[92] = cc_gen;
                        cc_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                cc_la1[93] = cc_gen;
                break;
        }
        VariableDeclaratorId();
    }

    public void ConstructorDeclaration()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LANGLE:
                TypeParameters();
                break;
            default:
                cc_la1[94] = cc_gen;
                break;
        }
        JavaIdentifier();
        FormalParameters(null);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case THROWS:
                cc_consume_token(THROWS);
                NameList();
                break;
            default:
                cc_la1[95] = cc_gen;
                break;
        }
        cc_consume_token(LBRACE);
        if (jj_2_14(2147483647))
        {
            ExplicitConstructorInvocation();
        }
        else
        {
            ;
        }
    label_30:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case ASSERT:
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONST:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case NEW:
                case NULL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case RETURN:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRANSIENT:
                case TRUE:
                case TRY:
                case VOID:
                case VOLATILE:
                case WHILE:
                case TEMPLATE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case DOUBLECOLON:
                case INCR:
                case DECR:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 150:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    cc_la1[96] = cc_gen;
                    goto label_30_exit;
            }
            BlockStatement();
        }
    label_30_exit:
        cc_consume_token(RBRACE);
    }

    public void ExplicitConstructorInvocation()
    {
        if (jj_2_16(2147483647))
        {
            cc_consume_token(THIS);
            Arguments(null);
            cc_consume_token(SEMICOLON);
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case TEMPLATE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case DOUBLECOLON:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case IDENTIFIER:
                    if (jj_2_15(2))
                    {
                        PrimaryExpression();
                        cc_consume_token(DOT);
                    }
                    else
                    {
                        ;
                    }
                    cc_consume_token(SUPER);
                    Arguments(null);
                    cc_consume_token(SEMICOLON);
                    break;
                default:
                    cc_la1[97] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void Initializer()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case STATIC:
                cc_consume_token(STATIC);
                break;
            default:
                cc_la1[98] = cc_gen;
                break;
        }
        Block(null);
    }

    /*
     * Type, name and expression syntax follows.
     */
    public void Type()
    {
        if (jj_2_17(2))
        {
            ReferenceType();
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    PrimitiveType();
                    break;
                default:
                    cc_la1[99] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void ReferenceType()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                PrimitiveType();
            label_31:
                while (true)
                {
                    cc_consume_token(LBRACKET);
                    cc_consume_token(RBRACKET);
                    if (jj_2_18(2))
                    {
                        ;
                    }
                    else
                    {
                        goto label_31_exit;
                    }
                }
            label_31_exit:
                break;
            case TEMPLATE:
            case DOUBLECOLON:
            case IDENTIFIER:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case TEMPLATE:
                        Template();
                        break;
                    default:
                        cc_la1[100] = cc_gen;
                        break;
                }
                ClassOrInterfaceType();
            label_32:
                while (true)
                {
                    if (jj_2_19(2))
                    {
                        ;
                    }
                    else
                    {
                        goto label_32_exit;
                    }
                    cc_consume_token(LBRACKET);
                    cc_consume_token(RBRACKET);
                }
            label_32_exit:
                break;
            default:
                cc_la1[101] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void Template()
    {
        cc_consume_token(TEMPLATE);
        cc_consume_token(LANGLE);
        TemplateBase();
    label_33:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[102] = cc_gen;
                    goto label_33_exit;
            }
            cc_consume_token(COMMA);
            TemplateBase();
        }
    label_33_exit:
        cc_consume_token(RANGLE);
    }

    public void TemplateBase()
    {
        TemplatePack();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case 145:
                cc_consume_token(145);
                break;
            default:
                cc_la1[103] = cc_gen;
                break;
        }
        cc_consume_token(IDENTIFIER);
    }

    public void TemplatePack()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case CLASS:
                cc_consume_token(CLASS);
                break;
            case TYPENAME:
                cc_consume_token(TYPENAME);
                break;
            default:
                cc_la1[104] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ClassOrInterfaceType()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case DOUBLECOLON:
                cc_consume_token(DOUBLECOLON);
                break;
            default:
                cc_la1[105] = cc_gen;
                break;
        }
        cc_consume_token(IDENTIFIER);
        if (jj_2_20(2))
        {
            TypeArguments(null);
        }
        else
        {
            ;
        }
    label_34:
        while (true)
        {
            if (jj_2_21(2))
            {
                ;
            }
            else
            {
                goto label_34_exit;
            }
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case DOT:
                    cc_consume_token(DOT);
                    break;
                case DOUBLECOLON:
                    cc_consume_token(DOUBLECOLON);
                    break;
                default:
                    cc_la1[106] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
            cc_consume_token(IDENTIFIER);
            if (jj_2_22(2))
            {
                TypeArguments(null);
            }
            else
            {
                ;
            }
        }
    label_34_exit:
        ;
    }

    public void TypeArguments(List<Token> tokens)
    {
        Token first, last;
        tokens ??= new();
        cc_consume_token(LANGLE);
        first = GetToken(0);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case TEMPLATE:
            case HOOK:
            case DOUBLECOLON:
            case IDENTIFIER:
                TypeArgument();
            label_35:
                while (true)
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case COMMA:
                            ;
                            break;
                        default:
                            cc_la1[107] = cc_gen;
                            goto label_35_exit;
                    }
                    cc_consume_token(COMMA);
                    TypeArgument();
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case 145:
                            cc_consume_token(145);
                            break;
                        default:
                            cc_la1[108] = cc_gen;
                            break;
                    }
                }
            label_35_exit:
                break;
            default:
                cc_la1[109] = cc_gen;
                break;
        }
        cc_consume_token(RANGLE);
        last = GetToken(0);
        if (last.next != first)
        { // i.e., this is not an empty sequence
            Token t = first;
            while (true)
            {
                tokens.Add(t);
                if (t == last) break;
                t = t.next;
            }
        }
    }

    public void TypeArgument()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case TEMPLATE:
            case DOUBLECOLON:
            case IDENTIFIER:
                ReferenceType();
                break;
            case HOOK:
                cc_consume_token(HOOK);
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case EXTENDS:
                    case SUPER:
                        WildcardBounds();
                        break;
                    default:
                        cc_la1[110] = cc_gen;
                        break;
                }
                break;
            default:
                cc_la1[111] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void WildcardBounds()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case EXTENDS:
                cc_consume_token(EXTENDS);
                ReferenceType();
                break;
            case SUPER:
                cc_consume_token(SUPER);
                ReferenceType();
                break;
            default:
                cc_la1[112] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void PrimitiveType()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case BOOLEAN:
                cc_consume_token(BOOLEAN);
                break;
            case CHAR:
                cc_consume_token(CHAR);
                break;
            case BYTE:
                cc_consume_token(BYTE);
                break;
            case SHORT:
                cc_consume_token(SHORT);
                break;
            case INT:
                cc_consume_token(INT);
                break;
            case LONG:
                cc_consume_token(LONG);
                break;
            case FLOAT:
                cc_consume_token(FLOAT);
                break;
            case DOUBLE:
                cc_consume_token(DOUBLE);
                break;
            default:
                cc_la1[113] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ResultType(List<Token> tokens)
    {
        Token first = GetToken(1);
        tokens ??= new();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case VOID:
                cc_consume_token(VOID);
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case STAR:
                        cc_consume_token(STAR);
                        break;
                    default:
                        cc_la1[114] = cc_gen;
                        break;
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case TEMPLATE:
            case DOUBLECOLON:
            case IDENTIFIER:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case CONST:
                        cc_consume_token(CONST);
                        break;
                    default:
                        cc_la1[115] = cc_gen;
                        break;
                }
                Type();
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case STAR:
                    case BIT_AND:
                        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                        {
                            case STAR:
                                cc_consume_token(STAR);
                                break;
                            case BIT_AND:
                                cc_consume_token(BIT_AND);
                                break;
                            default:
                                cc_la1[116] = cc_gen;
                                cc_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    default:
                        cc_la1[117] = cc_gen;
                        break;
                }
                break;
            default:
                cc_la1[118] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
        Token last = GetToken(0);
        Token t = first;
        while (true)
        {
            var i = t.image;
            if (IsAllowed(t))
            {
                tokens.Add(t);
                if (t == last) break;
                t = t.next;
            }
            else
            {
                { if (true) throw new ParseException(t.image + " is invalid in this context"); }
            }
        }
    }

    public void Name(List<Token> tokens)
    {
        tokens ??= new();
        Token first = GetToken(1);
        JavaIdentifier();
    label_36:
        while (true)
        {
            if (jj_2_23(2))
            {
                ;
            }
            else
            {
                goto label_36_exit;
            }
            cc_consume_token(DOT);
            JavaIdentifier();
        }
    label_36_exit:
        Token last = GetToken(0);
        Token t = first;
        while (true)
        {
            tokens.Add(t);
            if (t == last) break;
            t = t.next;
        }
    }

    public void NameList()
    {
        Name(null);
    label_37:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[119] = cc_gen;
                    goto label_37_exit;
            }
            cc_consume_token(COMMA);
            Name(null);
        }
    label_37_exit:
        ;
    }

    /*
     * Expression syntax follows.
     */
    public void Expression(List<Token> tokens)
    {
        Token first = GetToken(1);
        tokens ??= new();
        ConditionalExpression();
        if (jj_2_24(2))
        {
            AssignmentOperator();
            Expression(null);
        }
        else
        {
            ;
        }
        Token last = GetToken(0);
        Token t = first;
        while (true)
        {
            tokens.Add(t);
            if (t == last) break;
            t = t.next;
        }
    }

    public void AssignmentOperator()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case ASSIGN:
                cc_consume_token(ASSIGN);
                break;
            case STARASSIGN:
                cc_consume_token(STARASSIGN);
                break;
            case SLASHASSIGN:
                cc_consume_token(SLASHASSIGN);
                break;
            case REMASSIGN:
                cc_consume_token(REMASSIGN);
                break;
            case PLUSASSIGN:
                cc_consume_token(PLUSASSIGN);
                break;
            case MINUSASSIGN:
                cc_consume_token(MINUSASSIGN);
                break;
            case 146:
                cc_consume_token(146);
                break;
            case 147:
                cc_consume_token(147);
                break;
            case 148:
                cc_consume_token(148);
                break;
            case ANDASSIGN:
                cc_consume_token(ANDASSIGN);
                break;
            case XORASSIGN:
                cc_consume_token(XORASSIGN);
                break;
            case ORASSIGN:
                cc_consume_token(ORASSIGN);
                break;
            default:
                cc_la1[120] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ConditionalExpression()
    {
        ConditionalOrExpression();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case HOOK:
                cc_consume_token(HOOK);
                Expression(null);
                cc_consume_token(COLON);
                Expression(null);
                break;
            default:
                cc_la1[121] = cc_gen;
                break;
        }
    }

    public void ConditionalOrExpression()
    {
        ConditionalAndExpression();
    label_38:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case SC_OR:
                    ;
                    break;
                default:
                    cc_la1[122] = cc_gen;
                    goto label_38_exit;
            }
            cc_consume_token(SC_OR);
            ConditionalAndExpression();
        }
    label_38_exit:
        ;
    }

    public void ConditionalAndExpression()
    {
        InclusiveOrExpression();
    label_39:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case SC_AND:
                    ;
                    break;
                default:
                    cc_la1[123] = cc_gen;
                    goto label_39_exit;
            }
            cc_consume_token(SC_AND);
            InclusiveOrExpression();
        }
    label_39_exit:
        ;
    }

    public void InclusiveOrExpression()
    {
        ExclusiveOrExpression();
    label_40:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case BIT_OR:
                    ;
                    break;
                default:
                    cc_la1[124] = cc_gen;
                    goto label_40_exit;
            }
            cc_consume_token(BIT_OR);
            ExclusiveOrExpression();
        }
    label_40_exit:
        ;
    }

    public void ExclusiveOrExpression()
    {
        AndExpression();
    label_41:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case XOR:
                    ;
                    break;
                default:
                    cc_la1[125] = cc_gen;
                    goto label_41_exit;
            }
            cc_consume_token(XOR);
            AndExpression();
        }
    label_41_exit:
        ;
    }

    public void AndExpression()
    {
        EqualityExpression();
    label_42:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case BIT_AND:
                    ;
                    break;
                default:
                    cc_la1[126] = cc_gen;
                    goto label_42_exit;
            }
            cc_consume_token(BIT_AND);
            EqualityExpression();
        }
    label_42_exit:
        ;
    }

    public void EqualityExpression()
    {
        InstanceOfExpression();
    label_43:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case EQ:
                case NE:
                    ;
                    break;
                default:
                    cc_la1[127] = cc_gen;
                    goto label_43_exit;
            }
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case EQ:
                    cc_consume_token(EQ);
                    break;
                case NE:
                    cc_consume_token(NE);
                    break;
                default:
                    cc_la1[128] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
            InstanceOfExpression();
        }
    label_43_exit:
        ;
    }

    public void InstanceOfExpression()
    {
        RelationalExpression();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case INSTANCEOF:
                cc_consume_token(INSTANCEOF);
                Type();
                break;
            default:
                cc_la1[129] = cc_gen;
                break;
        }
    }

    public void RelationalExpression()
    {
        ShiftExpression();
    label_44:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case LANGLE:
                case LE:
                case GE:
                case RANGLE:
                    ;
                    break;
                default:
                    cc_la1[130] = cc_gen;
                    goto label_44_exit;
            }
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case LANGLE:
                    cc_consume_token(LANGLE);
                    break;
                case RANGLE:
                    cc_consume_token(RANGLE);
                    break;
                case LE:
                    cc_consume_token(LE);
                    break;
                case GE:
                    cc_consume_token(GE);
                    break;
                default:
                    cc_la1[131] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
            ShiftExpression();
        }
    label_44_exit:
        ;
    }

    public void ShiftExpression()
    {
        AdditiveExpression();
    label_45:
        while (true)
        {
            if (jj_2_25(1))
            {
                ;
            }
            else
            {
                goto label_45_exit;
            }
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case 149:
                    cc_consume_token(149);
                    break;
                default:
                    cc_la1[132] = cc_gen;
                    if (jj_2_26(1))
                    {
                        RSIGNEDSHIFT();
                    }
                    else if (jj_2_27(1))
                    {
                        RUNSIGNEDSHIFT();
                    }
                    else
                    {
                        cc_consume_token(-1);
                        throw new ParseException();
                    }
                    break;
            }
            AdditiveExpression();
        }
    label_45_exit:
        ;
    }

    public void AdditiveExpression()
    {
        MultiplicativeExpression();
    label_46:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case PLUS:
                case MINUS:
                    ;
                    break;
                default:
                    cc_la1[133] = cc_gen;
                    goto label_46_exit;
            }
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case PLUS:
                    cc_consume_token(PLUS);
                    break;
                case MINUS:
                    cc_consume_token(MINUS);
                    break;
                default:
                    cc_la1[134] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
            MultiplicativeExpression();
        }
    label_46_exit:
        ;
    }

    public void MultiplicativeExpression()
    {
        UnaryExpression();
    label_47:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case STAR:
                case SLASH:
                case REM:
                    ;
                    break;
                default:
                    cc_la1[135] = cc_gen;
                    goto label_47_exit;
            }
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case STAR:
                    cc_consume_token(STAR);
                    break;
                case SLASH:
                    cc_consume_token(SLASH);
                    break;
                case REM:
                    cc_consume_token(REM);
                    break;
                default:
                    cc_la1[136] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
            UnaryExpression();
        }
    label_47_exit:
        ;
    }

    public void UnaryExpression()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case PLUS:
            case MINUS:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case PLUS:
                        cc_consume_token(PLUS);
                        break;
                    case MINUS:
                        cc_consume_token(MINUS);
                        break;
                    default:
                        cc_la1[137] = cc_gen;
                        cc_consume_token(-1);
                        throw new ParseException();
                }
                UnaryExpression();
                break;
            case INCR:
                PreIncrementExpression();
                break;
            case DECR:
                PreDecrementExpression();
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case TEMPLATE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case DOUBLECOLON:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                UnaryExpressionNotPlusMinus();
                break;
            default:
                cc_la1[138] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void PreIncrementExpression()
    {
        cc_consume_token(INCR);
        PrimaryExpression();
    }

    public void PreDecrementExpression()
    {
        cc_consume_token(DECR);
        PrimaryExpression();
    }

    public void UnaryExpressionNotPlusMinus()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case BANG:
            case TILDE:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case TILDE:
                        cc_consume_token(TILDE);
                        break;
                    case BANG:
                        cc_consume_token(BANG);
                        break;
                    default:
                        cc_la1[139] = cc_gen;
                        cc_consume_token(-1);
                        throw new ParseException();
                }
                UnaryExpression();
                break;
            default:
                cc_la1[140] = cc_gen;
                if (jj_2_28(2147483647))
                {
                    CastExpression();
                }
                else
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CONST:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case VOID:
                        case TEMPLATE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case DOUBLECOLON:
                        case 139:
                        case 140:
                        case 141:
                        case 142:
                        case 143:
                        case 144:
                        case IDENTIFIER:
                            PostfixExpression();
                            break;
                        default:
                            cc_la1[141] = cc_gen;
                            cc_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
        }
    }

    // This production is to determine lookahead only.  The LOOKAHEAD specifications
    // below are not used, but they are there just to indicate that we know about
    // this.
    public void CastLookahead()
    {
        if (jj_2_29(2))
        {
            cc_consume_token(LPAREN);
            PrimitiveType();
        }
        else if (jj_2_30(2147483647))
        {
            cc_consume_token(LPAREN);
            Type();
            cc_consume_token(LBRACKET);
            cc_consume_token(RBRACKET);
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case LPAREN:
                    cc_consume_token(LPAREN);
                    Type();
                    cc_consume_token(RPAREN);
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case TILDE:
                            cc_consume_token(TILDE);
                            break;
                        case BANG:
                            cc_consume_token(BANG);
                            break;
                        case LPAREN:
                            cc_consume_token(LPAREN);
                            break;
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case TEMPLATE:
                        case 139:
                        case 140:
                        case 141:
                        case 142:
                        case 143:
                        case 144:
                        case IDENTIFIER:
                            JavaIdentifier();
                            break;
                        case THIS:
                            cc_consume_token(THIS);
                            break;
                        case SUPER:
                            cc_consume_token(SUPER);
                            break;
                        case NEW:
                            cc_consume_token(NEW);
                            break;
                        case FALSE:
                        case NULL:
                        case TRUE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                            Literal();
                            break;
                        default:
                            cc_la1[142] = cc_gen;
                            cc_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    cc_la1[143] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void PostfixExpression()
    {
        PrimaryExpression();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case INCR:
            case DECR:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case INCR:
                        cc_consume_token(INCR);
                        break;
                    case DECR:
                        cc_consume_token(DECR);
                        break;
                    default:
                        cc_la1[144] = cc_gen;
                        cc_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                cc_la1[145] = cc_gen;
                break;
        }
    }

    public void CastExpression()
    {
        if (jj_2_31(2147483647))
        {
            cc_consume_token(LPAREN);
            Type();
            cc_consume_token(RPAREN);
            UnaryExpression();
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case LPAREN:
                    cc_consume_token(LPAREN);
                    Type();
                    cc_consume_token(RPAREN);
                    UnaryExpressionNotPlusMinus();
                    break;
                default:
                    cc_la1[146] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void PrimaryExpression()
    {
        PrimaryPrefix();
    label_48:
        while (true)
        {
            if (jj_2_32(2))
            {
                ;
            }
            else
            {
                goto label_48_exit;
            }
            PrimarySuffix();
        }
    label_48_exit:
        ;
    }

    public void MemberSelector()
    {
        cc_consume_token(DOT);
        TypeArguments(null);
        JavaIdentifier();
    }

    public void PrimaryPrefix()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case FALSE:
            case NULL:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                Literal();
                break;
            case THIS:
                cc_consume_token(THIS);
                break;
            case SUPER:
                cc_consume_token(SUPER);
                cc_consume_token(DOT);
                JavaIdentifier();
                break;
            case LPAREN:
                cc_consume_token(LPAREN);
                Expression(null);
                cc_consume_token(RPAREN);
                break;
            case NEW:
                AllocationExpression();
                break;
            default:
                cc_la1[147] = cc_gen;
                if (jj_2_33(2147483647))
                {
                    ResultType(null);
                    cc_consume_token(DOT);
                    cc_consume_token(CLASS);
                }
                else
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case TEMPLATE:
                        case 139:
                        case 140:
                        case 141:
                        case 142:
                        case 143:
                        case 144:
                        case IDENTIFIER:
                            Name(null);
                            break;
                        default:
                            cc_la1[148] = cc_gen;
                            cc_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
        }
    }

    public void PrimarySuffix()
    {
        if (jj_2_34(2))
        {
            cc_consume_token(DOT);
            cc_consume_token(THIS);
        }
        else if (jj_2_35(2))
        {
            cc_consume_token(DOT);
            AllocationExpression();
        }
        else if (jj_2_36(3))
        {
            MemberSelector();
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case LBRACKET:
                    cc_consume_token(LBRACKET);
                    Expression(null);
                    cc_consume_token(RBRACKET);
                    break;
                case DOT:
                    cc_consume_token(DOT);
                    JavaIdentifier();
                    break;
                case LPAREN:
                    Arguments(null);
                    break;
                default:
                    cc_la1[149] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void Literal()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case INTEGER_LITERAL:
                cc_consume_token(INTEGER_LITERAL);
                break;
            case FLOATING_POINT_LITERAL:
                cc_consume_token(FLOATING_POINT_LITERAL);
                break;
            case CHARACTER_LITERAL:
                cc_consume_token(CHARACTER_LITERAL);
                break;
            case STRING_LITERAL:
                cc_consume_token(STRING_LITERAL);
                break;
            case FALSE:
            case TRUE:
                BooleanLiteral();
                break;
            case NULL:
                NullLiteral();
                break;
            default:
                cc_la1[150] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public int IntegerLiteral()
    {
        cc_consume_token(INTEGER_LITERAL);
        { if (true) return int.TryParse(token.image, out var i) ? i : throw new Error(); }
        //throw new Error("Missing return statement in function");
    }

    public bool BooleanLiteral()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case TRUE:
                cc_consume_token(TRUE);
                { if (true) return true; }
                break;
            case FALSE:
                cc_consume_token(FALSE);
                { if (true) return false; }
                break;
            default:
                cc_la1[151] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    public String StringLiteral()
    {
        Token t;
        t = cc_consume_token(STRING_LITERAL);
        { if (true) return RemoveEscapesAndQuotes(t, t.image); }
        throw new Error("Missing return statement in function");
    }

    public void NullLiteral()
    {
        cc_consume_token(NULL);
    }

    public void Arguments(List<Token> tokens)
    {
        Token first, last;
        tokens ??= new();
        cc_consume_token(LPAREN);
        first = GetToken(1);
        // Added by Sreenivas Viswanadha for 6.0
        // TODO :: 2013/07/16 -- cba : Think this condition should be if the language IS C++, not if the language ISN'T Java ...
        if (!IsJavaLanguage)
        {
            EatUptoRParen(null);
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case TEMPLATE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case DOUBLECOLON:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                ArgumentList();
                break;
            default:
                cc_la1[152] = cc_gen;
                break;
        }
        last = GetToken(0);
        cc_consume_token(RPAREN);
        if (last.next != first)
        { // i.e., this is not an empty sequence
            Token t = first;
            while (true)
            {
                tokens.Add(t);
                if (t == last) break;
                t = t.next;
            }
        }
    }

    public void ArgumentList()
    {
        Expression(null);
    label_49:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[153] = cc_gen;
                    goto label_49_exit;
            }
            cc_consume_token(COMMA);
            Expression(null);
        }
    label_49_exit:
        ;
    }

    public void AllocationExpression()
    {
        if (jj_2_37(2))
        {
            cc_consume_token(NEW);
            PrimitiveType();
            ArrayDimsAndInits();
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case NEW:
                    cc_consume_token(NEW);
                    ClassOrInterfaceType();
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case LANGLE:
                            TypeArguments(null);
                            break;
                        default:
                            cc_la1[154] = cc_gen;
                            break;
                            ;
                    }
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case LBRACKET:
                            ArrayDimsAndInits();
                            break;
                        case LPAREN:
                            Arguments(null);
                            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                            {
                                case LBRACE:
                                    ClassOrInterfaceBody(false, null);
                                    break;
                                default:
                                    cc_la1[155] = cc_gen;
                                    break;
                                    ;
                            }
                            break;
                        default:
                            cc_la1[156] = cc_gen;
                            cc_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    cc_la1[157] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    /*
     * The third LOOKAHEAD specification below is to parse to PrimarySuffix
     * if there is an expression between the "[...]".
     */
    public void ArrayDimsAndInits()
    {
        if (jj_2_40(2))
        {
        label_50:
            while (true)
            {
                cc_consume_token(LBRACKET);
                Expression(null);
                cc_consume_token(RBRACKET);
                if (jj_2_38(2))
                {
                    ;
                }
                else
                {
                    goto label_50;
                }
            }
        label_51:
            while (true)
            {
                if (jj_2_39(2))
                {
                    ;
                }
                else
                {
                    goto label_51_exit;
                }
                cc_consume_token(LBRACKET);
                cc_consume_token(RBRACKET);
            }
        label_51_exit:
            ;
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case LBRACKET:
                label_52:
                    while (true)
                    {
                        cc_consume_token(LBRACKET);
                        cc_consume_token(RBRACKET);
                        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                        {
                            case LBRACKET:
                                ;
                                break;
                            default:
                                cc_la1[158] = cc_gen;
                                goto label_52_exit;
                        }
                    }
                label_52_exit:
                    ArrayInitializer();
                    break;
                default:
                    cc_la1[159] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    /*
     * Statement syntax follows.
     */
    public void Statement()
    {
        if (jj_2_41(2))
        {
            LabeledStatement();
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case ASSERT:
                    AssertStatement();
                    break;
                case LBRACE:
                    Block(null);
                    break;
                case SEMICOLON:
                    EmptyStatement();
                    break;
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case TEMPLATE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case DOUBLECOLON:
                case INCR:
                case DECR:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case IDENTIFIER:
                    StatementExpression();
                    cc_consume_token(SEMICOLON);
                    break;
                case SWITCH:
                    SwitchStatement();
                    break;
                case IF:
                    IfStatement();
                    break;
                case WHILE:
                    WhileStatement();
                    break;
                case DO:
                    DoStatement();
                    break;
                case FOR:
                    ForStatement();
                    break;
                case BREAK:
                    BreakStatement();
                    break;
                case CONTINUE:
                    ContinueStatement();
                    break;
                case RETURN:
                    ReturnStatement();
                    break;
                case THROW:
                    ThrowStatement();
                    break;
                case SYNCHRONIZED:
                    SynchronizedStatement();
                    break;
                case TRY:
                    TryStatement();
                    break;
                default:
                    cc_la1[160] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void AssertStatement()
    {
        cc_consume_token(ASSERT);
        Expression(null);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case COLON:
                cc_consume_token(COLON);
                Expression(null);
                break;
            default:
                cc_la1[161] = cc_gen;
                break;
                ;
        }
        cc_consume_token(SEMICOLON);
    }

    public void LabeledStatement()
    {
        JavaIdentifier();
        cc_consume_token(COLON);
        Statement();
    }

    public void Block(List<Token> tokens)
    {
        Token first, last;
        tokens ??= new();
        cc_consume_token(LBRACE);
        first = GetToken(1);
        if (!IsJavaLanguage)
        {
            EatUptoCloseBrace(null);
        }
    label_53:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case ASSERT:
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONST:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case NEW:
                case NULL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case RETURN:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRANSIENT:
                case TRUE:
                case TRY:
                case VOID:
                case VOLATILE:
                case WHILE:
                case TEMPLATE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case DOUBLECOLON:
                case INCR:
                case DECR:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 150:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    cc_la1[162] = cc_gen;
                    goto label_53_exit;
            }
            BlockStatement();
        }
    label_53_exit:
        last = GetToken(0);
        cc_consume_token(RBRACE);
        if (last.next != first)
        { // i.e., this is not an empty sequence
            Token t = first;
            while (true)
            {
                tokens.Add(t);
                if (t == last) break;
                t = t.next;
            }
        }
    }

    public void BlockStatement()
    {
        if (jj_2_42(2147483647))
        {
            LocalVariableDeclaration();
            cc_consume_token(SEMICOLON);
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ASSERT:
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CONST:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case RETURN:
                case SHORT:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case VOID:
                case WHILE:
                case TEMPLATE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case DOUBLECOLON:
                case INCR:
                case DECR:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case IDENTIFIER:
                    Statement();
                    break;
                case CLASS:
                case INTERFACE:
                    ClassOrInterfaceDeclaration(0, null);
                    break;
                default:
                    cc_la1[163] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void LocalVariableDeclaration()
    {
        Modifiers();
        Type();
        VariableDeclarator();
    label_54:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[164] = cc_gen;
                    goto label_54_exit;
            }
            cc_consume_token(COMMA);
            VariableDeclarator();
        }
    label_54_exit:
        ;
    }

    public void EmptyStatement()
    {
        cc_consume_token(SEMICOLON);
    }

    public void StatementExpression()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case INCR:
                PreIncrementExpression();
                break;
            case DECR:
                PreDecrementExpression();
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case TEMPLATE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case DOUBLECOLON:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                PrimaryExpression();
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case ASSIGN:
                    case INCR:
                    case DECR:
                    case PLUSASSIGN:
                    case MINUSASSIGN:
                    case STARASSIGN:
                    case SLASHASSIGN:
                    case ANDASSIGN:
                    case ORASSIGN:
                    case XORASSIGN:
                    case REMASSIGN:
                    case 146:
                    case 147:
                    case 148:
                        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                        {
                            case INCR:
                                cc_consume_token(INCR);
                                break;
                            case DECR:
                                cc_consume_token(DECR);
                                break;
                            case ASSIGN:
                            case PLUSASSIGN:
                            case MINUSASSIGN:
                            case STARASSIGN:
                            case SLASHASSIGN:
                            case ANDASSIGN:
                            case ORASSIGN:
                            case XORASSIGN:
                            case REMASSIGN:
                            case 146:
                            case 147:
                            case 148:
                                AssignmentOperator();
                                Expression(null);
                                break;
                            default:
                                cc_la1[165] = cc_gen;
                                cc_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    default:
                        cc_la1[166] = cc_gen;
                        break;
                }
                break;
            default:
                cc_la1[167] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void SwitchStatement()
    {
        cc_consume_token(SWITCH);
        cc_consume_token(LPAREN);
        Expression(null);
        cc_consume_token(RPAREN);
        cc_consume_token(LBRACE);
    label_55:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case CASE:
                case _DEFAULT:
                    ;
                    break;
                default:
                    cc_la1[168] = cc_gen;
                    goto label_56;
            }
            SwitchLabel();
        label_56:
            while (true)
            {
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case _LOOKAHEAD:
                    case _IGNORE_CASE:
                    case _PARSER_BEGIN:
                    case _PARSER_END:
                    case _JAVACODE:
                    case _TOKEN:
                    case _SPECIAL_TOKEN:
                    case _MORE:
                    case _SKIP:
                    case _TOKEN_MGR_DECLS:
                    case _EOF:
                    case ABSTRACT:
                    case ASSERT:
                    case BOOLEAN:
                    case BREAK:
                    case BYTE:
                    case CHAR:
                    case CLASS:
                    case CONST:
                    case CONTINUE:
                    case DO:
                    case DOUBLE:
                    case FALSE:
                    case FINAL:
                    case FLOAT:
                    case FOR:
                    case IF:
                    case INT:
                    case INTERFACE:
                    case LONG:
                    case NATIVE:
                    case NEW:
                    case NULL:
                    case PRIVATE:
                    case PROTECTED:
                    case PUBLIC:
                    case RETURN:
                    case SHORT:
                    case STATIC:
                    case STRICTFP:
                    case SUPER:
                    case SWITCH:
                    case SYNCHRONIZED:
                    case THIS:
                    case THROW:
                    case TRANSIENT:
                    case TRUE:
                    case TRY:
                    case VOID:
                    case VOLATILE:
                    case WHILE:
                    case TEMPLATE:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case LPAREN:
                    case LBRACE:
                    case SEMICOLON:
                    case DOUBLECOLON:
                    case INCR:
                    case DECR:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 150:
                    case IDENTIFIER:
                        ;
                        break;
                    default:
                        cc_la1[169] = cc_gen;
                        goto label_56_exit;
                }
                BlockStatement();
            }
        }
    label_56_exit:

        cc_consume_token(RBRACE);
    }

    public void SwitchLabel()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case CASE:
                cc_consume_token(CASE);
                Expression(null);
                cc_consume_token(COLON);
                break;
            case _DEFAULT:
                cc_consume_token(_DEFAULT);
                cc_consume_token(COLON);
                break;
            default:
                cc_la1[170] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void IfStatement()
    {
        cc_consume_token(IF);
        cc_consume_token(LPAREN);
        Expression(null);
        cc_consume_token(RPAREN);
        Statement();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case ELSE:
                cc_consume_token(ELSE);
                Statement();
                break;
            default:
                cc_la1[171] = cc_gen;
                break;
        }
    }

    public void WhileStatement()
    {
        cc_consume_token(WHILE);
        cc_consume_token(LPAREN);
        Expression(null);
        cc_consume_token(RPAREN);
        Statement();
    }

    public void DoStatement()
    {
        cc_consume_token(DO);
        Statement();
        cc_consume_token(WHILE);
        cc_consume_token(LPAREN);
        Expression(null);
        cc_consume_token(RPAREN);
        cc_consume_token(SEMICOLON);
    }

    public void ForStatement()
    {
        cc_consume_token(FOR);
        cc_consume_token(LPAREN);
        if (jj_2_43(2147483647))
        {
            Modifiers();
            Type();
            JavaIdentifier();
            cc_consume_token(COLON);
            Expression(null);
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case NATIVE:
                case NEW:
                case NULL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SUPER:
                case SYNCHRONIZED:
                case THIS:
                case TRANSIENT:
                case TRUE:
                case VOID:
                case VOLATILE:
                case TEMPLATE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case SEMICOLON:
                case DOUBLECOLON:
                case INCR:
                case DECR:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 150:
                case IDENTIFIER:
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case ABSTRACT:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CONST:
                        case DOUBLE:
                        case FALSE:
                        case FINAL:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NATIVE:
                        case NEW:
                        case NULL:
                        case PRIVATE:
                        case PROTECTED:
                        case PUBLIC:
                        case SHORT:
                        case STATIC:
                        case STRICTFP:
                        case SUPER:
                        case SYNCHRONIZED:
                        case THIS:
                        case TRANSIENT:
                        case TRUE:
                        case VOID:
                        case VOLATILE:
                        case TEMPLATE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case DOUBLECOLON:
                        case INCR:
                        case DECR:
                        case 139:
                        case 140:
                        case 141:
                        case 142:
                        case 143:
                        case 144:
                        case 150:
                        case IDENTIFIER:
                            ForInit();
                            break;
                        default:
                            cc_la1[172] = cc_gen;
                            break;
                    }
                    cc_consume_token(SEMICOLON);
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CONST:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case VOID:
                        case TEMPLATE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case BANG:
                        case TILDE:
                        case DOUBLECOLON:
                        case INCR:
                        case DECR:
                        case PLUS:
                        case MINUS:
                        case 139:
                        case 140:
                        case 141:
                        case 142:
                        case 143:
                        case 144:
                        case IDENTIFIER:
                            Expression(null);
                            break;
                        default:
                            cc_la1[173] = cc_gen;
                            break;
                    }
                    cc_consume_token(SEMICOLON);
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CONST:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case VOID:
                        case TEMPLATE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case DOUBLECOLON:
                        case INCR:
                        case DECR:
                        case 139:
                        case 140:
                        case 141:
                        case 142:
                        case 143:
                        case 144:
                        case IDENTIFIER:
                            ForUpdate();
                            break;
                        default:
                            cc_la1[174] = cc_gen;
                            break;
                    }
                    break;
                default:
                    cc_la1[175] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
        cc_consume_token(RPAREN);
        Statement();
    }

    public void ForInit()
    {
        if (jj_2_44(2147483647))
        {
            LocalVariableDeclaration();
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case TEMPLATE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case DOUBLECOLON:
                case INCR:
                case DECR:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case IDENTIFIER:
                    StatementExpressionList();
                    break;
                default:
                    cc_la1[176] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void StatementExpressionList()
    {
        StatementExpression();
    label_57:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[177] = cc_gen;
                    goto label_57_exit;
            }
            cc_consume_token(COMMA);
            StatementExpression();
        }
    label_57_exit:
        ;
    }

    public void ForUpdate()
    {
        StatementExpressionList();
    }

    public void BreakStatement()
    {
        cc_consume_token(BREAK);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case TEMPLATE:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                JavaIdentifier();
                break;
            default:
                cc_la1[178] = cc_gen;
                break;
        }
        cc_consume_token(SEMICOLON);
    }

    public void ContinueStatement()
    {
        cc_consume_token(CONTINUE);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case TEMPLATE:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                JavaIdentifier();
                break;
            default:
                cc_la1[179] = cc_gen;
                break;
        }
        cc_consume_token(SEMICOLON);
    }

    public void ReturnStatement()
    {
        Token t;
        t = cc_consume_token(RETURN);
        // Add if statement to prevent subsequent code generated
        // from being dead code.
        // NB: eclipse now detects 'if (true)' as dead code, so use the more complicated
        // 'if ("" != null)'
        if (inAction && (Options.IsLegacyExceptionHandling()))
        {
            t.image = "{if (\u005c\"\u005c\" != null) return";
            jumpPatched = true;
        }
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case TEMPLATE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case DOUBLECOLON:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                Expression(null);
                break;
            default:
                cc_la1[180] = cc_gen;
                break;
        }
        t = cc_consume_token(SEMICOLON);
        // Add closing brace for above if statement.
        if (inAction && (Options.IsLegacyExceptionHandling()))
        {
            t.image = ";}";
        }
    }

    public void ThrowStatement()
    {
        Token t;
        t = cc_consume_token(THROW);
        // Add if statement to prevent subsequent code generated
        // from being dead code.
        if (inAction)
        {
            t.image = "{if (true) throw";
            jumpPatched = true;
        }
        Expression(null);
        t = cc_consume_token(SEMICOLON);
        // Add closing brace for above if statement.
        if (inAction)
        {
            t.image = ";}";
        }
    }

    public void SynchronizedStatement()
    {
        cc_consume_token(SYNCHRONIZED);
        cc_consume_token(LPAREN);
        Expression(null);
        cc_consume_token(RPAREN);
        Block(null);
    }

    public void ResourceDeclaration()
    {
        Type();
        VariableDeclaratorId();
        cc_consume_token(ASSIGN);
        Expression(null);
    }

    public void CatchParameter()
    {
        Token t;
        Modifiers();
        Type();
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case STAR:
            case BIT_AND:
            case 145:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case STAR:
                    case BIT_AND:
                        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                        {
                            case BIT_AND:
                                t = cc_consume_token(BIT_AND);
                                break;
                            case STAR:
                                t = cc_consume_token(STAR);
                                break;
                            default:
                                cc_la1[181] = cc_gen;
                                cc_consume_token(-1);
                                throw new ParseException();
                        }
                        if (!IsAllowed(t)) { if (true) throw new ParseException(t.image + " is invalid in this context"); }
                        break;
                    case 145:
                        cc_consume_token(145);
                        break;
                    default:
                        cc_la1[182] = cc_gen;
                        cc_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                cc_la1[183] = cc_gen;
                break;
        }
    label_58:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case BIT_OR:
                    ;
                    break;
                default:
                    cc_la1[184] = cc_gen;
                    goto label_58_exit;
            }
            cc_consume_token(BIT_OR);
            Type();
        }
    label_58_exit:

        VariableDeclaratorId();
    }

    public void TryStatement()
    {
        bool empty = true;
        cc_consume_token(TRY);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case LPAREN:
                cc_consume_token(LPAREN);
                ResourceDeclaration();
            label_59:
                while (true)
                {
                    if (jj_2_45(2))
                    {
                        ;
                    }
                    else
                    {
                        goto label_59_exit;
                    }
                    cc_consume_token(SEMICOLON);
                    ResourceDeclaration();
                }
            label_59_exit:
                switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                {
                    case SEMICOLON:
                        cc_consume_token(SEMICOLON);
                        break;
                    default:
                        cc_la1[185] = cc_gen;
                        break;
                }
                cc_consume_token(RPAREN);
                empty = false;
                break;
            default:
                cc_la1[186] = cc_gen;
                break;
        }
        Block(null);
    label_60:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case CATCH:
                    ;
                    break;
                default:
                    cc_la1[187] = cc_gen;
                    goto label_60_exit;
            }
            cc_consume_token(CATCH);
            cc_consume_token(LPAREN);
            CatchParameter();
            cc_consume_token(RPAREN);
            Block(null);
            empty = false;
        }
    label_60_exit:
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case FINALLY:
                cc_consume_token(FINALLY);
                Block(null);
                empty = false;
                break;
            default:
                cc_la1[188] = cc_gen;
                break;
                ;
        }
        if (empty)
        { if (true) throw new ParseException("At least one catch or finally block expected."); }
    }

    /* We use productions to match >>>, >> and > so that we can keep the
     * type declaration syntax with generics clean
     */
    public void RUNSIGNEDSHIFT()
    {
        if (GetToken(1).kind == GT &&
                        ((Token.GTToken)GetToken(1)).realKind == RUNSIGNEDSHIFT_VALUE)
        {

        }
        else
        {
            cc_consume_token(-1);
            throw new ParseException();
        }
        cc_consume_token(RANGLE);
        cc_consume_token(RANGLE);
        cc_consume_token(RANGLE);
    }

    public void RSIGNEDSHIFT()
    {
        if (GetToken(1).kind == GT &&
                        ((Token.GTToken)GetToken(1)).realKind == RSIGNEDSHIFT_VALUE)
        {

        }
        else
        {
            cc_consume_token(-1);
            throw new ParseException();
        }
        cc_consume_token(RANGLE);
        cc_consume_token(RANGLE);
    }

    /* Annotation syntax follows. */
    public void Annotation()
    {
        if (jj_2_46(2147483647))
        {
            NormalAnnotation();
        }
        else if (jj_2_47(2147483647))
        {
            SingleMemberAnnotation();
        }
        else
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case 150:
                    MarkerAnnotation();
                    break;
                default:
                    cc_la1[189] = cc_gen;
                    cc_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void NormalAnnotation()
    {
        cc_consume_token(150);
        Name(null);
        cc_consume_token(LPAREN);
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case TEMPLATE:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                MemberValuePairs();
                break;
            default:
                cc_la1[190] = cc_gen;
                break;
        }
        cc_consume_token(RPAREN);
    }

    public void MarkerAnnotation()
    {
        cc_consume_token(150);
        Name(null);
    }

    public void SingleMemberAnnotation()
    {
        cc_consume_token(150);
        Name(null);
        cc_consume_token(LPAREN);
        MemberValue();
        cc_consume_token(RPAREN);
    }

    public void MemberValuePairs()
    {
        MemberValuePair();
    label_61:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    cc_la1[191] = cc_gen;
                    goto label_61_exit;
            }
            cc_consume_token(COMMA);
            MemberValuePair();
        }
    label_61_exit:
        ;
    }

    public void MemberValuePair()
    {
        JavaIdentifier();
        cc_consume_token(ASSIGN);
        MemberValue();
    }

    public void MemberValue()
    {
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case 150:
                Annotation();
                break;
            case LBRACE:
                MemberValueArrayInitializer();
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case TEMPLATE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case DOUBLECOLON:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case IDENTIFIER:
                ConditionalExpression();
                break;
            default:
                cc_la1[192] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void MemberValueArrayInitializer()
    {
        cc_consume_token(LBRACE);
        MemberValue();
    label_62:
        while (true)
        {
            if (jj_2_48(2))
            {
                ;
            }
            else
            {
                goto label_62_exit;
            }
            cc_consume_token(COMMA);
            MemberValue();
        }
    label_62_exit:
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case COMMA:
                cc_consume_token(COMMA);
                break;
            default:
                cc_la1[193] = cc_gen;
                break;
        }
        cc_consume_token(RBRACE);
    }

    /* Annotation Types. */
    public void AnnotationTypeDeclaration(int modifiers)
    {
        cc_consume_token(150);
        cc_consume_token(INTERFACE);
        JavaIdentifier();
        AnnotationTypeBody();
    }

    public void AnnotationTypeBody()
    {
        cc_consume_token(LBRACE);
    label_63:
        while (true)
        {
            switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
            {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case DOUBLE:
                case ENUM:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOLATILE:
                case TEMPLATE:
                case SEMICOLON:
                case DOUBLECOLON:
                case 150:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    cc_la1[194] = cc_gen;
                    goto label_63_exit;
            }
            AnnotationTypeMemberDeclaration();
        }
    label_63_exit:
        cc_consume_token(RBRACE);
    }

    public void AnnotationTypeMemberDeclaration()
    {
        int modifiers;
        switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
        {
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case DOUBLE:
            case ENUM:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case STRICTFP:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case TEMPLATE:
            case DOUBLECOLON:
            case 150:
            case IDENTIFIER:
                modifiers = Modifiers();
                if (jj_2_49(2147483647))
                {
                    Type();
                    JavaIdentifier();
                    cc_consume_token(LPAREN);
                    cc_consume_token(RPAREN);
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case _DEFAULT:
                            DefaultValue();
                            break;
                        default:
                            cc_la1[195] = cc_gen;
                            break;
                    }
                    cc_consume_token(SEMICOLON);
                }
                else
                {
                    switch ((cc_ntk == -1) ? jj_ntk_() : cc_ntk)
                    {
                        case CLASS:
                        case INTERFACE:
                            ClassOrInterfaceDeclaration(modifiers, null);
                            break;
                        case ENUM:
                            EnumDeclaration(modifiers);
                            break;
                        case 150:
                            AnnotationTypeDeclaration(modifiers);
                            break;
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case SHORT:
                        case TEMPLATE:
                        case DOUBLECOLON:
                        case IDENTIFIER:
                            FieldDeclaration(modifiers);
                            break;
                        default:
                            cc_la1[196] = cc_gen;
                            cc_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
            case SEMICOLON:
                cc_consume_token(SEMICOLON);
                break;
            default:
                cc_la1[197] = cc_gen;
                cc_consume_token(-1);
                throw new ParseException();
        }
    }

    public void DefaultValue()
    {
        cc_consume_token(_DEFAULT);
        MemberValue();
    }

    private bool jj_2_1(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_1(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(0, xla); }
    }

    private bool jj_2_2(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_2(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(1, xla); }
    }

    private bool jj_2_3(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_3(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(2, xla); }
    }

    private bool jj_2_4(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_4(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(3, xla); }
    }

    private bool jj_2_5(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_5(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(4, xla); }
    }

    private bool jj_2_6(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_6(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(5, xla); }
    }

    private bool jj_2_7(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_7(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(6, xla); }
    }

    private bool jj_2_8(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_8(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(7, xla); }
    }

    private bool jj_2_9(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_9(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(8, xla); }
    }

    private bool jj_2_10(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_10(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(9, xla); }
    }

    private bool jj_2_11(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_11(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(10, xla); }
    }

    private bool jj_2_12(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_12(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(11, xla); }
    }

    private bool jj_2_13(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_13(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(12, xla); }
    }

    private bool jj_2_14(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_14(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(13, xla); }
    }

    private bool jj_2_15(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_15(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(14, xla); }
    }

    private bool jj_2_16(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_16(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(15, xla); }
    }

    private bool jj_2_17(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_17(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(16, xla); }
    }

    private bool jj_2_18(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_18(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(17, xla); }
    }

    private bool jj_2_19(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_19(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(18, xla); }
    }

    private bool jj_2_20(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_20(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(19, xla); }
    }

    private bool jj_2_21(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_21(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(20, xla); }
    }

    private bool jj_2_22(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_22(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(21, xla); }
    }

    private bool jj_2_23(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_23(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(22, xla); }
    }

    private bool jj_2_24(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_24(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(23, xla); }
    }

    private bool jj_2_25(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_25(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(24, xla); }
    }

    private bool jj_2_26(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_26(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(25, xla); }
    }

    private bool jj_2_27(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_27(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(26, xla); }
    }

    private bool jj_2_28(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_28(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(27, xla); }
    }

    private bool jj_2_29(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_29(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(28, xla); }
    }

    private bool jj_2_30(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_30(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(29, xla); }
    }

    private bool jj_2_31(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_31(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(30, xla); }
    }

    private bool jj_2_32(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_32(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(31, xla); }
    }

    private bool jj_2_33(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_33(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(32, xla); }
    }

    private bool jj_2_34(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_34(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(33, xla); }
    }

    private bool jj_2_35(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_35(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(34, xla); }
    }

    private bool jj_2_36(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_36(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(35, xla); }
    }

    private bool jj_2_37(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_37(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(36, xla); }
    }

    private bool jj_2_38(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_38(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(37, xla); }
    }

    private bool jj_2_39(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_39(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(38, xla); }
    }

    private bool jj_2_40(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_40(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(39, xla); }
    }

    private bool jj_2_41(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_41(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(40, xla); }
    }

    private bool jj_2_42(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_42(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(41, xla); }
    }

    private bool jj_2_43(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_43(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(42, xla); }
    }

    private bool jj_2_44(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_44(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(43, xla); }
    }

    private bool jj_2_45(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_45(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(44, xla); }
    }

    private bool jj_2_46(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_46(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(45, xla); }
    }

    private bool jj_2_47(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_47(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(46, xla); }
    }

    private bool jj_2_48(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_48(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(47, xla); }
    }

    private bool jj_2_49(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_49(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(48, xla); }
    }

    private bool jj_3R_281()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(105))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(137))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(112))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(113)) return true;
                }
            }
        }
        if (jj_3R_267()) return true;
        return false;
    }

    private bool jj_3R_275()
    {
        if (jj_scan_token(INSTANCEOF)) return true;
        if (jj_3R_88()) return true;
        return false;
    }

    private bool jj_3R_280()
    {
        if (jj_3R_298()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_321()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_211()
    {
        if (jj_3R_237()) return true;
        return false;
    }

    private bool jj_3R_268()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(111))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(114)) return true;
        }
        if (jj_3R_259()) return true;
        return false;
    }

    private bool jj_3R_274()
    {
        if (jj_3R_280()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_312()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_210()
    {
        if (jj_scan_token(TILDE)) return true;
        return false;
    }

    private bool jj_3R_197()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_210()) jj_scanpos = xsp;
        if (jj_scan_token(LBRACKET)) return true;
        xsp = jj_scanpos;
        if (jj_3R_211()) jj_scanpos = xsp;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_267()
    {
        if (jj_3R_274()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_25()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_265()
    {
        if (jj_scan_token(BIT_AND)) return true;
        if (jj_3R_252()) return true;
        return false;
    }

    private bool jj_3R_264()
    {
        if (jj_3R_267()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_281()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_253()
    {
        if (jj_scan_token(BIT_OR)) return true;
        if (jj_3R_203()) return true;
        return false;
    }

    private bool jj_3R_259()
    {
        if (jj_3R_264()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_275()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_260()
    {
        if (jj_scan_token(XOR)) return true;
        if (jj_3R_231()) return true;
        return false;
    }

    private bool jj_3R_232()
    {
        if (jj_scan_token(SC_AND)) return true;
        if (jj_3R_189()) return true;
        return false;
    }

    private bool jj_3R_252()
    {
        if (jj_3R_259()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_268()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_206()
    {
        if (jj_scan_token(SC_OR)) return true;
        if (jj_3R_178()) return true;
        return false;
    }

    private bool jj_3R_231()
    {
        if (jj_3R_252()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_265()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_191()
    {
        if (jj_scan_token(HOOK)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_203()
    {
        if (jj_3R_231()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_260()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_189()
    {
        if (jj_3R_203()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_253()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_183()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_71()) return true;
        return false;
    }

    private bool jj_3R_178()
    {
        if (jj_3R_189()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_232()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_182()
    {
        if (jj_3R_197()) return true;
        return false;
    }

    private bool jj_3R_181()
    {
        if (jj_scan_token(LANGLE)) return true;
        if (jj_3R_65()) return true;
        return false;
    }

    private bool jj_3R_161()
    {
        if (jj_3R_178()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_206()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_168()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_180())
        {
            jj_scanpos = xsp;
            if (jj_3R_181())
            {
                jj_scanpos = xsp;
                if (jj_3R_182())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_183()) return true;
                }
            }
        }
        return false;
    }

    private bool jj_3R_180()
    {
        if (jj_3R_113()) return true;
        return false;
    }

    private bool jj_3R_129()
    {
        if (jj_3R_161()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_191()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_96()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(104))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(129))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(130))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(134))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(127))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(128))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(146))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(147))
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(148))
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(131))
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(133))
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_scan_token(132)) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3_24()
    {
        if (jj_3R_96()) return true;
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3_49()
    {
        if (jj_3R_88()) return true;
        if (jj_3R_87()) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private bool jj_3R_97()
    {
        if (jj_3R_129()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_24()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_149()
    {
        if (jj_3R_168()) return true;
        return false;
    }

    private bool jj_3R_115()
    {
        Token xsp;
        if (jj_3R_149()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_149()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_318()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_109()) return true;
        return false;
    }

    private bool jj_3_48()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_111()) return true;
        return false;
    }

    private bool jj_3R_304()
    {
        if (jj_3R_109()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_318()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_116()
    {
        if (jj_scan_token(BIT_OR)) return true;
        return false;
    }

    private bool jj_3R_71()
    {
        if (jj_3R_115()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_116()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_165()
    {
        if (jj_scan_token(LBRACE)) return true;
        if (jj_3R_111()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_48()) { jj_scanpos = xsp; break; }
        }
        xsp = jj_scanpos;
        if (jj_scan_token(102)) jj_scanpos = xsp;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_213()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_212()) return true;
        return false;
    }

    private bool jj_3_23()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3R_142()
    {
        if (jj_3R_129()) return true;
        return false;
    }

    private bool jj_3R_109()
    {
        if (jj_3R_87()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_23()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_141()
    {
        if (jj_3R_165()) return true;
        return false;
    }

    private bool jj_3R_140()
    {
        if (jj_3R_117()) return true;
        return false;
    }

    private bool jj_3R_111()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_140())
        {
            jj_scanpos = xsp;
            if (jj_3R_141())
            {
                jj_scanpos = xsp;
                if (jj_3R_142()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_212()
    {
        if (jj_3R_87()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        if (jj_3R_111()) return true;
        return false;
    }

    private bool jj_3R_164()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(121))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(123)) return true;
        }
        return false;
    }

    private bool jj_3R_184()
    {
        if (jj_3R_198()) return true;
        return false;
    }

    private bool jj_3R_110()
    {
        if (jj_3R_87()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private bool jj_3_6()
    {
        if (jj_scan_token(LANGLE)) return true;
        if (jj_3R_65()) return true;
        return false;
    }

    private bool jj_3R_198()
    {
        if (jj_3R_212()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_213()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_170()
    {
        if (jj_scan_token(150)) return true;
        if (jj_3R_109()) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_111()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3R_171()
    {
        if (jj_scan_token(150)) return true;
        if (jj_3R_109()) return true;
        return false;
    }

    private bool jj_3R_138()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(37)) jj_scanpos = xsp;
        if (jj_3R_88()) return true;
        xsp = jj_scanpos;
        if (jj_3R_164()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3_47()
    {
        if (jj_scan_token(150)) return true;
        if (jj_3R_109()) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private bool jj_3R_137()
    {
        if (jj_scan_token(VOID)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(121)) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_169()
    {
        if (jj_scan_token(150)) return true;
        if (jj_3R_109()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_184()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3_46()
    {
        if (jj_scan_token(150)) return true;
        if (jj_3R_109()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_110())
        {
            jj_scanpos = xsp;
            if (jj_scan_token(96)) return true;
        }
        return false;
    }

    private bool jj_3R_114()
    {
        if (jj_scan_token(138)) return true;
        return false;
    }

    private bool jj_3R_103()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_137())
        {
            jj_scanpos = xsp;
            if (jj_3R_138()) return true;
        }
        return false;
    }

    private bool jj_3R_70()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_114()) jj_scanpos = xsp;
        if (jj_3R_65()) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private bool jj_3R_152()
    {
        if (jj_3R_171()) return true;
        return false;
    }

    private bool jj_3R_151()
    {
        if (jj_3R_170()) return true;
        return false;
    }

    private bool jj_3_5()
    {
        if (jj_scan_token(LANGLE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_70()) jj_scanpos = xsp;
        if (jj_3R_71()) return true;
        if (jj_scan_token(RANGLE)) return true;
        return false;
    }

    private bool jj_3R_130()
    {
        return false;
    }

    private bool jj_3R_117()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_150())
        {
            jj_scanpos = xsp;
            if (jj_3R_151())
            {
                jj_scanpos = xsp;
                if (jj_3R_152()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_150()
    {
        if (jj_3R_169()) return true;
        return false;
    }

    private bool jj_3R_131()
    {
        return false;
    }

    private bool jj_3R_66()
    {
        if (jj_3R_95()) return true;
        return false;
    }

    private bool jj_3R_98()
    {
        jj_lookingAhead = true;
        jj_semLA = GetToken(1).kind == GT &&
                    ((Token.GTToken)GetToken(1)).realKind == RSIGNEDSHIFT_VALUE;
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_130()) return true;
        if (jj_scan_token(RANGLE)) return true;
        if (jj_scan_token(RANGLE)) return true;
        return false;
    }

    private bool jj_3R_101()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(30))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(35))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(32))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(66))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(55))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(57))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(48))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(41)) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3_22()
    {
        if (jj_3R_95()) return true;
        return false;
    }

    private bool jj_3R_236()
    {
        if (jj_scan_token(SUPER)) return true;
        if (jj_3R_94()) return true;
        return false;
    }

    private bool jj_3R_196()
    {
        if (jj_3R_209()) return true;
        return false;
    }

    private bool jj_3R_209()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_235())
        {
            jj_scanpos = xsp;
            if (jj_3R_236()) return true;
        }
        return false;
    }

    private bool jj_3R_235()
    {
        if (jj_scan_token(EXTENDS)) return true;
        if (jj_3R_94()) return true;
        return false;
    }

    private bool jj_3R_99()
    {
        jj_lookingAhead = true;
        jj_semLA = GetToken(1).kind == GT &&
                    ((Token.GTToken)GetToken(1)).realKind == RUNSIGNEDSHIFT_VALUE;
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_131()) return true;
        if (jj_scan_token(RANGLE)) return true;
        if (jj_scan_token(RANGLE)) return true;
        if (jj_scan_token(RANGLE)) return true;
        return false;
    }

    private bool jj_3_3()
    {
        if (jj_3R_65()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_66()) jj_scanpos = xsp;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private bool jj_3R_177()
    {
        if (jj_scan_token(HOOK)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_196()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_160()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_176())
        {
            jj_scanpos = xsp;
            if (jj_3R_177()) return true;
        }
        return false;
    }

    private bool jj_3R_167()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_160()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(145)) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_176()
    {
        if (jj_3R_94()) return true;
        return false;
    }

    private bool jj_3_45()
    {
        if (jj_scan_token(SEMICOLON)) return true;
        if (jj_3R_108()) return true;
        return false;
    }

    private bool jj_3R_342()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_108()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_45()) { jj_scanpos = xsp; break; }
        }
        xsp = jj_scanpos;
        if (jj_scan_token(101)) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3R_344()
    {
        if (jj_scan_token(FINALLY)) return true;
        if (jj_3R_120()) return true;
        return false;
    }

    private bool jj_3R_343()
    {
        if (jj_scan_token(CATCH)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_351()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_120()) return true;
        return false;
    }

    private bool jj_3R_251()
    {
        if (jj_scan_token(TRY)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_342()) jj_scanpos = xsp;
        if (jj_3R_120()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_343()) { jj_scanpos = xsp; break; }
        }
        xsp = jj_scanpos;
        if (jj_3R_344()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3_20()
    {
        if (jj_3R_95()) return true;
        return false;
    }

    private bool jj_3_19()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_215()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_214()) return true;
        return false;
    }

    private bool jj_3R_128()
    {
        if (jj_3R_160()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_167()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_359()
    {
        if (jj_scan_token(BIT_OR)) return true;
        if (jj_3R_88()) return true;
        return false;
    }

    private bool jj_3_2()
    {
        if (jj_3R_64()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private bool jj_3R_95()
    {
        if (jj_scan_token(LANGLE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_128()) jj_scanpos = xsp;
        if (jj_scan_token(RANGLE)) return true;
        return false;
    }

    private bool jj_3R_363()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(123))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(121)) return true;
        }
        return false;
    }

    private bool jj_3R_358()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_363())
        {
            jj_scanpos = xsp;
            if (jj_scan_token(145)) return true;
        }
        return false;
    }

    private bool jj_3R_351()
    {
        if (jj_3R_107()) return true;
        if (jj_3R_88()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_358()) jj_scanpos = xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_359()) { jj_scanpos = xsp; break; }
        }
        if (jj_3R_305()) return true;
        return false;
    }

    private bool jj_3R_108()
    {
        if (jj_3R_88()) return true;
        if (jj_3R_305()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_69()
    {
        if (jj_3R_64()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private bool jj_3_21()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(103))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(110)) return true;
        }
        if (jj_scan_token(IDENTIFIER)) return true;
        xsp = jj_scanpos;
        if (jj_3_22()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_159()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(110)) jj_scanpos = xsp;
        if (jj_scan_token(IDENTIFIER)) return true;
        xsp = jj_scanpos;
        if (jj_3_20()) jj_scanpos = xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_21()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_238()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(36))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(82)) return true;
        }
        return false;
    }

    private bool jj_3R_250()
    {
        if (jj_scan_token(SYNCHRONIZED)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_120()) return true;
        return false;
    }

    private bool jj_3R_68()
    {
        if (jj_3R_113()) return true;
        return false;
    }

    private bool jj_3_4()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_67())
        {
            jj_scanpos = xsp;
            if (jj_3R_68())
            {
                jj_scanpos = xsp;
                if (jj_scan_token(105))
                {
                    jj_scanpos = xsp;
                    if (jj_3R_69()) return true;
                }
            }
        }
        return false;
    }

    private bool jj_3R_67()
    {
        if (jj_3R_65()) return true;
        return false;
    }

    private bool jj_3R_214()
    {
        if (jj_3R_238()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(145)) jj_scanpos = xsp;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private bool jj_3_18()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_175()
    {
        if (jj_scan_token(TEMPLATE)) return true;
        if (jj_scan_token(LANGLE)) return true;
        if (jj_3R_214()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_215()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RANGLE)) return true;
        return false;
    }

    private bool jj_3R_158()
    {
        if (jj_3R_175()) return true;
        return false;
    }

    private bool jj_3R_289()
    {
        if (jj_scan_token(THROWS)) return true;
        if (jj_3R_304()) return true;
        return false;
    }

    private bool jj_3R_249()
    {
        if (jj_scan_token(THROW)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_127()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_158()) jj_scanpos = xsp;
        if (jj_3R_159()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_19()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_126()
    {
        if (jj_3R_101()) return true;
        Token xsp;
        if (jj_3_18()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_18()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_94()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_126())
        {
            jj_scanpos = xsp;
            if (jj_3R_127()) return true;
        }
        return false;
    }

    private bool jj_3R_119()
    {
        if (jj_3R_101()) return true;
        return false;
    }

    private bool jj_3R_88()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_17())
        {
            jj_scanpos = xsp;
            if (jj_3R_119()) return true;
        }
        return false;
    }

    private bool jj_3_17()
    {
        if (jj_3R_94()) return true;
        return false;
    }

    private bool jj_3R_341()
    {
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3_16()
    {
        if (jj_scan_token(THIS)) return true;
        if (jj_3R_93()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_340()
    {
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3R_90()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(67)) jj_scanpos = xsp;
        if (jj_3R_120()) return true;
        return false;
    }

    private bool jj_3R_350()
    {
        if (jj_3R_357()) return true;
        return false;
    }

    private bool jj_3_14()
    {
        if (jj_3R_92()) return true;
        return false;
    }

    private bool jj_3_15()
    {
        if (jj_3R_64()) return true;
        if (jj_scan_token(DOT)) return true;
        return false;
    }

    private bool jj_3R_248()
    {
        if (jj_scan_token(RETURN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_341()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_124()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_15()) jj_scanpos = xsp;
        if (jj_scan_token(SUPER)) return true;
        if (jj_3R_93()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_364()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_240()) return true;
        return false;
    }

    private bool jj_3R_339()
    {
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3R_123()
    {
        if (jj_scan_token(THIS)) return true;
        if (jj_3R_93()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_92()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_123())
        {
            jj_scanpos = xsp;
            if (jj_3R_124()) return true;
        }
        return false;
    }

    private bool jj_3R_291()
    {
        if (jj_3R_173()) return true;
        return false;
    }

    private bool jj_3R_290()
    {
        if (jj_3R_92()) return true;
        return false;
    }

    private bool jj_3R_247()
    {
        if (jj_scan_token(CONTINUE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_340()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_287()
    {
        if (jj_3R_118()) return true;
        return false;
    }

    private bool jj_3R_246()
    {
        if (jj_scan_token(BREAK)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_339()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_277()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_287()) jj_scanpos = xsp;
        if (jj_3R_87()) return true;
        if (jj_3R_288()) return true;
        xsp = jj_scanpos;
        if (jj_3R_289()) jj_scanpos = xsp;
        if (jj_scan_token(LBRACE)) return true;
        xsp = jj_scanpos;
        if (jj_3R_290()) jj_scanpos = xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_291()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_357()
    {
        if (jj_3R_362()) return true;
        return false;
    }

    private bool jj_3R_349()
    {
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_307()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_329()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(123))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(121)) return true;
        }
        return false;
    }

    private bool jj_3R_324()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_329())
        {
            jj_scanpos = xsp;
            if (jj_scan_token(145)) return true;
        }
        return false;
    }

    private bool jj_3R_336()
    {
        if (jj_scan_token(ELSE)) return true;
        if (jj_3R_201()) return true;
        return false;
    }

    private bool jj_3R_317()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_316()) return true;
        return false;
    }

    private bool jj_3_44()
    {
        if (jj_3R_107()) return true;
        if (jj_3R_88()) return true;
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3R_362()
    {
        if (jj_3R_240()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_364()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_316()
    {
        if (jj_3R_107()) return true;
        if (jj_3R_88()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_324()) jj_scanpos = xsp;
        if (jj_3R_305()) return true;
        return false;
    }

    private bool jj_3R_361()
    {
        if (jj_3R_362()) return true;
        return false;
    }

    private bool jj_3_43()
    {
        if (jj_3R_107()) return true;
        if (jj_3R_88()) return true;
        if (jj_3R_87()) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private bool jj_3R_360()
    {
        if (jj_3R_200()) return true;
        return false;
    }

    private bool jj_3R_356()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_360())
        {
            jj_scanpos = xsp;
            if (jj_3R_361()) return true;
        }
        return false;
    }

    private bool jj_3R_348()
    {
        if (jj_3R_356()) return true;
        return false;
    }

    private bool jj_3R_338()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_348()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        xsp = jj_scanpos;
        if (jj_3R_349()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        xsp = jj_scanpos;
        if (jj_3R_350()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_337()
    {
        if (jj_3R_107()) return true;
        if (jj_3R_88()) return true;
        if (jj_3R_87()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_303()
    {
        if (jj_3R_316()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_317()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_296()
    {
        if (jj_scan_token(THROWS)) return true;
        if (jj_3R_304()) return true;
        return false;
    }

    private bool jj_3R_288()
    {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_303()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3_13()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_91()) return true;
        return false;
    }

    private bool jj_3R_245()
    {
        if (jj_scan_token(FOR)) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_337())
        {
            jj_scanpos = xsp;
            if (jj_3R_338()) return true;
        }
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_201()) return true;
        return false;
    }

    private bool jj_3R_244()
    {
        if (jj_scan_token(DO)) return true;
        if (jj_3R_201()) return true;
        if (jj_scan_token(WHILE)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_243()
    {
        if (jj_scan_token(WHILE)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_201()) return true;
        return false;
    }

    private bool jj_3R_295()
    {
        if (jj_3R_87()) return true;
        if (jj_3R_288()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_307()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_347()
    {
        if (jj_3R_173()) return true;
        return false;
    }

    private bool jj_3R_297()
    {
        if (jj_3R_120()) return true;
        return false;
    }

    private bool jj_3R_242()
    {
        if (jj_scan_token(IF)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_201()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_336()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_294()
    {
        if (jj_3R_118()) return true;
        return false;
    }

    private bool jj_3R_279()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_294()) jj_scanpos = xsp;
        if (jj_3R_103()) return true;
        if (jj_3R_295()) return true;
        xsp = jj_scanpos;
        if (jj_3R_296()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_297())
        {
            jj_scanpos = xsp;
            if (jj_scan_token(101)) return true;
        }
        return false;
    }

    private bool jj_3R_254()
    {
        if (jj_3R_91()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_13()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_319()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_306()
    {
        if (jj_scan_token(ASSIGN)) return true;
        if (jj_3R_91()) return true;
        return false;
    }

    private bool jj_3R_293()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_292()) return true;
        return false;
    }

    private bool jj_3R_89()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_355()
    {
        if (jj_scan_token(_DEFAULT)) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private bool jj_3R_156()
    {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_254()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(102)) jj_scanpos = xsp;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_354()
    {
        if (jj_scan_token(CASE)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private bool jj_3R_346()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_354())
        {
            jj_scanpos = xsp;
            if (jj_3R_355()) return true;
        }
        return false;
    }

    private bool jj_3R_328()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_292()) return true;
        return false;
    }

    private bool jj_3R_335()
    {
        if (jj_3R_346()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_347()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_122()
    {
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_121()
    {
        if (jj_3R_156()) return true;
        return false;
    }

    private bool jj_3R_91()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_121())
        {
            jj_scanpos = xsp;
            if (jj_3R_122()) return true;
        }
        return false;
    }

    private bool jj_3R_241()
    {
        if (jj_scan_token(SWITCH)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_335()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_353()
    {
        if (jj_3R_96()) return true;
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_305()
    {
        if (jj_3R_87()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_319()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_345()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(117))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(118))
            {
                jj_scanpos = xsp;
                if (jj_3R_353()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_292()
    {
        if (jj_3R_305()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_306()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_258()
    {
        if (jj_3R_64()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_345()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3_11()
    {
        if (jj_3R_88()) return true;
        if (jj_3R_87()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_89()) { jj_scanpos = xsp; break; }
        }
        xsp = jj_scanpos;
        if (jj_scan_token(102))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(104))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(101)) return true;
            }
        }
        return false;
    }

    private bool jj_3R_257()
    {
        if (jj_3R_263()) return true;
        return false;
    }

    private bool jj_3R_86()
    {
        if (jj_3R_118()) return true;
        return false;
    }

    private bool jj_3R_278()
    {
        if (jj_3R_88()) return true;
        if (jj_3R_292()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_293()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_240()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_256())
        {
            jj_scanpos = xsp;
            if (jj_3R_257())
            {
                jj_scanpos = xsp;
                if (jj_3R_258()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_256()
    {
        if (jj_3R_262()) return true;
        return false;
    }

    private bool jj_3_10()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_86()) jj_scanpos = xsp;
        if (jj_3R_87()) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private bool jj_3R_273()
    {
        if (jj_3R_279()) return true;
        return false;
    }

    private bool jj_3R_272()
    {
        if (jj_3R_278()) return true;
        return false;
    }

    private bool jj_3R_271()
    {
        if (jj_3R_277()) return true;
        return false;
    }

    private bool jj_3R_270()
    {
        if (jj_3R_276()) return true;
        return false;
    }

    private bool jj_3R_269()
    {
        if (jj_3R_202()) return true;
        return false;
    }

    private bool jj_3_42()
    {
        if (jj_3R_107()) return true;
        if (jj_3R_88()) return true;
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3R_200()
    {
        if (jj_3R_107()) return true;
        if (jj_3R_88()) return true;
        if (jj_3R_292()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_328()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_266()
    {
        if (jj_3R_107()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_269())
        {
            jj_scanpos = xsp;
            if (jj_3R_270())
            {
                jj_scanpos = xsp;
                if (jj_3R_271())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_272())
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_273()) return true;
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_188()
    {
        if (jj_3R_202()) return true;
        return false;
    }

    private bool jj_3R_187()
    {
        if (jj_3R_201()) return true;
        return false;
    }

    private bool jj_3R_173()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_186())
        {
            jj_scanpos = xsp;
            if (jj_3R_187())
            {
                jj_scanpos = xsp;
                if (jj_3R_188()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_186()
    {
        if (jj_3R_200()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3_12()
    {
        if (jj_3R_90()) return true;
        return false;
    }

    private bool jj_3R_261()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_12())
        {
            jj_scanpos = xsp;
            if (jj_3R_266())
            {
                jj_scanpos = xsp;
                if (jj_scan_token(101)) return true;
            }
        }
        return false;
    }

    private bool jj_3R_199()
    {
        if (jj_scan_token(BIT_AND)) return true;
        if (jj_3R_159()) return true;
        return false;
    }

    private bool jj_3R_323()
    {
        if (jj_3R_234()) return true;
        return false;
    }

    private bool jj_3R_155()
    {
        if (jj_3R_173()) return true;
        return false;
    }

    private bool jj_3R_334()
    {
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_255()
    {
        if (jj_3R_261()) return true;
        return false;
    }

    private bool jj_3R_120()
    {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_155()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_172()
    {
        if (jj_3R_185()) return true;
        return false;
    }

    private bool jj_3R_234()
    {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_255()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_322()
    {
        if (jj_3R_93()) return true;
        return false;
    }

    private bool jj_3R_154()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_153()) return true;
        return false;
    }

    private bool jj_3R_185()
    {
        if (jj_scan_token(EXTENDS)) return true;
        if (jj_3R_159()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_199()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_106()
    {
        if (jj_3R_87()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_201()) return true;
        return false;
    }

    private bool jj_3R_153()
    {
        if (jj_3R_87()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_172()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_239()
    {
        if (jj_scan_token(ASSERT)) return true;
        if (jj_3R_97()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_334()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3_9()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_85()) return true;
        return false;
    }

    private bool jj_3_39()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_118()
    {
        if (jj_scan_token(LANGLE)) return true;
        if (jj_3R_153()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_154()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RANGLE)) return true;
        return false;
    }

    private bool jj_3R_229()
    {
        if (jj_3R_251()) return true;
        return false;
    }

    private bool jj_3R_228()
    {
        if (jj_3R_250()) return true;
        return false;
    }

    private bool jj_3R_227()
    {
        if (jj_3R_249()) return true;
        return false;
    }

    private bool jj_3R_315()
    {
        if (jj_3R_261()) return true;
        return false;
    }

    private bool jj_3R_226()
    {
        if (jj_3R_248()) return true;
        return false;
    }

    private bool jj_3R_85()
    {
        if (jj_3R_107()) return true;
        if (jj_3R_87()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_322()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_323()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_225()
    {
        if (jj_3R_247()) return true;
        return false;
    }

    private bool jj_3R_224()
    {
        if (jj_3R_246()) return true;
        return false;
    }

    private bool jj_3R_302()
    {
        if (jj_scan_token(SEMICOLON)) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_315()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_223()
    {
        if (jj_3R_245()) return true;
        return false;
    }

    private bool jj_3R_301()
    {
        if (jj_3R_85()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_9()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_222()
    {
        if (jj_3R_244()) return true;
        return false;
    }

    private bool jj_3R_286()
    {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_301()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(102)) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_302()) jj_scanpos = xsp;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_221()
    {
        if (jj_3R_243()) return true;
        return false;
    }

    private bool jj_3R_220()
    {
        if (jj_3R_242()) return true;
        return false;
    }

    private bool jj_3R_219()
    {
        if (jj_3R_241()) return true;
        return false;
    }

    private bool jj_3R_285()
    {
        if (jj_3R_300()) return true;
        return false;
    }

    private bool jj_3R_218()
    {
        if (jj_3R_240()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_276()
    {
        if (jj_scan_token(ENUM)) return true;
        if (jj_3R_87()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_285()) jj_scanpos = xsp;
        if (jj_3R_286()) return true;
        return false;
    }

    private bool jj_3R_217()
    {
        if (jj_3R_120()) return true;
        return false;
    }

    private bool jj_3R_216()
    {
        if (jj_3R_239()) return true;
        return false;
    }

    private bool jj_3R_193()
    {
        if (jj_3R_95()) return true;
        return false;
    }

    private bool jj_3_41()
    {
        if (jj_3R_106()) return true;
        return false;
    }

    private bool jj_3R_201()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_41())
        {
            jj_scanpos = xsp;
            if (jj_3R_216())
            {
                jj_scanpos = xsp;
                if (jj_3R_217())
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(101))
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_218())
                        {
                            jj_scanpos = xsp;
                            if (jj_3R_219())
                            {
                                jj_scanpos = xsp;
                                if (jj_3R_220())
                                {
                                    jj_scanpos = xsp;
                                    if (jj_3R_221())
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_3R_222())
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_3R_223())
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_3R_224())
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_225())
                                                    {
                                                        jj_scanpos = xsp;
                                                        if (jj_3R_226())
                                                        {
                                                            jj_scanpos = xsp;
                                                            if (jj_3R_227())
                                                            {
                                                                jj_scanpos = xsp;
                                                                if (jj_3R_228())
                                                                {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3R_229()) return true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_314()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_159()) return true;
        return false;
    }

    private bool jj_3R_208()
    {
        if (jj_3R_234()) return true;
        return false;
    }

    private bool jj_3R_300()
    {
        if (jj_scan_token(IMPLEMENTS)) return true;
        if (jj_3R_159()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_314()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_233()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3_38()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_207()
    {
        Token xsp;
        if (jj_3R_233()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_233()) { jj_scanpos = xsp; break; }
        }
        if (jj_3R_156()) return true;
        return false;
    }

    private bool jj_3R_313()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_159()) return true;
        return false;
    }

    private bool jj_3_40()
    {
        Token xsp;
        if (jj_3_38()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_38()) { jj_scanpos = xsp; break; }
        }
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_39()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_192()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_40())
        {
            jj_scanpos = xsp;
            if (jj_3R_207()) return true;
        }
        return false;
    }

    private bool jj_3R_299()
    {
        if (jj_scan_token(EXTENDS)) return true;
        if (jj_3R_159()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_313()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_174()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_195()
    {
        if (jj_3R_93()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_208()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_194()
    {
        if (jj_3R_192()) return true;
        return false;
    }

    private bool jj_3R_230()
    {
        if (jj_scan_token(INTERFACE)) return true;
        return false;
    }

    private bool jj_3R_139()
    {
        if (jj_scan_token(NEW)) return true;
        if (jj_3R_159()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_193()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_194())
        {
            jj_scanpos = xsp;
            if (jj_3R_195()) return true;
        }
        return false;
    }

    private bool jj_3R_104()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_37())
        {
            jj_scanpos = xsp;
            if (jj_3R_139()) return true;
        }
        return false;
    }

    private bool jj_3_37()
    {
        if (jj_scan_token(NEW)) return true;
        if (jj_3R_101()) return true;
        if (jj_3R_192()) return true;
        return false;
    }

    private bool jj_3R_284()
    {
        if (jj_3R_300()) return true;
        return false;
    }

    private bool jj_3R_283()
    {
        if (jj_3R_299()) return true;
        return false;
    }

    private bool jj_3R_282()
    {
        if (jj_3R_118()) return true;
        return false;
    }

    private bool jj_3R_157()
    {
        if (jj_3R_97()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_174()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_202()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(36))
        {
            jj_scanpos = xsp;
            if (jj_3R_230()) return true;
        }
        if (jj_3R_87()) return true;
        xsp = jj_scanpos;
        if (jj_3R_282()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_283()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_284()) jj_scanpos = xsp;
        if (jj_3R_234()) return true;
        return false;
    }

    private bool jj_3R_125()
    {
        if (jj_3R_157()) return true;
        return false;
    }

    private bool jj_3R_93()
    {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_125()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3R_84()
    {
        if (jj_3R_117()) return true;
        return false;
    }

    private bool jj_3R_83()
    {
        if (jj_scan_token(STRICTFP)) return true;
        return false;
    }

    private bool jj_3R_82()
    {
        if (jj_scan_token(VOLATILE)) return true;
        return false;
    }

    private bool jj_3R_81()
    {
        if (jj_scan_token(TRANSIENT)) return true;
        return false;
    }

    private bool jj_3R_80()
    {
        if (jj_scan_token(NATIVE)) return true;
        return false;
    }

    private bool jj_3R_79()
    {
        if (jj_scan_token(SYNCHRONIZED)) return true;
        return false;
    }

    private bool jj_3R_113()
    {
        if (jj_scan_token(STRING_LITERAL)) return true;
        return false;
    }

    private bool jj_3R_78()
    {
        if (jj_scan_token(ABSTRACT)) return true;
        return false;
    }

    private bool jj_3R_77()
    {
        if (jj_scan_token(FINAL)) return true;
        return false;
    }

    private bool jj_3R_76()
    {
        if (jj_scan_token(PRIVATE)) return true;
        return false;
    }

    private bool jj_3R_75()
    {
        if (jj_scan_token(PROTECTED)) return true;
        return false;
    }

    private bool jj_3R_74()
    {
        if (jj_scan_token(STATIC)) return true;
        return false;
    }

    private bool jj_3R_205()
    {
        if (jj_scan_token(FALSE)) return true;
        return false;
    }

    private bool jj_3R_73()
    {
        if (jj_scan_token(PUBLIC)) return true;
        return false;
    }

    private bool jj_3_8()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_73())
        {
            jj_scanpos = xsp;
            if (jj_3R_74())
            {
                jj_scanpos = xsp;
                if (jj_3R_75())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_76())
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_77())
                        {
                            jj_scanpos = xsp;
                            if (jj_3R_78())
                            {
                                jj_scanpos = xsp;
                                if (jj_3R_79())
                                {
                                    jj_scanpos = xsp;
                                    if (jj_3R_80())
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_3R_81())
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_3R_82())
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_3R_83())
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_84()) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_190()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_204())
        {
            jj_scanpos = xsp;
            if (jj_3R_205()) return true;
        }
        return false;
    }

    private bool jj_3R_204()
    {
        if (jj_scan_token(TRUE)) return true;
        return false;
    }

    private bool jj_3R_107()
    {
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_8()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_72()
    {
        if (jj_3R_117()) return true;
        return false;
    }

    private bool jj_3R_163()
    {
        if (jj_3R_166()) return true;
        return false;
    }

    private bool jj_3_7()
    {
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_72()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(PACKAGE)) return true;
        return false;
    }

    private bool jj_3R_179()
    {
        if (jj_3R_190()) return true;
        return false;
    }

    private bool jj_3_1()
    {
        if (jj_scan_token(LANGLE)) return true;
        if (jj_scan_token(STAR)) return true;
        return false;
    }

    private bool jj_3R_166()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(83))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(88))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(93))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(94))
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_179())
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(60)) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_136()
    {
        if (jj_3R_93()) return true;
        return false;
    }

    private bool jj_3R_135()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3R_134()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3_36()
    {
        if (jj_3R_105()) return true;
        return false;
    }

    private bool jj_3_35()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_104()) return true;
        return false;
    }

    private bool jj_3_33()
    {
        if (jj_3R_103()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(CLASS)) return true;
        return false;
    }

    private bool jj_3R_102()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_34())
        {
            jj_scanpos = xsp;
            if (jj_3_35())
            {
                jj_scanpos = xsp;
                if (jj_3_36())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_134())
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_135())
                        {
                            jj_scanpos = xsp;
                            if (jj_3R_136()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3_34()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(THIS)) return true;
        return false;
    }

    private bool jj_3R_148()
    {
        if (jj_3R_109()) return true;
        return false;
    }

    private bool jj_3R_147()
    {
        if (jj_3R_103()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(CLASS)) return true;
        return false;
    }

    private bool jj_3R_146()
    {
        if (jj_3R_104()) return true;
        return false;
    }

    private bool jj_3R_145()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3_32()
    {
        if (jj_3R_102()) return true;
        return false;
    }

    private bool jj_3R_144()
    {
        if (jj_scan_token(SUPER)) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3R_162()
    {
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3R_143()
    {
        if (jj_3R_166()) return true;
        return false;
    }

    private bool jj_3R_112()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_143())
        {
            jj_scanpos = xsp;
            if (jj_scan_token(72))
            {
                jj_scanpos = xsp;
                if (jj_3R_144())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_145())
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_146())
                        {
                            jj_scanpos = xsp;
                            if (jj_3R_147())
                            {
                                jj_scanpos = xsp;
                                if (jj_3R_148()) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_352()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(117))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(118)) return true;
        }
        return false;
    }

    private bool jj_3R_105()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_95()) return true;
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3R_87()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(151))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(1))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(2))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(3))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(4))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(5))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(7))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(8))
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(9))
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(10))
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(11))
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_scan_token(12))
                                                    {
                                                        jj_scanpos = xsp;
                                                        if (jj_scan_token(81))
                                                        {
                                                            jj_scanpos = xsp;
                                                            if (jj_scan_token(139))
                                                            {
                                                                jj_scanpos = xsp;
                                                                if (jj_scan_token(140))
                                                                {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_scan_token(141))
                                                                    {
                                                                        jj_scanpos = xsp;
                                                                        if (jj_scan_token(142))
                                                                        {
                                                                            jj_scanpos = xsp;
                                                                            if (jj_scan_token(143))
                                                                            {
                                                                                jj_scanpos = xsp;
                                                                                if (jj_scan_token(144)) return true;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3_31()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_101()) return true;
        return false;
    }

    private bool jj_3R_64()
    {
        if (jj_3R_112()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_32()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_333()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_88()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_320()) return true;
        return false;
    }

    private bool jj_3R_332()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_88()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_298()) return true;
        return false;
    }

    private bool jj_3R_330()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_332())
        {
            jj_scanpos = xsp;
            if (jj_3R_333()) return true;
        }
        return false;
    }

    private bool jj_3_30()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_88()) return true;
        if (jj_scan_token(LBRACKET)) return true;
        return false;
    }

    private bool jj_3R_331()
    {
        if (jj_3R_64()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_352()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_65()
    {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private bool jj_3R_133()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_88()) return true;
        if (jj_scan_token(RPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(107))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(106))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(95))
                {
                    jj_scanpos = xsp;
                    if (jj_3R_162())
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(72))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(69))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(59))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_3R_163()) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_132()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_88()) return true;
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_100()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_29())
        {
            jj_scanpos = xsp;
            if (jj_3R_132())
            {
                jj_scanpos = xsp;
                if (jj_3R_133()) return true;
            }
        }
        return false;
    }

    private bool jj_3_29()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_101()) return true;
        return false;
    }

    private bool jj_3_28()
    {
        if (jj_3R_100()) return true;
        return false;
    }

    private bool jj_3_27()
    {
        if (jj_3R_99()) return true;
        return false;
    }

    private bool jj_3R_327()
    {
        if (jj_3R_331()) return true;
        return false;
    }

    private bool jj_3R_326()
    {
        if (jj_3R_330()) return true;
        return false;
    }

    private bool jj_3R_325()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(107))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(106)) return true;
        }
        if (jj_3R_298()) return true;
        return false;
    }

    private bool jj_3R_320()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_325())
        {
            jj_scanpos = xsp;
            if (jj_3R_326())
            {
                jj_scanpos = xsp;
                if (jj_3R_327()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_263()
    {
        if (jj_scan_token(DECR)) return true;
        if (jj_3R_64()) return true;
        return false;
    }

    private bool jj_3R_312()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(119))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(120)) return true;
        }
        if (jj_3R_280()) return true;
        return false;
    }

    private bool jj_3R_321()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(121))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(122))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(126)) return true;
            }
        }
        if (jj_3R_298()) return true;
        return false;
    }

    private bool jj_3_26()
    {
        if (jj_3R_98()) return true;
        return false;
    }

    private bool jj_3R_237()
    {
        if (jj_3R_113()) return true;
        return false;
    }

    private bool jj_3R_262()
    {
        if (jj_scan_token(INCR)) return true;
        if (jj_3R_64()) return true;
        return false;
    }

    private bool jj_3R_311()
    {
        if (jj_3R_320()) return true;
        return false;
    }

    private bool jj_3_25()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(149))
        {
            jj_scanpos = xsp;
            if (jj_3_26())
            {
                jj_scanpos = xsp;
                if (jj_3_27()) return true;
            }
        }
        if (jj_3R_274()) return true;
        return false;
    }

    private bool jj_3R_310()
    {
        if (jj_3R_263()) return true;
        return false;
    }

    private bool jj_3R_309()
    {
        if (jj_3R_262()) return true;
        return false;
    }

    private bool jj_3R_308()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(119))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(120)) return true;
        }
        if (jj_3R_298()) return true;
        return false;
    }

    private bool jj_3R_298()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_308())
        {
            jj_scanpos = xsp;
            if (jj_3R_309())
            {
                jj_scanpos = xsp;
                if (jj_3R_310())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_311()) return true;
                }
            }
        }
        return false;
    }

    /** Generated Token Manager. */
    public CSharpCCParserTokenManager token_source;
    readonly CSharpCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int cc_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    /** Whether we are looking ahead. */
    private bool jj_lookingAhead = false;
    private bool jj_semLA;
    private int cc_gen;
    private readonly int[] cc_la1 = new int[198];
    static private uint[] jj_la1_0;
    static private uint[] jj_la1_1;
    static private uint[] jj_la1_2;
    static private uint[] jj_la1_3;
    static private uint[] jj_la1_4;
    static CSharpCCParser()
    {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
        jj_la1_init_4();
    }
    private static void jj_la1_init_0()
    {
        jj_la1_0 = new uint[] { 0x40000fe0, 0xe, 0xe, 0x0, 0x0, 0x40000fe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x780, 0x0, 0x0, 0x0, 0x2, 0x0, 0x40001fbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1fbe, 0x0, 0x10000000, 0x0, 0x0, 0x10000000, 0x0, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10001fbe, 0x0, 0x50001fbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50001fbe, 0x0, 0x40000000, 0x50001fbe, 0x0, 0x0, 0x0, 0x40001fbe, 0x40001fbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0001fbe, 0x40001fbe, 0x0, 0x40000000, 0x0, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000000, 0x0, 0x40000000, 0x0, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40001fbe, 0x0, 0x0, 0x40001fbe, 0x1fbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1fbe, 0x0, 0x0, 0x0, 0x40001fbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0001fbe, 0x0, 0xf0001fbe, 0xe0001fbe, 0x0, 0x0, 0x0, 0x40001fbe, 0x0, 0xf0001fbe, 0x0, 0x0, 0x50001fbe, 0x40001fbe, 0x40001fbe, 0x50001fbe, 0x40001fbe, 0x0, 0x1fbe, 0x1fbe, 0x40001fbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1fbe, 0x0, 0x40001fbe, 0x0, 0x50000000, 0x0, 0x40000000, 0x50000000, };
    }
    private static void jj_la1_init_1()
    {
        jj_la1_1 = new uint[] { 0xc2810229, 0x0, 0x0, 0x2000, 0x0, 0xc2810229, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0000000, 0xc0000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1a812229, 0x4, 0x8000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000, 0xc5004810, 0x0, 0x0, 0xc4004000, 0x1000810, 0xc5004810, 0x1000010, 0x0, 0x1000, 0x100000, 0x0, 0x0, 0x100000, 0xc4004000, 0x0, 0xc7814a39, 0x0, 0x0, 0x0, 0x0, 0x1000, 0x0, 0xc7814a39, 0x1000810, 0x2810229, 0xc7814a39, 0x0, 0x0, 0x0, 0x1a812229, 0x1a812229, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc6814209, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdf8b6379, 0x1a812229, 0x0, 0x2810209, 0x0, 0x2810209, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x2810209, 0x1000, 0x2810209, 0x1000, 0x2810209, 0x0, 0x20, 0x0, 0x0, 0x2810229, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1a812229, 0x0, 0x0, 0x1a812229, 0x18002000, 0x0, 0x0, 0x0, 0x0, 0x18002000, 0x0, 0x0, 0x10002000, 0x2000, 0x1a812229, 0x0, 0x0, 0x0, 0x0, 0x8000000, 0x0, 0x0, 0x1a8b2369, 0x0, 0xdf8b6379, 0x1b8b2379, 0x0, 0x0, 0x0, 0x1a812229, 0x82, 0xdf8b6379, 0x82, 0x400, 0xde816229, 0x1a812229, 0x1a812229, 0xde816229, 0x1a812229, 0x0, 0x0, 0x0, 0x1a812229, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x8000, 0x0, 0x0, 0x0, 0x1a812229, 0x0, 0xc7814a19, 0x80, 0x3810a19, 0xc7814a19, };
    }
    private static void jj_la1_init_2()
    {
        jj_la1_2 = new uint[] { 0x24005, 0x8, 0x8, 0xc0081000, 0x0, 0x24005, 0x0, 0x400, 0x0, 0x400, 0x0, 0x400, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80000, 0xe10a5124, 0x0, 0x0, 0x0, 0x0, 0x40000000, 0x0, 0x0, 0x2000, 0x80000000, 0x0, 0x0, 0x40000000, 0x0, 0x0, 0xc0000000, 0x80000, 0x0, 0x0, 0x0, 0xc0000000, 0x0, 0x0, 0x40000000, 0x0, 0x20000, 0x0, 0x8899, 0x8, 0x0, 0x8899, 0x0, 0x8899, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28899, 0x0, 0x2c89d, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x2c89d, 0x0, 0x24004, 0x2c89d, 0x0, 0x0, 0x0, 0xe10a5124, 0xe10a5124, 0x0, 0x0, 0x400, 0x0, 0x0, 0x0, 0x2889d, 0x0, 0x0, 0x0, 0x0, 0x400, 0xe10bfbff, 0xe10a5124, 0x8, 0x4, 0x20000, 0x20004, 0x0, 0x0, 0x40000, 0x0, 0x0, 0x0, 0x0, 0x20004, 0x20, 0x20004, 0x20, 0x4, 0x0, 0x0, 0x0, 0x0, 0x24004, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe10a5124, 0x0, 0x0, 0xe10a5124, 0xe10a1120, 0x80000000, 0x0, 0x0, 0x80000000, 0xe1081120, 0x20000, 0x80000000, 0x61081000, 0x1000, 0xe10a5124, 0x0, 0x0, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0xe10b73e6, 0x0, 0xe10bfbff, 0xe10b73e6, 0x0, 0x0, 0x0, 0xe10a5124, 0x0, 0xe10bfbff, 0x0, 0x0, 0xe10ad9bd, 0xe10a5124, 0xe10a5124, 0xe10ad9bd, 0xe10a5124, 0x0, 0x20000, 0x20000, 0xe10a5124, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0x20000, 0x0, 0xe10a5124, 0x0, 0x2889d, 0x0, 0x20004, 0x2889d, };
    }
    private static void jj_la1_init_3()
    {
        jj_la1_3 = new uint[] { 0x4200, 0x0, 0x0, 0x0, 0x40, 0x4200, 0x40, 0x0, 0x40, 0x0, 0x40, 0x0, 0x0, 0x0, 0x40, 0x200, 0x200, 0x8, 0x10000000, 0x2, 0x0, 0x2, 0x2000, 0x10000000, 0x0, 0x0, 0x1e04c00, 0x0, 0x0, 0x200, 0x80, 0x200, 0x2801000, 0x2801000, 0xa, 0x0, 0x0, 0x0, 0x0, 0x200, 0x10000000, 0xa08, 0x0, 0x40, 0x2801002, 0x2801002, 0xa08, 0x800, 0x40, 0x0, 0x1000000, 0x0, 0x0, 0x20, 0x0, 0x80, 0x0, 0x0, 0x20, 0x0, 0x200, 0x0, 0x0, 0x40, 0x40, 0x0, 0x0, 0x40, 0x4222, 0x20, 0x0, 0x2, 0x40, 0x0, 0x8000000, 0x4222, 0x0, 0x4200, 0x4220, 0x40, 0x100, 0x8, 0x1e04c02, 0x1e04c02, 0x40, 0x200, 0x0, 0x22, 0x8, 0x40, 0x4000, 0xa000000, 0xa000000, 0xa000000, 0x200, 0x0, 0x604022, 0x4000, 0x0, 0x0, 0x0, 0x4000, 0x40, 0x0, 0x0, 0x4000, 0x4080, 0x40, 0x0, 0x5000, 0x0, 0x5000, 0x0, 0x0, 0x2000000, 0x0, 0xa000000, 0xa000000, 0x4000, 0x40, 0x80000100, 0x1000, 0x80000, 0x100000, 0x10000000, 0x20000000, 0x8000000, 0x48000, 0x48000, 0x0, 0x30200, 0x30200, 0x0, 0x1800000, 0x1800000, 0x46000000, 0x46000000, 0x1800000, 0x1e04c00, 0xc00, 0xc00, 0x4000, 0xc00, 0x0, 0x600000, 0x600000, 0x0, 0x0, 0x0, 0x88, 0x0, 0x0, 0x1e04c00, 0x40, 0x200, 0x2, 0x8, 0x0, 0x8, 0x8, 0x604022, 0x2000, 0x604022, 0x604022, 0x40, 0x80600100, 0x80600100, 0x604000, 0x0, 0x604022, 0x0, 0x0, 0x604000, 0x1e04c00, 0x604000, 0x604020, 0x604000, 0x40, 0x0, 0x0, 0x1e04c00, 0xa000000, 0xa000000, 0xa000000, 0x10000000, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x1e04c02, 0x40, 0x4020, 0x0, 0x4000, 0x4020, };
    }
    private static void jj_la1_init_4()
    {
        jj_la1_4 = new uint[] { 0x800000, 0x800000, 0x800000, 0x0, 0x0, 0x800000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81f800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400, 0x800400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81f800, 0x0, 0x400000, 0x0, 0x0, 0x400000, 0x400000, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc1f800, 0x0, 0xc1f800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc1f800, 0x0, 0x800000, 0xc1f800, 0x0, 0x0, 0x0, 0x81f800, 0x81f800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc00000, 0x0, 0x20000, 0x20000, 0x0, 0x0, 0xc1f800, 0x81f800, 0x0, 0x0, 0x0, 0x800000, 0x0, 0x20000, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x800000, 0x0, 0x800000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x800000, 0x0, 0x1c007f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200, 0x200, 0x200000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81f800, 0x0, 0x0, 0x81f800, 0x81f800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81f800, 0x0, 0x0, 0x0, 0x81f800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81f800, 0x0, 0xc1f800, 0x81f800, 0x0, 0x1c007f, 0x1c007f, 0x81f800, 0x0, 0xc1f800, 0x0, 0x0, 0xc1f800, 0x81f800, 0x81f800, 0xc1f800, 0x81f800, 0x0, 0x81f800, 0x81f800, 0x81f800, 0x0, 0x20000, 0x20000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400000, 0x81f800, 0x0, 0xc1f800, 0x0, 0xc00000, 0x0, 0xc00000, 0xc00000, };
    }
    private readonly JJCalls[] jj_2_rtns = new JJCalls[49];
    private bool jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public CSharpCCParser(Stream stream)
        : this(stream, null)
    {
    }
    /** Constructor with InputStream and supplied encoding */
    public CSharpCCParser(Stream stream, Encoding encoding)
    {
        try { jj_input_stream = new CSharpCharStream(stream, encoding, 1, 1); } catch (Exception e) { throw new Exception(e.Message, e); }
        token_source = new CSharpCCParserTokenManager(jj_input_stream);
        token = new Token();
        cc_ntk = -1;
        cc_gen = 0;
        for (int i = 0; i < 198; i++) cc_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(Stream stream)
    {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(Stream stream, Encoding encoding)
    {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch (Exception e) { throw new Exception(e.Message, e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        cc_ntk = -1;
        cc_gen = 0;
        for (int i = 0; i < 198; i++) cc_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public CSharpCCParser(TextReader stream)
    {
        jj_input_stream = new CSharpCharStream(stream, 1, 1);
        token_source = new CSharpCCParserTokenManager(jj_input_stream);
        token = new Token();
        cc_ntk = -1;
        cc_gen = 0;
        for (int i = 0; i < 198; i++) cc_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(TextReader stream)
    {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        cc_ntk = -1;
        cc_gen = 0;
        for (int i = 0; i < 198; i++) cc_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public CSharpCCParser(CSharpCCParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        cc_ntk = -1;
        cc_gen = 0;
        for (int i = 0; i < 198; i++) cc_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(CSharpCCParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        cc_ntk = -1;
        cc_gen = 0;
        for (int i = 0; i < 198; i++) cc_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token cc_consume_token(int kind)
    {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        cc_ntk = -1;
        if (token.kind == kind)
        {
            cc_gen++;
            if (++jj_gc > 100)
            {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.Length; i++)
                {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null)
                    {
                        if (c.gen < cc_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    class LookaheadSuccess : Error { }
    private readonly LookaheadSuccess jj_ls = new();
    private bool jj_scan_token(int kind)
    {
        if (jj_scanpos == jj_lastpos)
        {
            jj_la--;
            if (jj_scanpos.next == null)
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            }
            else
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        }
        else
        {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan)
        {
            int i = 0; Token tok = token;
            while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /** Get the next Token. */
    public Token getNextToken()
    {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        cc_ntk = -1;
        cc_gen++;
        return token;
    }

    /** Get the specific Token. */
    public Token GetToken(int index)
    {
        Token t = jj_lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++)
        {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_()
    {
        if ((jj_nt = token.next) == null)
            return (cc_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (cc_ntk = jj_nt.kind);
    }

    private readonly List<int[]> jj_expentries = new();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private readonly int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos)
    {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1)
        {
            jj_lasttokens[jj_endpos++] = kind;
        }
        else if (jj_endpos != 0)
        {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++)
            {
                jj_expentry[i] = jj_lasttokens[i];
            }
        jj_entries_loop:
            foreach (var oldentry in jj_expentries)
            {
                if (oldentry.Length == jj_expentry.Length)
                {
                    for (int i = 0; i < jj_expentry.Length; i++)
                    {
                        if (oldentry[i] != jj_expentry[i])
                        {
                            goto jj_entries_loop_retry;
                        }
                    }
                    jj_expentries.Add(jj_expentry);
                    break;
                }

            jj_entries_loop_retry:
                ;
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;

        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException()
    {
        jj_expentries.Clear();
        bool[] la1tokens = new bool[155];
        if (jj_kind >= 0)
        {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 198; i++)
        {
            if (cc_la1[i] == cc_gen)
            {
                for (int j = 0; j < 32; j++)
                {
                    if ((jj_la1_0[i] & (1 << j)) != 0)
                    {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0)
                    {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0)
                    {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0)
                    {
                        la1tokens[96 + j] = true;
                    }
                    if ((jj_la1_4[i] & (1 << j)) != 0)
                    {
                        la1tokens[128 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 155; i++)
        {
            if (la1tokens[i])
            {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.Add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.Count][];
        for (int i = 0; i < jj_expentries.Count; i++)
        {
            exptokseq[i] = jj_expentries[i];
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    public void enable_tracing()
    {
    }

    /** Disable tracing. */
    public void disable_tracing()
    {
    }

    private void jj_rescan_token()
    {
        jj_rescan = true;
        for (int i = 0; i < 49; i++)
        {
            try
            {
                JJCalls p = jj_2_rtns[i];
                do
                {
                    if (p.gen > cc_gen)
                    {
                        jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
                        switch (i)
                        {
                            case 0: jj_3_1(); break;
                            case 1: jj_3_2(); break;
                            case 2: jj_3_3(); break;
                            case 3: jj_3_4(); break;
                            case 4: jj_3_5(); break;
                            case 5: jj_3_6(); break;
                            case 6: jj_3_7(); break;
                            case 7: jj_3_8(); break;
                            case 8: jj_3_9(); break;
                            case 9: jj_3_10(); break;
                            case 10: jj_3_11(); break;
                            case 11: jj_3_12(); break;
                            case 12: jj_3_13(); break;
                            case 13: jj_3_14(); break;
                            case 14: jj_3_15(); break;
                            case 15: jj_3_16(); break;
                            case 16: jj_3_17(); break;
                            case 17: jj_3_18(); break;
                            case 18: jj_3_19(); break;
                            case 19: jj_3_20(); break;
                            case 20: jj_3_21(); break;
                            case 21: jj_3_22(); break;
                            case 22: jj_3_23(); break;
                            case 23: jj_3_24(); break;
                            case 24: jj_3_25(); break;
                            case 25: jj_3_26(); break;
                            case 26: jj_3_27(); break;
                            case 27: jj_3_28(); break;
                            case 28: jj_3_29(); break;
                            case 29: jj_3_30(); break;
                            case 30: jj_3_31(); break;
                            case 31: jj_3_32(); break;
                            case 32: jj_3_33(); break;
                            case 33: jj_3_34(); break;
                            case 34: jj_3_35(); break;
                            case 35: jj_3_36(); break;
                            case 36: jj_3_37(); break;
                            case 37: jj_3_38(); break;
                            case 38: jj_3_39(); break;
                            case 39: jj_3_40(); break;
                            case 40: jj_3_41(); break;
                            case 41: jj_3_42(); break;
                            case 42: jj_3_43(); break;
                            case 43: jj_3_44(); break;
                            case 44: jj_3_45(); break;
                            case 45: jj_3_46(); break;
                            case 46: jj_3_47(); break;
                            case 47: jj_3_48(); break;
                            case 48: jj_3_49(); break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            }
            catch (LookaheadSuccess ls) { }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla)
    {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > cc_gen)
        {
            if (p.next == null) { p = p.next = new JJCalls(); break; }
            p = p.next;
        }
        p.gen = cc_gen + xla - jj_la; p.first = token; p.arg = xla;
    }

    public class JJCalls
    {
        public int gen;
        public Token first;
        public int arg;
        public JJCalls next;
    }

}
