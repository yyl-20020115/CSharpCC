/* Generated By:JJTree&JavaCC: Do not edit this line. JJTreeParser.java */
namespace org.javacc.jjtree;

public class JJTreeParse: JJTreeParserConstants, JJTreeParserTreeConstants 
{
    protected JJTJJTreeParserState jjtree = new JJTJJTreeParserState();
    void jjtreeOpenNodeScope(Node n)
    {
        ((JJTreeNode)n).setFirstToken(getToken(1));
    }

    void jjtreeCloseNodeScope(Node n)
    {
        ((JJTreeNode)n).setLastToken(getToken(0));
    }


    /**
     * Returns true if the next token is not in the FOLLOW list of "expansion".
     * It is used to decide when the end of an "expansion" has been reached.
     */
    private bool notTailOfExpansionUnit()
    {
        Token t;
        t = getToken(1);
        if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
        return true;
    }

    protected bool isJavaLanguage = true;

    private void eatUptoCloseBrace()
    {
        int b = 1;
        while (getToken(1).kind != RBRACE || --b != 0)
        {
            if (getToken(1).kind == EOF) break;
            if (getNextToken().kind == LBRACE) b++;
        }
    }

    /************************************************
     * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
     ************************************************/
    public void javacc_input()
    {
        /*@bgen(jjtree) Grammar */
        ASTGrammar jjtn000 = new ASTGrammar(JJTGRAMMAR);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000); Token t;
        try
        {
            javacc_options();
            // TODO :: CBA --  Require Unification of output language specific processing into a single Enum class
            isJavaLanguage = JJTreeOptions.isOutputLanguageJava();
            ASTCompilationUnit jjtn001 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
            bool jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try
            {
                jj_consume_token(_PARSER_BEGIN);
                jj_consume_token(LPAREN);
                t = identifier();
                jj_consume_token(RPAREN);
                JJTreeGlobals.parserName = t.image;

                if (!isJavaLanguage)
                {
                    while (getToken(1).kind != _PARSER_END)
                    {
                        getNextToken();
                    }
                }
                CompilationUnit();
                jj_consume_token(_PARSER_END);
                jj_consume_token(LPAREN);
                identifier();
                jj_consume_token(RPAREN);
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtreeCloseNodeScope(jjtn001);
                if (JJTreeOptions.getNodePackage().Equals(""))
                {
                    JJTreeGlobals.nodePackageName = JJTreeGlobals.packageName;
                }
                else
                {
                    JJTreeGlobals.nodePackageName = JJTreeOptions.getNodePackage();
                }
            }
            catch (Exception jjte001)
            {
                if (jjtc001)
                {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if (jjte001 is RuntimeException)
                {
                    { if (true) throw (RuntimeException)jjte001; }
                }
                if (jjte001 is ParseException)
                {
                    { if (true) throw (ParseException)jjte001; }
                }
                { if (true) throw (Error)jjte001; }
            }
            finally
            {
                if (jjtc001)
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
            ASTProductions jjtn002 = new ASTProductions(JJTPRODUCTIONS);
            bool jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
            try
            {
            label_1:
                while (true)
                {
                    production();
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CONST:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case PRIVATE:
                        case PROTECTED:
                        case PUBLIC:
                        case SHORT:
                        case VOID:
                        case LT:
                        case 132:
                        case IDENTIFIER:
                            ;
                            break;
                        default:
                            jj_la1[0] = jj_gen;
                            break label_1;
                    }
                }
            }
            catch (Exception jjte002)
            {
                if (jjtc002)
                {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if (jjte002 is RuntimeException)
                {
                    { if (true) throw (RuntimeException)jjte002; }
                }
                if (jjte002 is ParseException)
                {
                    { if (true) throw (ParseException)jjte002; }
                }
                { if (true) throw (Error)jjte002; }
            }
            finally
            {
                if (jjtc002)
                {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtreeCloseNodeScope(jjtn002);
                }
            }
            jj_consume_token(0);
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void javacc_options()
    {
        if (getToken(1).image.Equals("options"))
        {
            ASTOptions jjtn001 = new ASTOptions(JJTOPTIONS);
            bool jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try
            {
                jj_consume_token(IDENTIFIER);
                jj_consume_token(LBRACE);
            label_2:
                while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case STATIC:
                        case IDENTIFIER:
                            ;
                            break;
                        default:
                            jj_la1[1] = jj_gen;
                            break label_2;
                    }
                    option_binding();
                }
                jj_consume_token(RBRACE);
            }
            catch (Exception jjte001)
            {
                if (jjtc001)
                {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if (jjte001 is RuntimeException)
                {
                    { if (true) throw (RuntimeException)jjte001; }
                }
                if (jjte001 is ParseException)
                {
                    { if (true) throw (ParseException)jjte001; }
                }
                { if (true) throw (Error)jjte001; }
            }
            finally
            {
                if (jjtc001)
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
        else
        {
            ;
        }
        JJTreeOptions.normalize();
    }

    public void option_binding()
    {
        /*@bgen(jjtree) OptionBinding */
        ASTOptionBinding jjtn000 = new ASTOptionBinding(JJTOPTIONBINDING);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000); Token o, v;
        try
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case IDENTIFIER:
                    o = jj_consume_token(IDENTIFIER);
                    break;
                case _LOOKAHEAD:
                    o = jj_consume_token(_LOOKAHEAD);
                    break;
                case _IGNORE_CASE:
                    o = jj_consume_token(_IGNORE_CASE);
                    break;
                case STATIC:
                    o = jj_consume_token(STATIC);
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(ASSIGN);
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case INTEGER_LITERAL:
                    v = IntegerLiteral();
                    JJTreeOptions.setInputFileOption(o, v, o.image, (v.image));
                    jjtn000.initialize(o.image, v.image);
                    break;
                case FALSE:
                case TRUE:
                    v = BooleanLiteral();
                    JJTreeOptions.setInputFileOption(o, v, o.image,
                                               Boolean.valueOf(v.image));
                    jjtn000.initialize(o.image, v.image);
                    break;
                case STRING_LITERAL:
                    v = StringLiteral();
                    String vs = TokenUtils.remove_escapes_and_quotes(v, v.image);
                    JJTreeOptions.setInputFileOption(o, v, o.image, (Object)vs);
                    jjtn000.initialize(o.image, vs);
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jj_consume_token(SEMICOLON);
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void production()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _JAVACODE:
                javacode_production();
                break;
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case LT:
                regular_expr_production();
                break;
            case _TOKEN_MGR_DECLS:
                token_manager_decls();
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case VOID:
            case 132:
            case IDENTIFIER:
                bnf_production();
                break;
            default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void javacode_production()
    {
        /*@bgen(jjtree) Javacode */
        ASTJavacode jjtn000 = new ASTJavacode(JJTJAVACODE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000); Token t1, t2;
        ASTJavacode prod;
        ASTNodeDescriptor nd = null;
        String n;
        try
        {
            prod = jjtn000;
            jj_consume_token(_JAVACODE);
            AccessModifier();
            ResultType();
            t1 = identifier();
            FormalParameters();
            if (!isJavaLanguage)
            {
                while (getToken(1).kind != LBRACE)
                {
                    getNextToken();
                }
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case THROWS:
                    jj_consume_token(THROWS);
                    n = Name();
                    prod.throws_list.addElement(n);
                label_3:
                    while (true)
                    {
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[5] = jj_gen;
                                break label_3;
                        }
                        jj_consume_token(COMMA);
                        n = Name();
                        prod.throws_list.addElement(n);
                    }
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case HASH:
                    nd = node_descriptor();
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    ;
            }
            // This is really a Block()
            t2 = jj_consume_token(LBRACE);
            prod.name = t1.image;
            prod.stmBeginLoc = t2;
            if (!isJavaLanguage)
            {
                eatUptoCloseBrace();
            }
            ASTJavacodeBody jjtn001 = new ASTJavacodeBody(JJTJAVACODEBODY);
            bool jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try
            {
            label_4:
                while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case ABSTRACT:
                        case BOOLEAN:
                        case BREAK:
                        case BYTE:
                        case CHAR:
                        case CLASS:
                        case CONST:
                        case CONTINUE:
                        case DO:
                        case DOUBLE:
                        case FALSE:
                        case FINAL:
                        case FLOAT:
                        case FOR:
                        case IF:
                        case INT:
                        case INTERFACE:
                        case LONG:
                        case NATIVE:
                        case NEW:
                        case NULL:
                        case PRIVATE:
                        case PROTECTED:
                        case PUBLIC:
                        case RETURN:
                        case SHORT:
                        case STATIC:
                        case SUPER:
                        case SWITCH:
                        case SYNCHRONIZED:
                        case THIS:
                        case THROW:
                        case TRANSIENT:
                        case TRUE:
                        case TRY:
                        case VOID:
                        case VOLATILE:
                        case WHILE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case LBRACE:
                        case SEMICOLON:
                        case INCR:
                        case DECR:
                        case 129:
                        case 132:
                        case 138:
                        case 139:
                        case IDENTIFIER:
                            ;
                            break;
                        default:
                            jj_la1[8] = jj_gen;
                            break label_4;
                    }
                    BlockStatement();
                }
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtreeCloseNodeScope(jjtn001);
                jjtn001.node_scope = new NodeScope(prod, nd);
            }
            catch (Exception jjte001)
            {
                if (jjtc001)
                {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if (jjte001 is RuntimeException)
                {
                    { if (true) throw (RuntimeException)jjte001; }
                }
                if (jjte001 is ParseException)
                {
                    { if (true) throw (ParseException)jjte001; }
                }
                { if (true) throw (Error)jjte001; }
            }
            finally
            {
                if (jjtc001)
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
            jj_consume_token(RBRACE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            JJTreeGlobals.productions.Add(prod.name, prod);
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void bnf_production()
    {
        /*@bgen(jjtree) BNF */
        ASTBNF jjtn000 = new ASTBNF(JJTBNF);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000); Token t1, t2;
        ASTBNF prod;
        ASTNodeDescriptor nd = null;
        NodeScope ns;
        JJTreeNode eu;
        String n;
        try
        {
            prod = jjtn000;
            AccessModifier();
            ResultType();
            t1 = identifier();
            FormalParameters();
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case THROWS:
                    jj_consume_token(THROWS);
                    n = Name();
                    prod.throws_list.addElement(n);
                label_5:
                    while (true)
                    {
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[9] = jj_gen;
                                break label_5;
                        }
                        jj_consume_token(COMMA);
                        n = Name();
                        prod.throws_list.addElement(n);
                    }
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case HASH:
                    nd = node_descriptor();
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    ;
            }
            jj_consume_token(COLON);
            // This is really a Block()
            t2 = jj_consume_token(LBRACE);
            prod.name = t1.image;
            prod.declBeginLoc = t2;
            ns = new NodeScope(prod, nd);
            if (!isJavaLanguage)
            {
                eatUptoCloseBrace();
            }
            ASTBNFDeclaration jjtn001 = new ASTBNFDeclaration(JJTBNFDECLARATION);
            bool jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try
            {
            label_6:
                while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case ABSTRACT:
                        case BOOLEAN:
                        case BREAK:
                        case BYTE:
                        case CHAR:
                        case CLASS:
                        case CONST:
                        case CONTINUE:
                        case DO:
                        case DOUBLE:
                        case FALSE:
                        case FINAL:
                        case FLOAT:
                        case FOR:
                        case IF:
                        case INT:
                        case INTERFACE:
                        case LONG:
                        case NATIVE:
                        case NEW:
                        case NULL:
                        case PRIVATE:
                        case PROTECTED:
                        case PUBLIC:
                        case RETURN:
                        case SHORT:
                        case STATIC:
                        case SUPER:
                        case SWITCH:
                        case SYNCHRONIZED:
                        case THIS:
                        case THROW:
                        case TRANSIENT:
                        case TRUE:
                        case TRY:
                        case VOID:
                        case VOLATILE:
                        case WHILE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case LBRACE:
                        case SEMICOLON:
                        case INCR:
                        case DECR:
                        case 129:
                        case 132:
                        case 138:
                        case 139:
                        case IDENTIFIER:
                            ;
                            break;
                        default:
                            jj_la1[12] = jj_gen;
                            break label_6;
                    }
                    BlockStatement();
                }
                jjtree.closeNodeScope(jjtn001, true);
                jjtc001 = false;
                jjtreeCloseNodeScope(jjtn001);
                jjtn001.node_scope = ns;
            }
            catch (Exception jjte001)
            {
                if (jjtc001)
                {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if (jjte001 is RuntimeException)
                {
                    { if (true) throw (RuntimeException)jjte001; }
                }
                if (jjte001 is ParseException)
                {
                    { if (true) throw (ParseException)jjte001; }
                }
                { if (true) throw (Error)jjte001; }
            }
            finally
            {
                if (jjtc001)
                {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
            jj_consume_token(RBRACE);
            jj_consume_token(LBRACE);
            ASTBNFNodeScope jjtn002 = new ASTBNFNodeScope(JJTBNFNODESCOPE);
            bool jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
            try
            {
                eu = expansion_choices(prod);
                jjtree.closeNodeScope(jjtn002, true);
                jjtc002 = false;
                jjtreeCloseNodeScope(jjtn002);
                jjtn002.node_scope = ns;
                jjtn002.expansion_unit = eu;
            }
            catch (Exception jjte002)
            {
                if (jjtc002)
                {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                }
                else
                {
                    jjtree.popNode();
                }
                if (jjte002 is RuntimeException)
                {
                    { if (true) throw (RuntimeException)jjte002; }
                }
                if (jjte002 is ParseException)
                {
                    { if (true) throw (ParseException)jjte002; }
                }
                { if (true) throw (Error)jjte002; }
            }
            finally
            {
                if (jjtc002)
                {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtreeCloseNodeScope(jjtn002);
                }
            }
            jj_consume_token(RBRACE);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            JJTreeGlobals.productions.Add(prod.name, prod);
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void AccessModifier()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case PUBLIC:
                        jj_consume_token(PUBLIC);
                        break;
                    case PROTECTED:
                        jj_consume_token(PROTECTED);
                        break;
                    case PRIVATE:
                        jj_consume_token(PRIVATE);
                        break;
                    default:
                        jj_la1[13] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[14] = jj_gen;
                ;
        }
    }

    public void regular_expr_production()
    {
        /*@bgen(jjtree) RE */
        ASTRE jjtn000 = new ASTRE(JJTRE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LT:
                    if (jj_2_1(2))
                    {
                        jj_consume_token(LT);
                        jj_consume_token(STAR);
                        jj_consume_token(GT);
                    }
                    else
                    {
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case LT:
                                jj_consume_token(LT);
                                jj_consume_token(IDENTIFIER);
                            label_7:
                                while (true)
                                {
                                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                                    {
                                        case COMMA:
                                            ;
                                            break;
                                        default:
                                            jj_la1[15] = jj_gen;
                                            break label_7;
                                    }
                                    jj_consume_token(COMMA);
                                    jj_consume_token(IDENTIFIER);
                                }
                                jj_consume_token(GT);
                                break;
                            default:
                                jj_la1[16] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    ;
            }
            regexpr_kind();
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LBRACKET:
                    jj_consume_token(LBRACKET);
                    jj_consume_token(_IGNORE_CASE);
                    jj_consume_token(RBRACKET);
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    ;
            }
            jj_consume_token(COLON);
            jj_consume_token(LBRACE);
            regexpr_spec();
        label_8:
            while (true)
            {
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case BIT_OR:
                        ;
                        break;
                    default:
                        jj_la1[19] = jj_gen;
                        break label_8;
                }
                jj_consume_token(BIT_OR);
                regexpr_spec();
            }
            jj_consume_token(RBRACE);
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void token_manager_decls()
    {
        /*@bgen(jjtree) TokenDecls */
        ASTTokenDecls jjtn000 = new ASTTokenDecls(JJTTOKENDECLS);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
            jj_consume_token(_TOKEN_MGR_DECLS);
            jj_consume_token(COLON);
            if (!isJavaLanguage)
            {
                getNextToken(); // eat { 
                eatUptoCloseBrace();
                getNextToken(); // eat } 
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LBRACE:
                    ClassOrInterfaceBody();
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    ;
            }
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void regexpr_kind()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _TOKEN:
                jj_consume_token(_TOKEN);
                break;
            case _SPECIAL_TOKEN:
                jj_consume_token(_SPECIAL_TOKEN);
                break;
            case _SKIP:
                jj_consume_token(_SKIP);
                break;
            case _MORE:
                jj_consume_token(_MORE);
                break;
            default:
                jj_la1[21] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void regexpr_spec()
    {
        /*@bgen(jjtree) RESpec */
        ASTRESpec jjtn000 = new ASTRESpec(JJTRESPEC);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
            regular_expression();
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LBRACE:
                    Block();
                    break;
                default:
                    jj_la1[22] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COLON:
                    jj_consume_token(COLON);
                    jj_consume_token(IDENTIFIER);
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    ;
            }
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public JJTreeNode expansion_choices(ASTProduction p)
    {
        /*@bgen(jjtree) #BNFChoice(> 1) */
        ASTBNFChoice jjtn000 = new ASTBNFChoice(JJTBNFCHOICE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
            expansion(p);
        label_9:
            while (true)
            {
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case BIT_OR:
                        ;
                        break;
                    default:
                        jj_la1[24] = jj_gen;
                        break label_9;
                }
                jj_consume_token(BIT_OR);
                expansion(p);
            }
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            { if (true) return (JJTreeNode)jjtree.peekNode(); }
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
        throw new Error("Missing return statement in function");
    }

    public void expansion(ASTProduction p)
    {
        /*@bgen(jjtree) #BNFSequence(> 1) */
        ASTBNFSequence jjtn000 = new ASTBNFSequence(JJTBNFSEQUENCE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000); JJTreeNode eu;
        ASTNodeDescriptor nd = null;
        try
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                    ASTBNFLookahead jjtn001 = new ASTBNFLookahead(JJTBNFLOOKAHEAD);
                    bool jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                    try
                    {
                        jj_consume_token(_LOOKAHEAD);
                        jj_consume_token(LPAREN);
                        local_lookahead(p);
                        jj_consume_token(RPAREN);
                    }
                    catch (Exception jjte001)
                    {
                        if (jjtc001)
                        {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        }
                        else
                        {
                            jjtree.popNode();
                        }
                        if (jjte001 is RuntimeException)
                        {
                            { if (true) throw (RuntimeException)jjte001; }
                        }
                        if (jjte001 is ParseException)
                        {
                            { if (true) throw (ParseException)jjte001; }
                        }
                        { if (true) throw (Error)jjte001; }
                    }
                    finally
                    {
                        if (jjtc001)
                        {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtreeCloseNodeScope(jjtn001);
                        }
                    }
                    break;
                default:
                    jj_la1[25] = jj_gen;
                    ;
            }
        label_10:
            while (true)
            {
                ASTExpansionNodeScope jjtn002 = new ASTExpansionNodeScope(JJTEXPANSIONNODESCOPE);
                bool jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
                try
                {
                    eu = expansion_unit(p);
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case HASH:
                            nd = node_descriptor();
                            break;
                        default:
                            jj_la1[26] = jj_gen;
                            ;
                    }
                    jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                    jjtc002 = false;
                    jjtreeCloseNodeScope(jjtn002);
                    if (jjtree.nodeCreated())
                    {
                        jjtn002.node_scope = new NodeScope(p, nd);
                        jjtn002.expansion_unit = eu;
                    }
                }
                catch (Exception jjte002)
                {
                    if (jjtc002)
                    {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if (jjte002 is RuntimeException)
                    {
                        { if (true) throw (RuntimeException)jjte002; }
                    }
                    if (jjte002 is ParseException)
                    {
                        { if (true) throw (ParseException)jjte002; }
                    }
                    { if (true) throw (Error)jjte002; }
                }
                finally
                {
                    if (jjtc002)
                    {
                        jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                        jjtreeCloseNodeScope(jjtn002);
                    }
                }
                if (notTailOfExpansionUnit())
                {
                    ;
                }
                else
                {
                    break label_10;
                }
            }
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void local_lookahead(ASTProduction p)
    {
        bool commaAtEnd = false, emptyLA = true;
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case INTEGER_LITERAL:
                IntegerLiteral();
                emptyLA = false;
                break;
            default:
                jj_la1[27] = jj_gen;
                ;
        }
        if (!emptyLA && (getToken(1).kind != RPAREN))
        {
            jj_consume_token(COMMA);
            commaAtEnd = true;
        }
        else
        {
            ;
        }
        if (getToken(1).kind != RPAREN && getToken(1).kind != LBRACE)
        {
            expansion_choices(p);
            emptyLA = false; commaAtEnd = false;
        }
        else
        {
            ;
        }
        if (!emptyLA && !commaAtEnd && (getToken(1).kind != RPAREN))
        {
            jj_consume_token(COMMA);
            commaAtEnd = true;
        }
        else
        {
            ;
        }
        if (emptyLA || commaAtEnd)
        {
            jj_consume_token(LBRACE);
            if (!isJavaLanguage)
            {
                eatUptoCloseBrace();
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                case 132:
                case IDENTIFIER:
                    Expression();
                    break;
                default:
                    jj_la1[28] = jj_gen;
                    ;
            }
            jj_consume_token(RBRACE);
        }
        else
        {
            ;
        }
    }

    public JJTreeNode expansion_unit(ASTProduction p)
    {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
                ASTBNFLookahead jjtn001 = new ASTBNFLookahead(JJTBNFLOOKAHEAD);
                bool jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try
                {
                    jj_consume_token(_LOOKAHEAD);
                    jj_consume_token(LPAREN);
                    local_lookahead(p);
                    jj_consume_token(RPAREN);
                }
                catch (Exception jjte001)
                {
                    if (jjtc001)
                    {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if (jjte001 is RuntimeException)
                    {
                        { if (true) throw (RuntimeException)jjte001; }
                    }
                    if (jjte001 is ParseException)
                    {
                        { if (true) throw (ParseException)jjte001; }
                    }
                    { if (true) throw (Error)jjte001; }
                }
                finally
                {
                    if (jjtc001)
                    {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            case LBRACE:
                ASTBNFAction jjtn002 = new ASTBNFAction(JJTBNFACTION);
                bool jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
                try
                {
                    Block();
                }
                catch (Exception jjte002)
                {
                    if (jjtc002)
                    {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if (jjte002 is RuntimeException)
                    {
                        { if (true) throw (RuntimeException)jjte002; }
                    }
                    if (jjte002 is ParseException)
                    {
                        { if (true) throw (ParseException)jjte002; }
                    }
                    { if (true) throw (Error)jjte002; }
                }
                finally
                {
                    if (jjtc002)
                    {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtreeCloseNodeScope(jjtn002);
                    }
                }
                break;
            case LBRACKET:
                ASTBNFZeroOrOne jjtn003 = new ASTBNFZeroOrOne(JJTBNFZEROORONE);
                bool jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtreeOpenNodeScope(jjtn003);
                try
                {
                    jj_consume_token(LBRACKET);
                    expansion_choices(p);
                    jj_consume_token(RBRACKET);
                }
                catch (Exception jjte003)
                {
                    if (jjtc003)
                    {
                        jjtree.clearNodeScope(jjtn003);
                        jjtc003 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if (jjte003 is RuntimeException)
                    {
                        { if (true) throw (RuntimeException)jjte003; }
                    }
                    if (jjte003 is ParseException)
                    {
                        { if (true) throw (ParseException)jjte003; }
                    }
                    { if (true) throw (Error)jjte003; }
                }
                finally
                {
                    if (jjtc003)
                    {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtreeCloseNodeScope(jjtn003);
                    }
                }
                break;
            case TRY:
                ASTBNFTryBlock jjtn004 = new ASTBNFTryBlock(JJTBNFTRYBLOCK);
                bool jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtreeOpenNodeScope(jjtn004);
                try
                {
                    jj_consume_token(TRY);
                    jj_consume_token(LBRACE);
                    if (!isJavaLanguage)
                    {
                        eatUptoCloseBrace();
                    }
                    if (jj_2_2(1))
                    {
                        expansion_choices(p);
                    }
                    else
                    {
                        ;
                    }
                    jj_consume_token(RBRACE);
                label_11:
                    while (true)
                    {
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case CATCH:
                                ;
                                break;
                            default:
                                jj_la1[29] = jj_gen;
                                break label_11;
                        }
                        jj_consume_token(CATCH);
                        jj_consume_token(LPAREN);
                        Name();
                        jj_consume_token(IDENTIFIER);
                        jj_consume_token(RPAREN);
                        Block();
                    }
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case FINALLY:
                            jj_consume_token(FINALLY);
                            Block();
                            break;
                        default:
                            jj_la1[30] = jj_gen;
                            ;
                    }
                }
                catch (Exception jjte004)
                {
                    if (jjtc004)
                    {
                        jjtree.clearNodeScope(jjtn004);
                        jjtc004 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if (jjte004 is RuntimeException)
                    {
                        { if (true) throw (RuntimeException)jjte004; }
                    }
                    if (jjte004 is ParseException)
                    {
                        { if (true) throw (ParseException)jjte004; }
                    }
                    { if (true) throw (Error)jjte004; }
                }
                finally
                {
                    if (jjtc004)
                    {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtreeCloseNodeScope(jjtn004);
                    }
                }
                break;
            default:
                jj_la1[34] = jj_gen;
                if (jj_2_4(2147483647))
                {
                    ASTBNFAssignment jjtn006 = new ASTBNFAssignment(JJTBNFASSIGNMENT);
                    bool jjtc006 = true;
                    jjtree.openNodeScope(jjtn006);
                    jjtreeOpenNodeScope(jjtn006);
                    try
                    {
                        if (jj_2_3(2147483647))
                        {
                            PrimaryExpression();
                            jj_consume_token(ASSIGN);
                        }
                        else
                        {
                            ;
                        }
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case STRING_LITERAL:
                            case LT:
                                regular_expression();
                                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                                {
                                    case DOT:
                                        jj_consume_token(DOT);
                                        t = jj_consume_token(IDENTIFIER);
                                        break;
                                    default:
                                        jj_la1[31] = jj_gen;
                                        ;
                                }
                                break;
                            case IDENTIFIER:
                                ASTBNFNonTerminal jjtn005 = new ASTBNFNonTerminal(JJTBNFNONTERMINAL);
                                bool jjtc005 = true;
                                jjtree.openNodeScope(jjtn005);
                                jjtreeOpenNodeScope(jjtn005);
                                try
                                {
                                    identifier();
                                    Arguments();
                                }
                                catch (Exception jjte005)
                                {
                                    if (jjtc005)
                                    {
                                        jjtree.clearNodeScope(jjtn005);
                                        jjtc005 = false;
                                    }
                                    else
                                    {
                                        jjtree.popNode();
                                    }
                                    if (jjte005 is RuntimeException)
                                    {
                                        { if (true) throw (RuntimeException)jjte005; }
                                    }
                                    if (jjte005 is ParseException)
                                    {
                                        { if (true) throw (ParseException)jjte005; }
                                    }
                                    { if (true) throw (Error)jjte005; }
                                }
                                finally
                                {
                                    if (jjtc005)
                                    {
                                        jjtree.closeNodeScope(jjtn005, true);
                                        jjtreeCloseNodeScope(jjtn005);
                                    }
                                }
                                break;
                            default:
                                jj_la1[32] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
                    catch (Exception jjte006)
                    {
                        if (jjtc006)
                        {
                            jjtree.clearNodeScope(jjtn006);
                            jjtc006 = false;
                        }
                        else
                        {
                            jjtree.popNode();
                        }
                        if (jjte006 is RuntimeException)
                        {
                            { if (true) throw (RuntimeException)jjte006; }
                        }
                        if (jjte006 is ParseException)
                        {
                            { if (true) throw (ParseException)jjte006; }
                        }
                        { if (true) throw (Error)jjte006; }
                    }
                    finally
                    {
                        if (jjtc006)
                        {
                            jjtree.closeNodeScope(jjtn006, jjtree.nodeArity() > 1);
                            jjtreeCloseNodeScope(jjtn006);
                        }
                    }
                }
                else
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case LPAREN:
                            t = jj_consume_token(LPAREN);
                            expansion_choices(p);
                            jj_consume_token(RPAREN);
                            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                            {
                                case PLUS:
                                    ASTBNFOneOrMore jjtn007 = new ASTBNFOneOrMore(JJTBNFONEORMORE);
                                    bool jjtc007 = true;
                                    jjtree.openNodeScope(jjtn007);
                                    jjtreeOpenNodeScope(jjtn007);
                                    try
                                    {
                                        jj_consume_token(PLUS);
                                    }
                                    finally
                                    {
                                        if (jjtc007)
                                        {
                                            jjtree.closeNodeScope(jjtn007, 1);
                                            jjtreeCloseNodeScope(jjtn007);
                                        }
                                    }
                                    break;
                                case STAR:
                                    ASTBNFZeroOrMore jjtn008 = new ASTBNFZeroOrMore(JJTBNFZEROORMORE);
                                    bool jjtc008 = true;
                                    jjtree.openNodeScope(jjtn008);
                                    jjtreeOpenNodeScope(jjtn008);
                                    try
                                    {
                                        jj_consume_token(STAR);
                                    }
                                    finally
                                    {
                                        if (jjtc008)
                                        {
                                            jjtree.closeNodeScope(jjtn008, 1);
                                            jjtreeCloseNodeScope(jjtn008);
                                        }
                                    }
                                    break;
                                case HOOK:
                                    ASTBNFZeroOrOne jjtn009 = new ASTBNFZeroOrOne(JJTBNFZEROORONE);
                                    bool jjtc009 = true;
                                    jjtree.openNodeScope(jjtn009);
                                    jjtreeOpenNodeScope(jjtn009);
                                    try
                                    {
                                        jj_consume_token(HOOK);
                                    }
                                    finally
                                    {
                                        if (jjtc009)
                                        {
                                            jjtree.closeNodeScope(jjtn009, 1);
                                            jjtreeCloseNodeScope(jjtn009);
                                        }
                                    }
                                    break;
                                default:
                                    jj_la1[33] = jj_gen;
                                    ASTBNFParenthesized jjtn010 = new ASTBNFParenthesized(JJTBNFPARENTHESIZED);
                                    bool jjtc010 = true;
                                    jjtree.openNodeScope(jjtn010);
                                    jjtreeOpenNodeScope(jjtn010);
                                    try
                                    {
                                        jjtree.closeNodeScope(jjtn010, 1);
                                        jjtc010 = false;
                                        jjtreeCloseNodeScope(jjtn010);

                                    }
                                    finally
                                    {
                                        if (jjtc010)
                                        {
                                            jjtree.closeNodeScope(jjtn010, 1);
                                            jjtreeCloseNodeScope(jjtn010);
                                        }
                                    }
                            }
                      ((JJTreeNode)jjtree.peekNode()).setFirstToken(t);
                            break;
                        default:
                            jj_la1[35] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        { if (true) return (JJTreeNode)jjtree.peekNode(); }
        throw new Error("Missing return statement in function");
    }

    public void regular_expression()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case STRING_LITERAL:
                ASTREStringLiteral jjtn001 = new ASTREStringLiteral(JJTRESTRINGLITERAL);
                bool jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try
                {
                    StringLiteral();
                }
                catch (Exception jjte001)
                {
                    if (jjtc001)
                    {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if (jjte001 is RuntimeException)
                    {
                        { if (true) throw (RuntimeException)jjte001; }
                    }
                    if (jjte001 is ParseException)
                    {
                        { if (true) throw (ParseException)jjte001; }
                    }
                    { if (true) throw (Error)jjte001; }
                }
                finally
                {
                    if (jjtc001)
                    {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            default:
                jj_la1[38] = jj_gen;
                if (jj_2_5(3))
                {
                    ASTRENamed jjtn002 = new ASTRENamed(JJTRENAMED);
                    bool jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try
                    {
                        jj_consume_token(LT);
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case HASH:
                            case IDENTIFIER:
                                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                                {
                                    case HASH:
                                        jj_consume_token(HASH);
                                        break;
                                    default:
                                        jj_la1[36] = jj_gen;
                                        ;
                                }
                                identifier();
                                jj_consume_token(COLON);
                                break;
                            default:
                                jj_la1[37] = jj_gen;
                                ;
                        }
                        complex_regular_expression_choices();
                        jj_consume_token(GT);
                    }
                    catch (Exception jjte002)
                    {
                        if (jjtc002)
                        {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        }
                        else
                        {
                            jjtree.popNode();
                        }
                        if (jjte002 is RuntimeException)
                        {
                            { if (true) throw (RuntimeException)jjte002; }
                        }
                        if (jjte002 is ParseException)
                        {
                            { if (true) throw (ParseException)jjte002; }
                        }
                        { if (true) throw (Error)jjte002; }
                    }
                    finally
                    {
                        if (jjtc002)
                        {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                }
                else if (jj_2_6(2))
                {
                    ASTREReference jjtn003 = new ASTREReference(JJTREREFERENCE);
                    bool jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtreeOpenNodeScope(jjtn003);
                    try
                    {
                        jj_consume_token(LT);
                        identifier();
                        jj_consume_token(GT);
                    }
                    catch (Exception jjte003)
                    {
                        if (jjtc003)
                        {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                        }
                        else
                        {
                            jjtree.popNode();
                        }
                        if (jjte003 is RuntimeException)
                        {
                            { if (true) throw (RuntimeException)jjte003; }
                        }
                        if (jjte003 is ParseException)
                        {
                            { if (true) throw (ParseException)jjte003; }
                        }
                        { if (true) throw (Error)jjte003; }
                    }
                    finally
                    {
                        if (jjtc003)
                        {
                            jjtree.closeNodeScope(jjtn003, true);
                            jjtreeCloseNodeScope(jjtn003);
                        }
                    }
                }
                else
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case LT:
                            ASTREEOF jjtn004 = new ASTREEOF(JJTREEOF);
                            bool jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
                            jjtreeOpenNodeScope(jjtn004);
                            try
                            {
                                jj_consume_token(LT);
                                jj_consume_token(_EOF);
                                jj_consume_token(GT);
                            }
                            finally
                            {
                                if (jjtc004)
                                {
                                    jjtree.closeNodeScope(jjtn004, true);
                                    jjtreeCloseNodeScope(jjtn004);
                                }
                            }
                            break;
                        default:
                            jj_la1[39] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
    }

    public void complex_regular_expression_choices()
    {
        /*@bgen(jjtree) #REChoice(> 1) */
        ASTREChoice jjtn000 = new ASTREChoice(JJTRECHOICE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
            complex_regular_expression();
        label_12:
            while (true)
            {
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case BIT_OR:
                        ;
                        break;
                    default:
                        jj_la1[40] = jj_gen;
                        break label_12;
                }
                jj_consume_token(BIT_OR);
                complex_regular_expression();
            }
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void complex_regular_expression()
    {
        /*@bgen(jjtree) #RESequence(> 1) */
        ASTRESequence jjtn000 = new ASTRESequence(JJTRESEQUENCE);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
        label_13:
            while (true)
            {
                complex_regular_expression_unit();
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case STRING_LITERAL:
                    case LPAREN:
                    case LBRACKET:
                    case LT:
                    case TILDE:
                        ;
                        break;
                    default:
                        jj_la1[41] = jj_gen;
                        break label_13;
                }
            }
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void complex_regular_expression_unit()
    {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case STRING_LITERAL:
                ASTREStringLiteral jjtn001 = new ASTREStringLiteral(JJTRESTRINGLITERAL);
                bool jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try
                {
                    StringLiteral();
                }
                catch (Exception jjte001)
                {
                    if (jjtc001)
                    {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if (jjte001 is RuntimeException)
                    {
                        { if (true) throw (RuntimeException)jjte001; }
                    }
                    if (jjte001 is ParseException)
                    {
                        { if (true) throw (ParseException)jjte001; }
                    }
                    { if (true) throw (Error)jjte001; }
                }
                finally
                {
                    if (jjtc001)
                    {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            case LT:
                ASTREReference jjtn002 = new ASTREReference(JJTREREFERENCE);
                bool jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
                try
                {
                    jj_consume_token(LT);
                    identifier();
                    jj_consume_token(GT);
                }
                catch (Exception jjte002)
                {
                    if (jjtc002)
                    {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                    }
                    else
                    {
                        jjtree.popNode();
                    }
                    if (jjte002 is RuntimeException)
                    {
                        { if (true) throw (RuntimeException)jjte002; }
                    }
                    if (jjte002 is ParseException)
                    {
                        { if (true) throw (ParseException)jjte002; }
                    }
                    { if (true) throw (Error)jjte002; }
                }
                finally
                {
                    if (jjtc002)
                    {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtreeCloseNodeScope(jjtn002);
                    }
                }
                break;
            case LBRACKET:
            case TILDE:
                character_list();
                break;
            case LPAREN:
                t = jj_consume_token(LPAREN);
                complex_regular_expression_choices();
                jj_consume_token(RPAREN);
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case PLUS:
                        ASTREOneOrMore jjtn003 = new ASTREOneOrMore(JJTREONEORMORE);
                        bool jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtreeOpenNodeScope(jjtn003);
                        try
                        {
                            jj_consume_token(PLUS);
                        }
                        finally
                        {
                            if (jjtc003)
                            {
                                jjtree.closeNodeScope(jjtn003, 1);
                                jjtreeCloseNodeScope(jjtn003);
                            }
                        }
                        break;
                    case STAR:
                        ASTREZeroOrMore jjtn004 = new ASTREZeroOrMore(JJTREZEROORMORE);
                        bool jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtreeOpenNodeScope(jjtn004);
                        try
                        {
                            jj_consume_token(STAR);
                        }
                        finally
                        {
                            if (jjtc004)
                            {
                                jjtree.closeNodeScope(jjtn004, 1);
                                jjtreeCloseNodeScope(jjtn004);
                            }
                        }
                        break;
                    case HOOK:
                        ASTREZeroOrOne jjtn005 = new ASTREZeroOrOne(JJTREZEROORONE);
                        bool jjtc005 = true;
                        jjtree.openNodeScope(jjtn005);
                        jjtreeOpenNodeScope(jjtn005);
                        try
                        {
                            jj_consume_token(HOOK);
                        }
                        finally
                        {
                            if (jjtc005)
                            {
                                jjtree.closeNodeScope(jjtn005, 1);
                                jjtreeCloseNodeScope(jjtn005);
                            }
                        }
                        break;
                    case LBRACE:
                        jj_consume_token(LBRACE);
                        IntegerLiteral();
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case COMMA:
                                jj_consume_token(COMMA);
                                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                                {
                                    case INTEGER_LITERAL:
                                        IntegerLiteral();
                                        break;
                                    default:
                                        jj_la1[42] = jj_gen;
                                        ;
                                }
                                break;
                            default:
                                jj_la1[43] = jj_gen;
                                ;
                        }
                        ASTRRepetitionRange jjtn006 = new ASTRRepetitionRange(JJTRREPETITIONRANGE);
                        bool jjtc006 = true;
                        jjtree.openNodeScope(jjtn006);
                        jjtreeOpenNodeScope(jjtn006);
                        try
                        {
                            jj_consume_token(RBRACE);
                        }
                        finally
                        {
                            if (jjtc006)
                            {
                                jjtree.closeNodeScope(jjtn006, 1);
                                jjtreeCloseNodeScope(jjtn006);
                            }
                        }
                        break;
                    default:
                        jj_la1[44] = jj_gen;
                        ASTREParenthesized jjtn007 = new ASTREParenthesized(JJTREPARENTHESIZED);
                        bool jjtc007 = true;
                        jjtree.openNodeScope(jjtn007);
                        jjtreeOpenNodeScope(jjtn007);
                        try
                        {
                            jjtree.closeNodeScope(jjtn007, 1);
                            jjtc007 = false;
                            jjtreeCloseNodeScope(jjtn007);

                        }
                        finally
                        {
                            if (jjtc007)
                            {
                                jjtree.closeNodeScope(jjtn007, 1);
                                jjtreeCloseNodeScope(jjtn007);
                            }
                        }
                }
              ((JJTreeNode)jjtree.peekNode()).setFirstToken(t);
                break;
            default:
                jj_la1[45] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void character_list()
    {
        /*@bgen(jjtree) RECharList */
        ASTRECharList jjtn000 = new ASTRECharList(JJTRECHARLIST);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case TILDE:
                    jj_consume_token(TILDE);
                    break;
                default:
                    jj_la1[46] = jj_gen;
                    ;
            }
            jj_consume_token(LBRACKET);
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case STRING_LITERAL:
                    character_descriptor();
                label_14:
                    while (true)
                    {
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case COMMA:
                                ;
                                break;
                            default:
                                jj_la1[47] = jj_gen;
                                break label_14;
                        }
                        jj_consume_token(COMMA);
                        character_descriptor();
                    }
                    break;
                default:
                    jj_la1[48] = jj_gen;
                    ;
            }
            jj_consume_token(RBRACKET);
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void character_descriptor()
    {
        /*@bgen(jjtree) CharDescriptor */
        ASTCharDescriptor jjtn000 = new ASTCharDescriptor(JJTCHARDESCRIPTOR);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
            StringLiteral();
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case MINUS:
                    jj_consume_token(MINUS);
                    StringLiteral();
                    break;
                default:
                    jj_la1[49] = jj_gen;
                    ;
            }
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public Token identifier()
    {
        Token t;
        t = jj_consume_token(IDENTIFIER);
        { if (true) return t; }
        throw new Error("Missing return statement in function");
    }

    /**********************************************
     * THE JJTREE PRODUCTIONS START HERE          *
     **********************************************/
    public ASTNodeDescriptor node_descriptor()
    {
        /*@bgen(jjtree) NodeDescriptor */
        ASTNodeDescriptor jjtn000 = new ASTNodeDescriptor(JJTNODEDESCRIPTOR);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000); Token t = null;
        String s = null;
        try
        {
            jj_consume_token(HASH);
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case IDENTIFIER:
                    s = Name();
                    jjtn000.name = s;
                    break;
                case VOID:
                    t = jj_consume_token(VOID);
                    jjtn000.name = t.image;
                    break;
                default:
                    jj_la1[50] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LPAREN:
                    jj_consume_token(LPAREN);
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case GT:
                            jj_consume_token(GT);
                            jjtn000.isGT = true;
                            break;
                        default:
                            jj_la1[51] = jj_gen;
                            ;
                    }
                    node_descriptor_expression();
                    jjtn000.expression =
                      (ASTNodeDescriptorExpression)jjtree.peekNode();
                    jj_consume_token(RPAREN);
                    break;
                default:
                    jj_la1[52] = jj_gen;
                    ;
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.setNodeIdValue();
            { if (true) return jjtn000; }
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
        throw new Error("Missing return statement in function");
    }

    void node_descriptor_expression()
    {
        /*@bgen(jjtree) NodeDescriptorExpression */
        ASTNodeDescriptorExpression jjtn000 = new ASTNodeDescriptorExpression(JJTNODEDESCRIPTOREXPRESSION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
            Token tok;
            int nesting = 1;
            while (true)
            {
                tok = getToken(1);
                if (tok.kind == 0)
                {
                    throw new ParseException();
                }
                if (tok.kind == LPAREN) nesting++;
                if (tok.kind == RPAREN)
                {
                    nesting--;
                    if (nesting == 0) break;
                }
                tok = getNextToken();
            }/*@bgen(jjtree)*/
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**********************************************
     * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
     **********************************************/

    /*
     * The Java grammar is modified to use sequences of tokens
     * for the missing tokens - those that include "<<" and ">>".
     */

    /*
     * The following production defines Java identifiers - it
     * includes the reserved words of JavaCC also.
     */
    public String JavaIdentifier()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                break;
            case _LOOKAHEAD:
                jj_consume_token(_LOOKAHEAD);
                break;
            case _IGNORE_CASE:
                jj_consume_token(_IGNORE_CASE);
                break;
            case _PARSER_BEGIN:
                jj_consume_token(_PARSER_BEGIN);
                break;
            case _PARSER_END:
                jj_consume_token(_PARSER_END);
                break;
            case _JAVACODE:
                jj_consume_token(_JAVACODE);
                break;
            case _TOKEN:
                jj_consume_token(_TOKEN);
                break;
            case _SPECIAL_TOKEN:
                jj_consume_token(_SPECIAL_TOKEN);
                break;
            case _MORE:
                jj_consume_token(_MORE);
                break;
            case _SKIP:
                jj_consume_token(_SKIP);
                break;
            case _TOKEN_MGR_DECLS:
                jj_consume_token(_TOKEN_MGR_DECLS);
                break;
            case _EOF:
                jj_consume_token(_EOF);
                break;
            default:
                jj_la1[53] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        { if (true) return token.image; }
        throw new Error("Missing return statement in function");
    }

    /*
     * Program structuring syntax follows.
     */
    public void CompilationUnit()
    {
        if (jj_2_7(2147483647))
        {
            PackageDeclaration();
        }
        else
        {
            ;
        }
        JJTreeGlobals.parserImports = getToken(1);
    label_15:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case IMPORT:
                    ;
                    break;
                default:
                    jj_la1[54] = jj_gen;
                    break label_15;
            }
            ImportDeclaration();
        }
    label_16:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case ABSTRACT:
                case CLASS:
                case FINAL:
                case INTERFACE:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOLATILE:
                case SEMICOLON:
                case 129:
                case 130:
                case 139:
                    ;
                    break;
                default:
                    jj_la1[55] = jj_gen;
                    break label_16;
            }
            TypeDeclaration();
        }
    }

    public void PackageDeclaration()
    {
        String s;
        Modifiers();
        jj_consume_token(PACKAGE);
        s = Name();
        jj_consume_token(SEMICOLON);
        JJTreeGlobals.packageName = s;
    }

    public void ImportDeclaration()
    {
        jj_consume_token(IMPORT);
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case STATIC:
                jj_consume_token(STATIC);
                break;
            default:
                jj_la1[56] = jj_gen;
                ;
        }
        Name();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case DOT:
                jj_consume_token(DOT);
                jj_consume_token(STAR);
                break;
            default:
                jj_la1[57] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
    }

    /*
     * Modifiers. We match all modifiers in a single rule to reduce the chances of
     * syntax errors for simple modifier mistakes. It will also enable us to give
     * better error messages.
     */
    public void Modifiers()
    {
    label_17:
        while (true)
        {
            if (jj_2_8(2))
            {
                ;
            }
            else
            {
                break label_17;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case PUBLIC:
                    jj_consume_token(PUBLIC);
                    break;
                case STATIC:
                    jj_consume_token(STATIC);
                    break;
                case PROTECTED:
                    jj_consume_token(PROTECTED);
                    break;
                case PRIVATE:
                    jj_consume_token(PRIVATE);
                    break;
                case FINAL:
                    jj_consume_token(FINAL);
                    break;
                case ABSTRACT:
                    jj_consume_token(ABSTRACT);
                    break;
                case SYNCHRONIZED:
                    jj_consume_token(SYNCHRONIZED);
                    break;
                case NATIVE:
                    jj_consume_token(NATIVE);
                    break;
                case TRANSIENT:
                    jj_consume_token(TRANSIENT);
                    break;
                case VOLATILE:
                    jj_consume_token(VOLATILE);
                    break;
                case 129:
                    jj_consume_token(129);
                    break;
                case 139:
                    Annotation();
                    break;
                default:
                    jj_la1[58] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    /*
     * Declaration syntax follows.
     */
    public void TypeDeclaration()
    {
        ;
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            case ABSTRACT:
            case CLASS:
            case FINAL:
            case INTERFACE:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case 129:
            case 130:
            case 139:
                Modifiers();
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case CLASS:
                    case INTERFACE:
                        ClassOrInterfaceDeclaration();
                        break;
                    case 130:
                        EnumDeclaration();
                        break;
                    case 139:
                        AnnotationTypeDeclaration();
                        break;
                    default:
                        jj_la1[59] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[60] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ClassOrInterfaceDeclaration()
    {
        Token t = null;
        String s;
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case CLASS:
                jj_consume_token(CLASS);
                break;
            case INTERFACE:
                jj_consume_token(INTERFACE);
                break;
            default:
                jj_la1[61] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        s = JavaIdentifier();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case LT:
                TypeParameters();
                break;
            default:
                jj_la1[62] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case EXTENDS:
                ExtendsList();
                break;
            default:
                jj_la1[63] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case IMPLEMENTS:
                t = getToken(1);
                ImplementsList();
                break;
            default:
                jj_la1[64] = jj_gen;
                ;
        }
        if (s.Equals(JJTreeGlobals.parserName))
        {
            if (t != null)
            {
                JJTreeGlobals.parserImplements = t;
            }
            else
            {
                JJTreeGlobals.parserImplements = getToken(1);
            }
            JJTreeGlobals.parserClassBodyStart = getToken(1);
        }
        ClassOrInterfaceBody();
    }

    public void ExtendsList()
    {
        jj_consume_token(EXTENDS);
        ClassOrInterfaceType();
    label_18:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[65] = jj_gen;
                    break label_18;
            }
            jj_consume_token(COMMA);
            ClassOrInterfaceType();
        }
    }

    public void ImplementsList()
    {
        jj_consume_token(IMPLEMENTS);
        ClassOrInterfaceType();
    label_19:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[66] = jj_gen;
                    break label_19;
            }
            jj_consume_token(COMMA);
            ClassOrInterfaceType();
        }
    }

    public void EnumDeclaration()
    {
        jj_consume_token(130);
        JavaIdentifier();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case IMPLEMENTS:
                ImplementsList();
                break;
            default:
                jj_la1[67] = jj_gen;
                ;
        }
        EnumBody();
    }

    public void EnumBody()
    {
        jj_consume_token(LBRACE);
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case ABSTRACT:
            case FINAL:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case 129:
            case 139:
            case IDENTIFIER:
                EnumConstant();
            label_20:
                while (true)
                {
                    if (jj_2_9(2))
                    {
                        ;
                    }
                    else
                    {
                        break label_20;
                    }
                    jj_consume_token(COMMA);
                    EnumConstant();
                }
                break;
            default:
                jj_la1[68] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[69] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
            label_21:
                while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case ABSTRACT:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CLASS:
                        case CONST:
                        case DOUBLE:
                        case FINAL:
                        case FLOAT:
                        case INT:
                        case INTERFACE:
                        case LONG:
                        case NATIVE:
                        case PRIVATE:
                        case PROTECTED:
                        case PUBLIC:
                        case SHORT:
                        case STATIC:
                        case SYNCHRONIZED:
                        case TRANSIENT:
                        case VOID:
                        case VOLATILE:
                        case LBRACE:
                        case SEMICOLON:
                        case LT:
                        case 129:
                        case 130:
                        case 132:
                        case 139:
                        case IDENTIFIER:
                            ;
                            break;
                        default:
                            jj_la1[70] = jj_gen;
                            break label_21;
                    }
                    ClassOrInterfaceBodyDeclaration();
                }
                break;
            default:
                jj_la1[71] = jj_gen;
                ;
        }
        jj_consume_token(RBRACE);
    }

    public void EnumConstant()
    {
        Modifiers();
        JavaIdentifier();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case LPAREN:
                Arguments();
                break;
            default:
                jj_la1[72] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case LBRACE:
                ClassOrInterfaceBody();
                break;
            default:
                jj_la1[73] = jj_gen;
                ;
        }
    }

    public void TypeParameters()
    {
        jj_consume_token(LT);
        TypeParameter();
    label_22:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[74] = jj_gen;
                    break label_22;
            }
            jj_consume_token(COMMA);
            TypeParameter();
        }
        jj_consume_token(GT);
    }

    public void TypeParameter()
    {
        JavaIdentifier();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case EXTENDS:
                TypeBound();
                break;
            default:
                jj_la1[75] = jj_gen;
                ;
        }
    }

    public void TypeBound()
    {
        jj_consume_token(EXTENDS);
        ClassOrInterfaceType();
    label_23:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case BIT_AND:
                    ;
                    break;
                default:
                    jj_la1[76] = jj_gen;
                    break label_23;
            }
            jj_consume_token(BIT_AND);
            ClassOrInterfaceType();
        }
    }

    public void ClassOrInterfaceBody()
    {
        jj_consume_token(LBRACE);
    label_24:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONST:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case LBRACE:
                case SEMICOLON:
                case LT:
                case 129:
                case 130:
                case 132:
                case 139:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[77] = jj_gen;
                    break label_24;
            }
            ClassOrInterfaceBodyDeclaration();
        }
        jj_consume_token(RBRACE);
    }

    public void ClassOrInterfaceBodyDeclaration()
    {
        if (jj_2_12(2))
        {
            Initializer();
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONST:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case LT:
                case 129:
                case 130:
                case 132:
                case 139:
                case IDENTIFIER:
                    Modifiers();
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case CLASS:
                        case INTERFACE:
                            ClassOrInterfaceDeclaration();
                            break;
                        case 130:
                            EnumDeclaration();
                            break;
                        default:
                            jj_la1[78] = jj_gen;
                            if (jj_2_10(2147483647))
                            {
                                ConstructorDeclaration();
                            }
                            else if (jj_2_11(2147483647))
                            {
                                FieldDeclaration();
                            }
                            else
                            {
                                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                                {
                                    case _LOOKAHEAD:
                                    case _IGNORE_CASE:
                                    case _PARSER_BEGIN:
                                    case _PARSER_END:
                                    case _JAVACODE:
                                    case _TOKEN:
                                    case _SPECIAL_TOKEN:
                                    case _MORE:
                                    case _SKIP:
                                    case _TOKEN_MGR_DECLS:
                                    case _EOF:
                                    case BOOLEAN:
                                    case BYTE:
                                    case CHAR:
                                    case CONST:
                                    case DOUBLE:
                                    case FLOAT:
                                    case INT:
                                    case LONG:
                                    case SHORT:
                                    case VOID:
                                    case LT:
                                    case 132:
                                    case IDENTIFIER:
                                        MethodDeclaration();
                                        break;
                                    default:
                                        jj_la1[79] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                    }
                    break;
                case SEMICOLON:
                    jj_consume_token(SEMICOLON);
                    break;
                default:
                    jj_la1[80] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void FieldDeclaration()
    {
        Type();
        VariableDeclarator();
    label_25:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[81] = jj_gen;
                    break label_25;
            }
            jj_consume_token(COMMA);
            VariableDeclarator();
        }
        jj_consume_token(SEMICOLON);
    }

    public void VariableDeclarator()
    {
        VariableDeclaratorId();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                VariableInitializer();
                break;
            default:
                jj_la1[82] = jj_gen;
                ;
        }
    }

    public void VariableDeclaratorId()
    {
        JavaIdentifier();
    label_26:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LBRACKET:
                    ;
                    break;
                default:
                    jj_la1[83] = jj_gen;
                    break label_26;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        }
    }

    public void VariableInitializer()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case LBRACE:
                ArrayInitializer();
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 132:
            case IDENTIFIER:
                Expression();
                break;
            default:
                jj_la1[84] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ArrayInitializer()
    {
        jj_consume_token(LBRACE);
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case LBRACE:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 132:
            case IDENTIFIER:
                VariableInitializer();
            label_27:
                while (true)
                {
                    if (jj_2_13(2))
                    {
                        ;
                    }
                    else
                    {
                        break label_27;
                    }
                    jj_consume_token(COMMA);
                    VariableInitializer();
                }
                break;
            default:
                jj_la1[85] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[86] = jj_gen;
                ;
        }
        jj_consume_token(RBRACE);
    }

    public void MethodDeclaration()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case LT:
                TypeParameters();
                break;
            default:
                jj_la1[87] = jj_gen;
                ;
        }
        ResultType();
        MethodDeclarator();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case THROWS:
                jj_consume_token(THROWS);
                NameList();
                break;
            default:
                jj_la1[88] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case LBRACE:
                Block();
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[89] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void MethodDeclarator()
    {
        JavaIdentifier();
        FormalParameters();
    label_28:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LBRACKET:
                    ;
                    break;
                default:
                    jj_la1[90] = jj_gen;
                    break label_28;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        }
    }

    public void FormalParameters()
    {
        jj_consume_token(LPAREN);
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case 129:
            case 132:
            case 139:
            case IDENTIFIER:
                FormalParameter();
            label_29:
                while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case COMMA:
                            ;
                            break;
                        default:
                            jj_la1[91] = jj_gen;
                            break label_29;
                    }
                    jj_consume_token(COMMA);
                    FormalParameter();
                }
                break;
            default:
                jj_la1[92] = jj_gen;
                ;
        }
        jj_consume_token(RPAREN);
    }

    public void FormalParameter()
    {
        Modifiers();
        Type();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case STAR:
            case BIT_AND:
            case 131:
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case BIT_AND:
                        jj_consume_token(BIT_AND);
                        break;
                    case STAR:
                        jj_consume_token(STAR);
                        break;
                    case 131:
                        jj_consume_token(131);
                        break;
                    default:
                        jj_la1[93] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[94] = jj_gen;
                ;
        }
        VariableDeclaratorId();
    }

    public void ConstructorDeclaration()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case LT:
                TypeParameters();
                break;
            default:
                jj_la1[95] = jj_gen;
                ;
        }
        JavaIdentifier();
        FormalParameters();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case THROWS:
                jj_consume_token(THROWS);
                NameList();
                break;
            default:
                jj_la1[96] = jj_gen;
                ;
        }
        jj_consume_token(LBRACE);
        if (jj_2_14(2147483647))
        {
            ExplicitConstructorInvocation();
        }
        else
        {
            ;
        }
    label_30:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONST:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case NEW:
                case NULL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case RETURN:
                case SHORT:
                case STATIC:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRANSIENT:
                case TRUE:
                case TRY:
                case VOID:
                case VOLATILE:
                case WHILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
                case 129:
                case 132:
                case 138:
                case 139:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[97] = jj_gen;
                    break label_30;
            }
            BlockStatement();
        }
        jj_consume_token(RBRACE);
    }

    public void ExplicitConstructorInvocation()
    {
        if (jj_2_16(2147483647))
        {
            jj_consume_token(THIS);
            Arguments();
            jj_consume_token(SEMICOLON);
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case 132:
                case IDENTIFIER:
                    if (jj_2_15(2))
                    {
                        PrimaryExpression();
                        jj_consume_token(DOT);
                    }
                    else
                    {
                        ;
                    }
                    jj_consume_token(SUPER);
                    Arguments();
                    jj_consume_token(SEMICOLON);
                    break;
                default:
                    jj_la1[98] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void Initializer()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case STATIC:
                jj_consume_token(STATIC);
                break;
            default:
                jj_la1[99] = jj_gen;
                ;
        }
        Block();
    }

    /*
     * Type, name and expression syntax follows.
     */
    public void Type()
    {
        if (jj_2_17(2))
        {
            ReferenceType();
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    PrimitiveType();
                    break;
                default:
                    jj_la1[100] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void ReferenceType()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                PrimitiveType();
            label_31:
                while (true)
                {
                    jj_consume_token(LBRACKET);
                    jj_consume_token(RBRACKET);
                    if (jj_2_18(2))
                    {
                        ;
                    }
                    else
                    {
                        break label_31;
                    }
                }
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case 132:
            case IDENTIFIER:
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case 132:
                        Template();
                        break;
                    default:
                        jj_la1[101] = jj_gen;
                        ;
                }
                ClassOrInterfaceType();
            label_32:
                while (true)
                {
                    if (jj_2_19(2))
                    {
                        ;
                    }
                    else
                    {
                        break label_32;
                    }
                    jj_consume_token(LBRACKET);
                    jj_consume_token(RBRACKET);
                }
                break;
            default:
                jj_la1[102] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void Template()
    {
        jj_consume_token(132);
        jj_consume_token(LT);
        TemplatePack();
    label_33:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[103] = jj_gen;
                    break label_33;
            }
            jj_consume_token(COMMA);
            TemplatePack();
        }
        jj_consume_token(GT);
    }

    public void TemplatePack()
    {
        TemplateBase();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case 131:
                jj_consume_token(131);
                break;
            default:
                jj_la1[104] = jj_gen;
                ;
        }
        jj_consume_token(IDENTIFIER);
    }

    public void TemplateBase()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case CLASS:
                jj_consume_token(CLASS);
                break;
            case 133:
                jj_consume_token(133);
                break;
            default:
                jj_la1[105] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ClassOrInterfaceType()
    {
        JavaIdentifier();
        if (jj_2_20(2))
        {
            TypeArguments();
        }
        else
        {
            ;
        }
    label_34:
        while (true)
        {
            if (jj_2_21(2))
            {
                ;
            }
            else
            {
                break label_34;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case DOT:
                    jj_consume_token(DOT);
                    break;
                case DOUBLECOLON:
                    jj_consume_token(DOUBLECOLON);
                    break;
                default:
                    jj_la1[106] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            JavaIdentifier();
            if (jj_2_22(2))
            {
                TypeArguments();
            }
            else
            {
                ;
            }
        }
    }

    public void TypeArguments()
    {
        jj_consume_token(LT);
        TypeArgument();
    label_35:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[107] = jj_gen;
                    break label_35;
            }
            jj_consume_token(COMMA);
            TypeArgument();
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case 131:
                    jj_consume_token(131);
                    break;
                default:
                    jj_la1[108] = jj_gen;
                    ;
            }
        }
        jj_consume_token(GT);
    }

    public void TypeArgument()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case 132:
            case IDENTIFIER:
                ReferenceType();
                break;
            case HOOK:
                jj_consume_token(HOOK);
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case EXTENDS:
                    case SUPER:
                        WildcardBounds();
                        break;
                    default:
                        jj_la1[109] = jj_gen;
                        ;
                }
                break;
            default:
                jj_la1[110] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void WildcardBounds()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case EXTENDS:
                jj_consume_token(EXTENDS);
                ReferenceType();
                break;
            case SUPER:
                jj_consume_token(SUPER);
                ReferenceType();
                break;
            default:
                jj_la1[111] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void PrimitiveType()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case BOOLEAN:
                jj_consume_token(BOOLEAN);
                break;
            case CHAR:
                jj_consume_token(CHAR);
                break;
            case BYTE:
                jj_consume_token(BYTE);
                break;
            case SHORT:
                jj_consume_token(SHORT);
                break;
            case INT:
                jj_consume_token(INT);
                break;
            case LONG:
                jj_consume_token(LONG);
                break;
            case FLOAT:
                jj_consume_token(FLOAT);
                break;
            case DOUBLE:
                jj_consume_token(DOUBLE);
                break;
            default:
                jj_la1[112] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ResultType()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case VOID:
                jj_consume_token(VOID);
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case STAR:
                        jj_consume_token(STAR);
                        break;
                    default:
                        jj_la1[113] = jj_gen;
                        ;
                }
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case 132:
            case IDENTIFIER:
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case CONST:
                        jj_consume_token(CONST);
                        break;
                    default:
                        jj_la1[114] = jj_gen;
                        ;
                }
                Type();
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case STAR:
                    case BIT_AND:
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case STAR:
                                jj_consume_token(STAR);
                                break;
                            case BIT_AND:
                                jj_consume_token(BIT_AND);
                                break;
                            default:
                                jj_la1[115] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    default:
                        jj_la1[116] = jj_gen;
                        ;
                }
                break;
            default:
                jj_la1[117] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public String Name()
    {
        String s, ss;
        s = JavaIdentifier();
    label_36:
        while (true)
        {
            if (jj_2_23(2))
            {
                ;
            }
            else
            {
                break label_36;
            }
            jj_consume_token(DOT);
            ss = JavaIdentifier();
            s += "." + ss;
        }
        { if (true) return s; }
        throw new Error("Missing return statement in function");
    }

    public void NameList()
    {
        Name();
    label_37:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[118] = jj_gen;
                    break label_37;
            }
            jj_consume_token(COMMA);
            Name();
        }
    }

    /*
     * Expression syntax follows.
     */
    public void Expression()
    {
        ConditionalExpression();
        if (jj_2_24(2))
        {
            AssignmentOperator();
            Expression();
        }
        else
        {
            ;
        }
    }

    public void AssignmentOperator()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                break;
            case STARASSIGN:
                jj_consume_token(STARASSIGN);
                break;
            case SLASHASSIGN:
                jj_consume_token(SLASHASSIGN);
                break;
            case REMASSIGN:
                jj_consume_token(REMASSIGN);
                break;
            case PLUSASSIGN:
                jj_consume_token(PLUSASSIGN);
                break;
            case MINUSASSIGN:
                jj_consume_token(MINUSASSIGN);
                break;
            case 134:
                jj_consume_token(134);
                break;
            case 135:
                jj_consume_token(135);
                break;
            case 136:
                jj_consume_token(136);
                break;
            case ANDASSIGN:
                jj_consume_token(ANDASSIGN);
                break;
            case XORASSIGN:
                jj_consume_token(XORASSIGN);
                break;
            case ORASSIGN:
                jj_consume_token(ORASSIGN);
                break;
            default:
                jj_la1[119] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void ConditionalExpression()
    {
        ConditionalOrExpression();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case HOOK:
                jj_consume_token(HOOK);
                Expression();
                jj_consume_token(COLON);
                Expression();
                break;
            default:
                jj_la1[120] = jj_gen;
                ;
        }
    }

    public void ConditionalOrExpression()
    {
        ConditionalAndExpression();
    label_38:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case SC_OR:
                    ;
                    break;
                default:
                    jj_la1[121] = jj_gen;
                    break label_38;
            }
            jj_consume_token(SC_OR);
            ConditionalAndExpression();
        }
    }

    public void ConditionalAndExpression()
    {
        InclusiveOrExpression();
    label_39:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case SC_AND:
                    ;
                    break;
                default:
                    jj_la1[122] = jj_gen;
                    break label_39;
            }
            jj_consume_token(SC_AND);
            InclusiveOrExpression();
        }
    }

    public void InclusiveOrExpression()
    {
        ExclusiveOrExpression();
    label_40:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case BIT_OR:
                    ;
                    break;
                default:
                    jj_la1[123] = jj_gen;
                    break label_40;
            }
            jj_consume_token(BIT_OR);
            ExclusiveOrExpression();
        }
    }

    public void ExclusiveOrExpression()
    {
        AndExpression();
    label_41:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case XOR:
                    ;
                    break;
                default:
                    jj_la1[124] = jj_gen;
                    break label_41;
            }
            jj_consume_token(XOR);
            AndExpression();
        }
    }

    public void AndExpression()
    {
        EqualityExpression();
    label_42:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case BIT_AND:
                    ;
                    break;
                default:
                    jj_la1[125] = jj_gen;
                    break label_42;
            }
            jj_consume_token(BIT_AND);
            EqualityExpression();
        }
    }

    public void EqualityExpression()
    {
        InstanceOfExpression();
    label_43:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case EQ:
                case NE:
                    ;
                    break;
                default:
                    jj_la1[126] = jj_gen;
                    break label_43;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case EQ:
                    jj_consume_token(EQ);
                    break;
                case NE:
                    jj_consume_token(NE);
                    break;
                default:
                    jj_la1[127] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            InstanceOfExpression();
        }
    }

    public void InstanceOfExpression()
    {
        RelationalExpression();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case INSTANCEOF:
                jj_consume_token(INSTANCEOF);
                Type();
                break;
            default:
                jj_la1[128] = jj_gen;
                ;
        }
    }

    public void RelationalExpression()
    {
        ShiftExpression();
    label_44:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LT:
                case LE:
                case GE:
                case GT:
                    ;
                    break;
                default:
                    jj_la1[129] = jj_gen;
                    break label_44;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LT:
                    jj_consume_token(LT);
                    break;
                case GT:
                    jj_consume_token(GT);
                    break;
                case LE:
                    jj_consume_token(LE);
                    break;
                case GE:
                    jj_consume_token(GE);
                    break;
                default:
                    jj_la1[130] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            ShiftExpression();
        }
    }

    public void ShiftExpression()
    {
        AdditiveExpression();
    label_45:
        while (true)
        {
            if (jj_2_25(1))
            {
                ;
            }
            else
            {
                break label_45;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case 137:
                    jj_consume_token(137);
                    break;
                default:
                    jj_la1[131] = jj_gen;
                    if (jj_2_26(1))
                    {
                        RSIGNEDSHIFT();
                    }
                    else if (jj_2_27(1))
                    {
                        RUNSIGNEDSHIFT();
                    }
                    else
                    {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
            AdditiveExpression();
        }
    }

    public void AdditiveExpression()
    {
        MultiplicativeExpression();
    label_46:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case PLUS:
                case MINUS:
                    ;
                    break;
                default:
                    jj_la1[132] = jj_gen;
                    break label_46;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case PLUS:
                    jj_consume_token(PLUS);
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    break;
                default:
                    jj_la1[133] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            MultiplicativeExpression();
        }
    }

    public void MultiplicativeExpression()
    {
        UnaryExpression();
    label_47:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case STAR:
                case SLASH:
                case REM:
                    ;
                    break;
                default:
                    jj_la1[134] = jj_gen;
                    break label_47;
            }
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case STAR:
                    jj_consume_token(STAR);
                    break;
                case SLASH:
                    jj_consume_token(SLASH);
                    break;
                case REM:
                    jj_consume_token(REM);
                    break;
                default:
                    jj_la1[135] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            UnaryExpression();
        }
    }

    public void UnaryExpression()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case PLUS:
            case MINUS:
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case PLUS:
                        jj_consume_token(PLUS);
                        break;
                    case MINUS:
                        jj_consume_token(MINUS);
                        break;
                    default:
                        jj_la1[136] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                UnaryExpression();
                break;
            case INCR:
                PreIncrementExpression();
                break;
            case DECR:
                PreDecrementExpression();
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case 132:
            case IDENTIFIER:
                UnaryExpressionNotPlusMinus();
                break;
            default:
                jj_la1[137] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void PreIncrementExpression()
    {
        jj_consume_token(INCR);
        PrimaryExpression();
    }

    public void PreDecrementExpression()
    {
        jj_consume_token(DECR);
        PrimaryExpression();
    }

    public void UnaryExpressionNotPlusMinus()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case BANG:
            case TILDE:
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case TILDE:
                        jj_consume_token(TILDE);
                        break;
                    case BANG:
                        jj_consume_token(BANG);
                        break;
                    default:
                        jj_la1[138] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                UnaryExpression();
                break;
            default:
                jj_la1[139] = jj_gen;
                if (jj_2_28(2147483647))
                {
                    CastExpression();
                }
                else
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CONST:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case VOID:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case 132:
                        case IDENTIFIER:
                            PostfixExpression();
                            break;
                        default:
                            jj_la1[140] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
    }

    // This production is to determine lookahead only.  The LOOKAHEAD specifications
    // below are not used, but they are there just to indicate that we know about
    // this.
    public void CastLookahead()
    {
        if (jj_2_29(2))
        {
            jj_consume_token(LPAREN);
            PrimitiveType();
        }
        else if (jj_2_30(2147483647))
        {
            jj_consume_token(LPAREN);
            Type();
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LPAREN:
                    jj_consume_token(LPAREN);
                    Type();
                    jj_consume_token(RPAREN);
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case TILDE:
                            jj_consume_token(TILDE);
                            break;
                        case BANG:
                            jj_consume_token(BANG);
                            break;
                        case LPAREN:
                            jj_consume_token(LPAREN);
                            break;
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case IDENTIFIER:
                            JavaIdentifier();
                            break;
                        case THIS:
                            jj_consume_token(THIS);
                            break;
                        case SUPER:
                            jj_consume_token(SUPER);
                            break;
                        case NEW:
                            jj_consume_token(NEW);
                            break;
                        case FALSE:
                        case NULL:
                        case TRUE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                            Literal();
                            break;
                        default:
                            jj_la1[141] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[142] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void PostfixExpression()
    {
        PrimaryExpression();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case INCR:
            case DECR:
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case INCR:
                        jj_consume_token(INCR);
                        break;
                    case DECR:
                        jj_consume_token(DECR);
                        break;
                    default:
                        jj_la1[143] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[144] = jj_gen;
                ;
        }
    }

    public void CastExpression()
    {
        if (jj_2_31(2147483647))
        {
            jj_consume_token(LPAREN);
            Type();
            jj_consume_token(RPAREN);
            UnaryExpression();
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LPAREN:
                    jj_consume_token(LPAREN);
                    Type();
                    jj_consume_token(RPAREN);
                    UnaryExpressionNotPlusMinus();
                    break;
                default:
                    jj_la1[145] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void PrimaryExpression()
    {
        /*@bgen(jjtree) PrimaryExpression */
        ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
        bool jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try
        {
            PrimaryPrefix();
        label_48:
            while (true)
            {
                if (jj_2_32(2))
                {
                    ;
                }
                else
                {
                    break label_48;
                }
                PrimarySuffix();
            }
        }
        catch (Exception jjte000)
        {
            if (jjtc000)
            {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if (jjte000 is RuntimeException)
            {
                { if (true) throw (RuntimeException)jjte000; }
            }
            if (jjte000 is ParseException)
            {
                { if (true) throw (ParseException)jjte000; }
            }
            { if (true) throw (Error)jjte000; }
        }
        finally
        {
            if (jjtc000)
            {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    public void MemberSelector()
    {
        jj_consume_token(DOT);
        TypeArguments();
        JavaIdentifier();
    }

    public void PrimaryPrefix()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case FALSE:
            case NULL:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                Literal();
                break;
            case THIS:
                jj_consume_token(THIS);
                break;
            case SUPER:
                jj_consume_token(SUPER);
                jj_consume_token(DOT);
                JavaIdentifier();
                break;
            case LPAREN:
                jj_consume_token(LPAREN);
                Expression();
                jj_consume_token(RPAREN);
                break;
            case NEW:
                AllocationExpression();
                break;
            default:
                jj_la1[146] = jj_gen;
                if (jj_2_33(2147483647))
                {
                    ResultType();
                    jj_consume_token(DOT);
                    jj_consume_token(CLASS);
                }
                else
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case IDENTIFIER:
                            Name();
                            break;
                        default:
                            jj_la1[147] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
    }

    public void PrimarySuffix()
    {
        if (jj_2_34(2))
        {
            jj_consume_token(DOT);
            jj_consume_token(THIS);
        }
        else if (jj_2_35(2))
        {
            jj_consume_token(DOT);
            AllocationExpression();
        }
        else if (jj_2_36(3))
        {
            MemberSelector();
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LBRACKET:
                    jj_consume_token(LBRACKET);
                    Expression();
                    jj_consume_token(RBRACKET);
                    break;
                case DOT:
                    jj_consume_token(DOT);
                    JavaIdentifier();
                    break;
                case LPAREN:
                    Arguments();
                    break;
                default:
                    jj_la1[148] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void Literal()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case INTEGER_LITERAL:
                jj_consume_token(INTEGER_LITERAL);
                break;
            case FLOATING_POINT_LITERAL:
                jj_consume_token(FLOATING_POINT_LITERAL);
                break;
            case CHARACTER_LITERAL:
                jj_consume_token(CHARACTER_LITERAL);
                break;
            case STRING_LITERAL:
                jj_consume_token(STRING_LITERAL);
                break;
            case FALSE:
            case TRUE:
                BooleanLiteral();
                break;
            case NULL:
                NullLiteral();
                break;
            default:
                jj_la1[149] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public Token IntegerLiteral()
    {
        Token t;
        t = jj_consume_token(INTEGER_LITERAL);
        { if (true) return t; }
        throw new Error("Missing return statement in function");
    }

    public Token BooleanLiteral()
    {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case TRUE:
                t = jj_consume_token(TRUE);
                { if (true) return t; }
                break;
            case FALSE:
                t = jj_consume_token(FALSE);
                { if (true) return t; }
                break;
            default:
                jj_la1[150] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    public Token StringLiteral()
    {
        Token t;
        t = jj_consume_token(STRING_LITERAL);
        { if (true) return t; }
        throw new Error("Missing return statement in function");
    }

    public void NullLiteral()
    {
        jj_consume_token(NULL);
    }

    public void Arguments()
    {
        jj_consume_token(LPAREN);
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 132:
            case IDENTIFIER:
                ArgumentList();
                break;
            default:
                jj_la1[151] = jj_gen;
                ;
        }
        jj_consume_token(RPAREN);
    }

    public void ArgumentList()
    {
        Expression();
    label_49:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[152] = jj_gen;
                    break label_49;
            }
            jj_consume_token(COMMA);
            Expression();
        }
    }

    public void AllocationExpression()
    {
        if (jj_2_37(2))
        {
            jj_consume_token(NEW);
            PrimitiveType();
            ArrayDimsAndInits();
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case NEW:
                    jj_consume_token(NEW);
                    ClassOrInterfaceType();
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case LT:
                            TypeArguments();
                            break;
                        default:
                            jj_la1[153] = jj_gen;
                            ;
                    }
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case LBRACKET:
                            ArrayDimsAndInits();
                            break;
                        case LPAREN:
                            Arguments();
                            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                            {
                                case LBRACE:
                                    ClassOrInterfaceBody();
                                    break;
                                default:
                                    jj_la1[154] = jj_gen;
                                    ;
                            }
                            break;
                        default:
                            jj_la1[155] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[156] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    /*
     * The third LOOKAHEAD specification below is to parse to PrimarySuffix
     * if there is an expression between the "[...]".
     */
    public void ArrayDimsAndInits()
    {
        if (jj_2_40(2))
        {
        label_50:
            while (true)
            {
                jj_consume_token(LBRACKET);
                Expression();
                jj_consume_token(RBRACKET);
                if (jj_2_38(2))
                {
                    ;
                }
                else
                {
                    break label_50;
                }
            }
        label_51:
            while (true)
            {
                if (jj_2_39(2))
                {
                    ;
                }
                else
                {
                    break label_51;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
            }
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case LBRACKET:
                label_52:
                    while (true)
                    {
                        jj_consume_token(LBRACKET);
                        jj_consume_token(RBRACKET);
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case LBRACKET:
                                ;
                                break;
                            default:
                                jj_la1[157] = jj_gen;
                                break label_52;
                        }
                    }
                    ArrayInitializer();
                    break;
                default:
                    jj_la1[158] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    /*
     * Statement syntax follows.
     */
    public void Statement()
    {
        if (jj_2_41(2))
        {
            LabeledStatement();
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case 138:
                    AssertStatement();
                    break;
                case LBRACE:
                    Block();
                    break;
                case SEMICOLON:
                    EmptyStatement();
                    break;
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case INCR:
                case DECR:
                case 132:
                case IDENTIFIER:
                    StatementExpression();
                    jj_consume_token(SEMICOLON);
                    break;
                case SWITCH:
                    SwitchStatement();
                    break;
                case IF:
                    IfStatement();
                    break;
                case WHILE:
                    WhileStatement();
                    break;
                case DO:
                    DoStatement();
                    break;
                case FOR:
                    ForStatement();
                    break;
                case BREAK:
                    BreakStatement();
                    break;
                case CONTINUE:
                    ContinueStatement();
                    break;
                case RETURN:
                    ReturnStatement();
                    break;
                case THROW:
                    ThrowStatement();
                    break;
                case SYNCHRONIZED:
                    SynchronizedStatement();
                    break;
                case TRY:
                    TryStatement();
                    break;
                default:
                    jj_la1[159] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void AssertStatement()
    {
        jj_consume_token(138);
        Expression();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case COLON:
                jj_consume_token(COLON);
                Expression();
                break;
            default:
                jj_la1[160] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
    }

    public void LabeledStatement()
    {
        JavaIdentifier();
        jj_consume_token(COLON);
        Statement();
    }

    public void Block()
    {
        jj_consume_token(LBRACE);
        if (!isJavaLanguage)
        {
            eatUptoCloseBrace();
        }
    label_53:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CLASS:
                case CONST:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case NEW:
                case NULL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case RETURN:
                case SHORT:
                case STATIC:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRANSIENT:
                case TRUE:
                case TRY:
                case VOID:
                case VOLATILE:
                case WHILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
                case 129:
                case 132:
                case 138:
                case 139:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[161] = jj_gen;
                    break label_53;
            }
            BlockStatement();
        }
        jj_consume_token(RBRACE);
    }

    public void BlockStatement()
    {
        if (jj_2_42(2147483647))
        {
            LocalVariableDeclaration();
            jj_consume_token(SEMICOLON);
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CONST:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case RETURN:
                case SHORT:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case VOID:
                case WHILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
                case 132:
                case 138:
                case IDENTIFIER:
                    Statement();
                    break;
                case CLASS:
                case INTERFACE:
                    ClassOrInterfaceDeclaration();
                    break;
                default:
                    jj_la1[162] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void LocalVariableDeclaration()
    {
        Modifiers();
        Type();
        VariableDeclarator();
    label_54:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[163] = jj_gen;
                    break label_54;
            }
            jj_consume_token(COMMA);
            VariableDeclarator();
        }
    }

    public void EmptyStatement()
    {
        jj_consume_token(SEMICOLON);
    }

    public void StatementExpression()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case INCR:
                PreIncrementExpression();
                break;
            case DECR:
                PreDecrementExpression();
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case 132:
            case IDENTIFIER:
                PrimaryExpression();
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case ASSIGN:
                    case INCR:
                    case DECR:
                    case PLUSASSIGN:
                    case MINUSASSIGN:
                    case STARASSIGN:
                    case SLASHASSIGN:
                    case ANDASSIGN:
                    case ORASSIGN:
                    case XORASSIGN:
                    case REMASSIGN:
                    case 134:
                    case 135:
                    case 136:
                        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                        {
                            case INCR:
                                jj_consume_token(INCR);
                                break;
                            case DECR:
                                jj_consume_token(DECR);
                                break;
                            case ASSIGN:
                            case PLUSASSIGN:
                            case MINUSASSIGN:
                            case STARASSIGN:
                            case SLASHASSIGN:
                            case ANDASSIGN:
                            case ORASSIGN:
                            case XORASSIGN:
                            case REMASSIGN:
                            case 134:
                            case 135:
                            case 136:
                                AssignmentOperator();
                                Expression();
                                break;
                            default:
                                jj_la1[164] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    default:
                        jj_la1[165] = jj_gen;
                        ;
                }
                break;
            default:
                jj_la1[166] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void SwitchStatement()
    {
        jj_consume_token(SWITCH);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
    label_55:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case CASE:
                case _DEFAULT:
                    ;
                    break;
                default:
                    jj_la1[167] = jj_gen;
                    break label_55;
            }
            SwitchLabel();
        label_56:
            while (true)
            {
                switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                {
                    case _LOOKAHEAD:
                    case _IGNORE_CASE:
                    case _PARSER_BEGIN:
                    case _PARSER_END:
                    case _JAVACODE:
                    case _TOKEN:
                    case _SPECIAL_TOKEN:
                    case _MORE:
                    case _SKIP:
                    case _TOKEN_MGR_DECLS:
                    case _EOF:
                    case ABSTRACT:
                    case BOOLEAN:
                    case BREAK:
                    case BYTE:
                    case CHAR:
                    case CLASS:
                    case CONST:
                    case CONTINUE:
                    case DO:
                    case DOUBLE:
                    case FALSE:
                    case FINAL:
                    case FLOAT:
                    case FOR:
                    case IF:
                    case INT:
                    case INTERFACE:
                    case LONG:
                    case NATIVE:
                    case NEW:
                    case NULL:
                    case PRIVATE:
                    case PROTECTED:
                    case PUBLIC:
                    case RETURN:
                    case SHORT:
                    case STATIC:
                    case SUPER:
                    case SWITCH:
                    case SYNCHRONIZED:
                    case THIS:
                    case THROW:
                    case TRANSIENT:
                    case TRUE:
                    case TRY:
                    case VOID:
                    case VOLATILE:
                    case WHILE:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case LPAREN:
                    case LBRACE:
                    case SEMICOLON:
                    case INCR:
                    case DECR:
                    case 129:
                    case 132:
                    case 138:
                    case 139:
                    case IDENTIFIER:
                        ;
                        break;
                    default:
                        jj_la1[168] = jj_gen;
                        break label_56;
                }
                BlockStatement();
            }
        }
        jj_consume_token(RBRACE);
    }

    public void SwitchLabel()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case CASE:
                jj_consume_token(CASE);
                Expression();
                jj_consume_token(COLON);
                break;
            case _DEFAULT:
                jj_consume_token(_DEFAULT);
                jj_consume_token(COLON);
                break;
            default:
                jj_la1[169] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void IfStatement()
    {
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Statement();
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case ELSE:
                jj_consume_token(ELSE);
                Statement();
                break;
            default:
                jj_la1[170] = jj_gen;
                ;
        }
    }

    public void WhileStatement()
    {
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Statement();
    }

    public void DoStatement()
    {
        jj_consume_token(DO);
        Statement();
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMICOLON);
    }

    public void ForStatement()
    {
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        if (jj_2_43(2147483647))
        {
            Modifiers();
            Type();
            JavaIdentifier();
            jj_consume_token(COLON);
            Expression();
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case NATIVE:
                case NEW:
                case NULL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case SUPER:
                case SYNCHRONIZED:
                case THIS:
                case TRANSIENT:
                case TRUE:
                case VOID:
                case VOLATILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case SEMICOLON:
                case INCR:
                case DECR:
                case 129:
                case 132:
                case 139:
                case IDENTIFIER:
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case ABSTRACT:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CONST:
                        case DOUBLE:
                        case FALSE:
                        case FINAL:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NATIVE:
                        case NEW:
                        case NULL:
                        case PRIVATE:
                        case PROTECTED:
                        case PUBLIC:
                        case SHORT:
                        case STATIC:
                        case SUPER:
                        case SYNCHRONIZED:
                        case THIS:
                        case TRANSIENT:
                        case TRUE:
                        case VOID:
                        case VOLATILE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case INCR:
                        case DECR:
                        case 129:
                        case 132:
                        case 139:
                        case IDENTIFIER:
                            ForInit();
                            break;
                        default:
                            jj_la1[171] = jj_gen;
                            ;
                    }
                    jj_consume_token(SEMICOLON);
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CONST:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case VOID:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case BANG:
                        case TILDE:
                        case INCR:
                        case DECR:
                        case PLUS:
                        case MINUS:
                        case 132:
                        case IDENTIFIER:
                            Expression();
                            break;
                        default:
                            jj_la1[172] = jj_gen;
                            ;
                    }
                    jj_consume_token(SEMICOLON);
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case CONST:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case VOID:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case INCR:
                        case DECR:
                        case 132:
                        case IDENTIFIER:
                            ForUpdate();
                            break;
                        default:
                            jj_la1[173] = jj_gen;
                            ;
                    }
                    break;
                default:
                    jj_la1[174] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(RPAREN);
        Statement();
    }

    public void ForInit()
    {
        if (jj_2_44(2147483647))
        {
            LocalVariableDeclaration();
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CONST:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case INCR:
                case DECR:
                case 132:
                case IDENTIFIER:
                    StatementExpressionList();
                    break;
                default:
                    jj_la1[175] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void StatementExpressionList()
    {
        StatementExpression();
    label_57:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[176] = jj_gen;
                    break label_57;
            }
            jj_consume_token(COMMA);
            StatementExpression();
        }
    }

    public void ForUpdate()
    {
        StatementExpressionList();
    }

    public void BreakStatement()
    {
        jj_consume_token(BREAK);
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case IDENTIFIER:
                JavaIdentifier();
                break;
            default:
                jj_la1[177] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
    }

    public void ContinueStatement()
    {
        jj_consume_token(CONTINUE);
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case IDENTIFIER:
                JavaIdentifier();
                break;
            default:
                jj_la1[178] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
    }

    public void ReturnStatement()
    {
        jj_consume_token(RETURN);
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 132:
            case IDENTIFIER:
                Expression();
                break;
            default:
                jj_la1[179] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
    }

    public void ThrowStatement()
    {
        jj_consume_token(THROW);
        Expression();
        jj_consume_token(SEMICOLON);
    }

    public void SynchronizedStatement()
    {
        jj_consume_token(SYNCHRONIZED);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Block();
    }

    public void TryStatement()
    {
        jj_consume_token(TRY);
        Block();
    label_58:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case CATCH:
                    ;
                    break;
                default:
                    jj_la1[180] = jj_gen;
                    break label_58;
            }
            jj_consume_token(CATCH);
            jj_consume_token(LPAREN);
            FormalParameter();
            jj_consume_token(RPAREN);
            Block();
        }
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case FINALLY:
                jj_consume_token(FINALLY);
                Block();
                break;
            default:
                jj_la1[181] = jj_gen;
                ;
        }
    }

    /* We use productions to match >>>, >> and > so that we can keep the
     * type declaration syntax with generics clean
     */
    public void RUNSIGNEDSHIFT()
    {
        if (getToken(1).kind == GT &&
                        ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT)
        {

        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        jj_consume_token(GT);
        jj_consume_token(GT);
        jj_consume_token(GT);
    }

    public void RSIGNEDSHIFT()
    {
        if (getToken(1).kind == GT &&
                        ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT)
        {

        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        jj_consume_token(GT);
        jj_consume_token(GT);
    }

    /* Annotation syntax follows. */
    public void Annotation()
    {
        if (jj_2_45(2147483647))
        {
            NormalAnnotation();
        }
        else if (jj_2_46(2147483647))
        {
            SingleMemberAnnotation();
        }
        else
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case 139:
                    MarkerAnnotation();
                    break;
                default:
                    jj_la1[182] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    public void NormalAnnotation()
    {
        jj_consume_token(139);
        Name();
        jj_consume_token(LPAREN);
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case IDENTIFIER:
                MemberValuePairs();
                break;
            default:
                jj_la1[183] = jj_gen;
                ;
        }
        jj_consume_token(RPAREN);
    }

    public void MarkerAnnotation()
    {
        jj_consume_token(139);
        Name();
    }

    public void SingleMemberAnnotation()
    {
        jj_consume_token(139);
        Name();
        jj_consume_token(LPAREN);
        MemberValue();
        jj_consume_token(RPAREN);
    }

    public void MemberValuePairs()
    {
        MemberValuePair();
    label_59:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case COMMA:
                    ;
                    break;
                default:
                    jj_la1[184] = jj_gen;
                    break label_59;
            }
            jj_consume_token(COMMA);
            MemberValuePair();
        }
    }

    public void MemberValuePair()
    {
        JavaIdentifier();
        jj_consume_token(ASSIGN);
        MemberValue();
    }

    public void MemberValue()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case 139:
                Annotation();
                break;
            case LBRACE:
                MemberValueArrayInitializer();
                break;
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CONST:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case 132:
            case IDENTIFIER:
                ConditionalExpression();
                break;
            default:
                jj_la1[185] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void MemberValueArrayInitializer()
    {
        jj_consume_token(LBRACE);
        MemberValue();
    label_60:
        while (true)
        {
            if (jj_2_47(2))
            {
                ;
            }
            else
            {
                break label_60;
            }
            jj_consume_token(COMMA);
            MemberValue();
        }
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case COMMA:
                jj_consume_token(COMMA);
                break;
            default:
                jj_la1[186] = jj_gen;
                ;
        }
        jj_consume_token(RBRACE);
    }

    /* Annotation Types. */
    public void AnnotationTypeDeclaration()
    {
        jj_consume_token(139);
        jj_consume_token(INTERFACE);
        JavaIdentifier();
        AnnotationTypeBody();
    }

    public void AnnotationTypeBody()
    {
        jj_consume_token(LBRACE);
    label_61:
        while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
            {
                case _LOOKAHEAD:
                case _IGNORE_CASE:
                case _PARSER_BEGIN:
                case _PARSER_END:
                case _JAVACODE:
                case _TOKEN:
                case _SPECIAL_TOKEN:
                case _MORE:
                case _SKIP:
                case _TOKEN_MGR_DECLS:
                case _EOF:
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case CLASS:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case INTERFACE:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOLATILE:
                case SEMICOLON:
                case 129:
                case 130:
                case 132:
                case 139:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[187] = jj_gen;
                    break label_61;
            }
            AnnotationTypeMemberDeclaration();
        }
        jj_consume_token(RBRACE);
    }

    public void AnnotationTypeMemberDeclaration()
    {
        switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
        {
            case _LOOKAHEAD:
            case _IGNORE_CASE:
            case _PARSER_BEGIN:
            case _PARSER_END:
            case _JAVACODE:
            case _TOKEN:
            case _SPECIAL_TOKEN:
            case _MORE:
            case _SKIP:
            case _TOKEN_MGR_DECLS:
            case _EOF:
            case ABSTRACT:
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case CLASS:
            case DOUBLE:
            case FINAL:
            case FLOAT:
            case INT:
            case INTERFACE:
            case LONG:
            case NATIVE:
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
            case SHORT:
            case STATIC:
            case SYNCHRONIZED:
            case TRANSIENT:
            case VOLATILE:
            case 129:
            case 130:
            case 132:
            case 139:
            case IDENTIFIER:
                Modifiers();
                if (jj_2_48(2147483647))
                {
                    Type();
                    JavaIdentifier();
                    jj_consume_token(LPAREN);
                    jj_consume_token(RPAREN);
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case _DEFAULT:
                            DefaultValue();
                            break;
                        default:
                            jj_la1[188] = jj_gen;
                            ;
                    }
                    jj_consume_token(SEMICOLON);
                }
                else
                {
                    switch ((jj_ntk == -1) ? jj_ntk_func() : jj_ntk)
                    {
                        case CLASS:
                        case INTERFACE:
                            ClassOrInterfaceDeclaration();
                            break;
                        case 130:
                            EnumDeclaration();
                            break;
                        case 139:
                            AnnotationTypeDeclaration();
                            break;
                        case _LOOKAHEAD:
                        case _IGNORE_CASE:
                        case _PARSER_BEGIN:
                        case _PARSER_END:
                        case _JAVACODE:
                        case _TOKEN:
                        case _SPECIAL_TOKEN:
                        case _MORE:
                        case _SKIP:
                        case _TOKEN_MGR_DECLS:
                        case _EOF:
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case SHORT:
                        case 132:
                        case IDENTIFIER:
                            FieldDeclaration();
                            break;
                        default:
                            jj_la1[189] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[190] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    public void DefaultValue()
    {
        jj_consume_token(_DEFAULT);
        MemberValue();
    }

    private bool jj_2_1(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_1(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(0, xla); }
    }

    private bool jj_2_2(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_2(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(1, xla); }
    }

    private bool jj_2_3(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_3(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(2, xla); }
    }

    private bool jj_2_4(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_4(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(3, xla); }
    }

    private bool jj_2_5(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_5(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(4, xla); }
    }

    private bool jj_2_6(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_6(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(5, xla); }
    }

    private bool jj_2_7(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_7(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(6, xla); }
    }

    private bool jj_2_8(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_8(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(7, xla); }
    }

    private bool jj_2_9(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_9(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(8, xla); }
    }

    private bool jj_2_10(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_10(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(9, xla); }
    }

    private bool jj_2_11(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_11(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(10, xla); }
    }

    private bool jj_2_12(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_12(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(11, xla); }
    }

    private bool jj_2_13(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_13(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(12, xla); }
    }

    private bool jj_2_14(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_14(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(13, xla); }
    }

    private bool jj_2_15(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_15(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(14, xla); }
    }

    private bool jj_2_16(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_16(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(15, xla); }
    }

    private bool jj_2_17(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_17(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(16, xla); }
    }

    private bool jj_2_18(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_18(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(17, xla); }
    }

    private bool jj_2_19(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_19(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(18, xla); }
    }

    private bool jj_2_20(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_20(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(19, xla); }
    }

    private bool jj_2_21(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_21(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(20, xla); }
    }

    private bool jj_2_22(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_22(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(21, xla); }
    }

    private bool jj_2_23(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_23(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(22, xla); }
    }

    private bool jj_2_24(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_24(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(23, xla); }
    }

    private bool jj_2_25(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_25(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(24, xla); }
    }

    private bool jj_2_26(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_26(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(25, xla); }
    }

    private bool jj_2_27(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_27(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(26, xla); }
    }

    private bool jj_2_28(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_28(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(27, xla); }
    }

    private bool jj_2_29(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_29(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(28, xla); }
    }

    private bool jj_2_30(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_30(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(29, xla); }
    }

    private bool jj_2_31(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_31(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(30, xla); }
    }

    private bool jj_2_32(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_32(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(31, xla); }
    }

    private bool jj_2_33(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_33(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(32, xla); }
    }

    private bool jj_2_34(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_34(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(33, xla); }
    }

    private bool jj_2_35(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_35(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(34, xla); }
    }

    private bool jj_2_36(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_36(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(35, xla); }
    }

    private bool jj_2_37(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_37(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(36, xla); }
    }

    private bool jj_2_38(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_38(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(37, xla); }
    }

    private bool jj_2_39(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_39(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(38, xla); }
    }

    private bool jj_2_40(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_40(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(39, xla); }
    }

    private bool jj_2_41(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_41(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(40, xla); }
    }

    private bool jj_2_42(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_42(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(41, xla); }
    }

    private bool jj_2_43(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_43(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(42, xla); }
    }

    private bool jj_2_44(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_44(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(43, xla); }
    }

    private bool jj_2_45(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_45(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(44, xla); }
    }

    private bool jj_2_46(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_46(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(45, xla); }
    }

    private bool jj_2_47(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_47(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(46, xla); }
    }

    private bool jj_2_48(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_48(); }
        catch (LookaheadSuccess ls) { return true; }
        finally { jj_save(47, xla); }
    }

    private bool jj_3R_258()
    {
        if (jj_scan_token(INCR)) return true;
        if (jj_3R_63()) return true;
        return false;
    }

    private bool jj_3R_170()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_183()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_184())
        {
            jj_scanpos = xsp;
            if (jj_3R_185()) return true;
        }
        return false;
    }

    private bool jj_3_2()
    {
        if (jj_3R_62()) return true;
        return false;
    }

    private bool jj_3R_309()
    {
        if (jj_3R_318()) return true;
        return false;
    }

    private bool jj_3_25()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(137))
        {
            jj_scanpos = xsp;
            if (jj_3_26())
            {
                jj_scanpos = xsp;
                if (jj_3_27()) return true;
            }
        }
        if (jj_3R_272()) return true;
        return false;
    }

    private bool jj_3R_308()
    {
        if (jj_3R_259()) return true;
        return false;
    }

    private bool jj_3R_307()
    {
        if (jj_3R_258()) return true;
        return false;
    }

    private bool jj_3R_306()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(110))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(111)) return true;
        }
        if (jj_3R_296()) return true;
        return false;
    }

    private bool jj_3R_296()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_306())
        {
            jj_scanpos = xsp;
            if (jj_3R_307())
            {
                jj_scanpos = xsp;
                if (jj_3R_308())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_309()) return true;
                }
            }
        }
        return false;
    }

    private bool jj_3R_169()
    {
        if (jj_scan_token(TRY)) return true;
        return false;
    }

    private bool jj_3R_279()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(96))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(128))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(103))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(104)) return true;
                }
            }
        }
        if (jj_3R_265()) return true;
        return false;
    }

    private bool jj_3R_273()
    {
        if (jj_scan_token(INSTANCEOF)) return true;
        if (jj_3R_75()) return true;
        return false;
    }

    private bool jj_3R_278()
    {
        if (jj_3R_296()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_319()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_168()
    {
        if (jj_scan_token(LBRACKET)) return true;
        return false;
    }

    private bool jj_3R_167()
    {
        if (jj_3R_106()) return true;
        return false;
    }

    private bool jj_3R_266()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(102))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(105)) return true;
        }
        if (jj_3R_254()) return true;
        return false;
    }

    private bool jj_3R_272()
    {
        if (jj_3R_278()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_310()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_166()
    {
        if (jj_scan_token(_LOOKAHEAD)) return true;
        return false;
    }

    private bool jj_3R_265()
    {
        if (jj_3R_272()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_25()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_261()
    {
        if (jj_scan_token(BIT_AND)) return true;
        if (jj_3R_246()) return true;
        return false;
    }

    private bool jj_3R_155()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_166())
        {
            jj_scanpos = xsp;
            if (jj_3R_167())
            {
                jj_scanpos = xsp;
                if (jj_3R_168())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_169())
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_170())
                        {
                            jj_scanpos = xsp;
                            if (jj_3R_171()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_260()
    {
        if (jj_3R_265()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_279()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_247()
    {
        if (jj_scan_token(BIT_OR)) return true;
        if (jj_3R_198()) return true;
        return false;
    }

    private bool jj_3R_254()
    {
        if (jj_3R_260()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_273()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_255()
    {
        if (jj_scan_token(XOR)) return true;
        if (jj_3R_225()) return true;
        return false;
    }

    private bool jj_3R_228()
    {
        if (jj_scan_token(SC_AND)) return true;
        if (jj_3R_182()) return true;
        return false;
    }

    private bool jj_3R_246()
    {
        if (jj_3R_254()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_266()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_202()
    {
        if (jj_scan_token(SC_OR)) return true;
        if (jj_3R_165()) return true;
        return false;
    }

    private bool jj_3R_225()
    {
        if (jj_3R_246()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_261()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_187()
    {
        if (jj_scan_token(HOOK)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_84()) return true;
        return false;
    }

    private bool jj_3R_198()
    {
        if (jj_3R_225()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_255()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_182()
    {
        if (jj_3R_198()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_247()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_165()
    {
        if (jj_3R_182()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_228()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_150()
    {
        if (jj_3R_165()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_202()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_115()
    {
        if (jj_3R_150()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_187()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_83()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(95))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(120))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(121))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(125))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(118))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(119))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(134))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(135))
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(136))
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(122))
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(124))
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_scan_token(123)) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3_24()
    {
        if (jj_3R_83()) return true;
        if (jj_3R_84()) return true;
        return false;
    }

    private bool jj_3R_130()
    {
        if (jj_3R_155()) return true;
        return false;
    }

    private bool jj_3R_129()
    {
        if (jj_scan_token(_LOOKAHEAD)) return true;
        return false;
    }

    private bool jj_3R_98()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_129()) jj_scanpos = xsp;
        if (jj_3R_130()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_130()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_84()
    {
        if (jj_3R_115()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_24()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_316()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_95()) return true;
        return false;
    }

    private bool jj_3R_62()
    {
        if (jj_3R_98()) return true;
        return false;
    }

    private bool jj_3R_302()
    {
        if (jj_3R_95()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_316()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_153()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(112))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(114)) return true;
        }
        return false;
    }

    private bool jj_3_23()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_74()) return true;
        return false;
    }

    private bool jj_3R_95()
    {
        if (jj_3R_74()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_23()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_124()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(32)) jj_scanpos = xsp;
        if (jj_3R_75()) return true;
        xsp = jj_scanpos;
        if (jj_3R_153()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_123()
    {
        if (jj_scan_token(VOID)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(112)) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3_22()
    {
        if (jj_3R_82()) return true;
        return false;
    }

    private bool jj_3R_90()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_123())
        {
            jj_scanpos = xsp;
            if (jj_3R_124()) return true;
        }
        return false;
    }

    private bool jj_3_1()
    {
        if (jj_scan_token(LT)) return true;
        if (jj_scan_token(STAR)) return true;
        return false;
    }

    private bool jj_3R_88()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(25))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(30))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(27))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(60))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(49))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(51))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(42))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(36)) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_205()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_114()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(131)) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_264()
    {
        if (jj_scan_token(SUPER)) return true;
        if (jj_3R_81()) return true;
        return false;
    }

    private bool jj_3R_250()
    {
        if (jj_3R_257()) return true;
        return false;
    }

    private bool jj_3R_257()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_263())
        {
            jj_scanpos = xsp;
            if (jj_3R_264()) return true;
        }
        return false;
    }

    private bool jj_3R_263()
    {
        if (jj_scan_token(EXTENDS)) return true;
        if (jj_3R_81()) return true;
        return false;
    }

    private bool jj_3_20()
    {
        if (jj_3R_82()) return true;
        return false;
    }

    private bool jj_3_19()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_149()
    {
        if (jj_scan_token(HOOK)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_250()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_148()
    {
        if (jj_3R_81()) return true;
        return false;
    }

    private bool jj_3R_114()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_148())
        {
            jj_scanpos = xsp;
            if (jj_3R_149()) return true;
        }
        return false;
    }

    private bool jj_3R_210()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_209()) return true;
        return false;
    }

    private bool jj_3R_82()
    {
        if (jj_scan_token(LT)) return true;
        if (jj_3R_114()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_205()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private bool jj_3_21()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(93))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(101)) return true;
        }
        if (jj_3R_74()) return true;
        xsp = jj_scanpos;
        if (jj_3_22()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_147()
    {
        if (jj_3R_74()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_20()) jj_scanpos = xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_21()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_232()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(31))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(133)) return true;
        }
        return false;
    }

    private bool jj_3R_209()
    {
        if (jj_3R_232()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(131)) jj_scanpos = xsp;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private bool jj_3_18()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_164()
    {
        if (jj_scan_token(132)) return true;
        if (jj_scan_token(LT)) return true;
        if (jj_3R_209()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_210()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private bool jj_3_48()
    {
        if (jj_3R_75()) return true;
        if (jj_3R_74()) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private bool jj_3R_146()
    {
        if (jj_3R_164()) return true;
        return false;
    }

    private bool jj_3R_113()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_146()) jj_scanpos = xsp;
        if (jj_3R_147()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_19()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_112()
    {
        if (jj_3R_88()) return true;
        Token xsp;
        if (jj_3_18()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_18()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_81()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_112())
        {
            jj_scanpos = xsp;
            if (jj_3R_113()) return true;
        }
        return false;
    }

    private bool jj_3R_287()
    {
        if (jj_scan_token(THROWS)) return true;
        if (jj_3R_302()) return true;
        return false;
    }

    private bool jj_3_47()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_105()
    {
        if (jj_3R_88()) return true;
        return false;
    }

    private bool jj_3_17()
    {
        if (jj_3R_81()) return true;
        return false;
    }

    private bool jj_3R_75()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_17())
        {
            jj_scanpos = xsp;
            if (jj_3R_105()) return true;
        }
        return false;
    }

    private bool jj_3_16()
    {
        if (jj_scan_token(THIS)) return true;
        if (jj_3R_80()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_77()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(61)) jj_scanpos = xsp;
        if (jj_3R_106()) return true;
        return false;
    }

    private bool jj_3_14()
    {
        if (jj_3R_79()) return true;
        return false;
    }

    private bool jj_3_15()
    {
        if (jj_3R_63()) return true;
        if (jj_scan_token(DOT)) return true;
        return false;
    }

    private bool jj_3R_154()
    {
        if (jj_scan_token(LBRACE)) return true;
        if (jj_3R_97()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_47()) { jj_scanpos = xsp; break; }
        }
        xsp = jj_scanpos;
        if (jj_scan_token(92)) jj_scanpos = xsp;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_208()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_207()) return true;
        return false;
    }

    private bool jj_3R_322()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(114))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(112))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(131)) return true;
            }
        }
        return false;
    }

    private bool jj_3R_110()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_15()) jj_scanpos = xsp;
        if (jj_scan_token(SUPER)) return true;
        if (jj_3R_80()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_305()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_109()
    {
        if (jj_scan_token(THIS)) return true;
        if (jj_3R_80()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_79()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_109())
        {
            jj_scanpos = xsp;
            if (jj_3R_110()) return true;
        }
        return false;
    }

    private bool jj_3R_128()
    {
        if (jj_3R_115()) return true;
        return false;
    }

    private bool jj_3R_127()
    {
        if (jj_3R_154()) return true;
        return false;
    }

    private bool jj_3R_315()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_314()) return true;
        return false;
    }

    private bool jj_3R_289()
    {
        if (jj_3R_162()) return true;
        return false;
    }

    private bool jj_3R_288()
    {
        if (jj_3R_79()) return true;
        return false;
    }

    private bool jj_3R_126()
    {
        if (jj_3R_103()) return true;
        return false;
    }

    private bool jj_3R_97()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_126())
        {
            jj_scanpos = xsp;
            if (jj_3R_127())
            {
                jj_scanpos = xsp;
                if (jj_3R_128()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_207()
    {
        if (jj_3R_74()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        if (jj_3R_97()) return true;
        return false;
    }

    private bool jj_3R_285()
    {
        if (jj_3R_104()) return true;
        return false;
    }

    private bool jj_3R_275()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_285()) jj_scanpos = xsp;
        if (jj_3R_74()) return true;
        if (jj_3R_286()) return true;
        xsp = jj_scanpos;
        if (jj_3R_287()) jj_scanpos = xsp;
        if (jj_scan_token(LBRACE)) return true;
        xsp = jj_scanpos;
        if (jj_3R_288()) jj_scanpos = xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_289()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_193()
    {
        if (jj_3R_207()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_208()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_177()
    {
        if (jj_3R_193()) return true;
        return false;
    }

    private bool jj_3R_314()
    {
        if (jj_3R_94()) return true;
        if (jj_3R_75()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_322()) jj_scanpos = xsp;
        if (jj_3R_303()) return true;
        return false;
    }

    private bool jj_3R_96()
    {
        if (jj_3R_74()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private bool jj_3R_294()
    {
        if (jj_scan_token(THROWS)) return true;
        if (jj_3R_302()) return true;
        return false;
    }

    private bool jj_3_13()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_78()) return true;
        return false;
    }

    private bool jj_3R_301()
    {
        if (jj_3R_314()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_315()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_159()
    {
        if (jj_scan_token(139)) return true;
        if (jj_3R_95()) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_97()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3R_286()
    {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_301()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3R_160()
    {
        if (jj_scan_token(139)) return true;
        if (jj_3R_95()) return true;
        return false;
    }

    private bool jj_3_46()
    {
        if (jj_scan_token(139)) return true;
        if (jj_3R_95()) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private bool jj_3R_158()
    {
        if (jj_scan_token(139)) return true;
        if (jj_3R_95()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_177()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3_45()
    {
        if (jj_scan_token(139)) return true;
        if (jj_3R_95()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_96())
        {
            jj_scanpos = xsp;
            if (jj_scan_token(86)) return true;
        }
        return false;
    }

    private bool jj_3R_293()
    {
        if (jj_3R_74()) return true;
        if (jj_3R_286()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_305()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_295()
    {
        if (jj_3R_106()) return true;
        return false;
    }

    private bool jj_3R_140()
    {
        if (jj_3R_160()) return true;
        return false;
    }

    private bool jj_3R_292()
    {
        if (jj_3R_104()) return true;
        return false;
    }

    private bool jj_3R_139()
    {
        if (jj_3R_159()) return true;
        return false;
    }

    private bool jj_3R_277()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_292()) jj_scanpos = xsp;
        if (jj_3R_90()) return true;
        if (jj_3R_293()) return true;
        xsp = jj_scanpos;
        if (jj_3R_294()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_295())
        {
            jj_scanpos = xsp;
            if (jj_scan_token(91)) return true;
        }
        return false;
    }

    private bool jj_3R_248()
    {
        if (jj_3R_78()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_13()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_138()
    {
        if (jj_3R_158()) return true;
        return false;
    }

    private bool jj_3R_116()
    {
        return false;
    }

    private bool jj_3R_103()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_138())
        {
            jj_scanpos = xsp;
            if (jj_3R_139())
            {
                jj_scanpos = xsp;
                if (jj_3R_140()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_317()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_304()
    {
        if (jj_scan_token(ASSIGN)) return true;
        if (jj_3R_78()) return true;
        return false;
    }

    private bool jj_3R_291()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_290()) return true;
        return false;
    }

    private bool jj_3R_76()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_144()
    {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_248()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(92)) jj_scanpos = xsp;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_117()
    {
        return false;
    }

    private bool jj_3R_108()
    {
        if (jj_3R_84()) return true;
        return false;
    }

    private bool jj_3R_85()
    {
        jj_lookingAhead = true;
        jj_semLA = getToken(1).kind == GT &&
                    ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_116()) return true;
        if (jj_scan_token(GT)) return true;
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private bool jj_3R_107()
    {
        if (jj_3R_144()) return true;
        return false;
    }

    private bool jj_3R_78()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_107())
        {
            jj_scanpos = xsp;
            if (jj_3R_108()) return true;
        }
        return false;
    }

    private bool jj_3R_303()
    {
        if (jj_3R_74()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_317()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_86()
    {
        jj_lookingAhead = true;
        jj_semLA = getToken(1).kind == GT &&
                    ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_117()) return true;
        if (jj_scan_token(GT)) return true;
        if (jj_scan_token(GT)) return true;
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private bool jj_3R_290()
    {
        if (jj_3R_303()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_304()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_340()
    {
        if (jj_scan_token(FINALLY)) return true;
        if (jj_3R_106()) return true;
        return false;
    }

    private bool jj_3R_339()
    {
        if (jj_scan_token(CATCH)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_314()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_106()) return true;
        return false;
    }

    private bool jj_3_11()
    {
        if (jj_3R_75()) return true;
        if (jj_3R_74()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_76()) { jj_scanpos = xsp; break; }
        }
        xsp = jj_scanpos;
        if (jj_scan_token(92))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(95))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(91)) return true;
            }
        }
        return false;
    }

    private bool jj_3R_73()
    {
        if (jj_3R_104()) return true;
        return false;
    }

    private bool jj_3R_276()
    {
        if (jj_3R_75()) return true;
        if (jj_3R_290()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_291()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3_10()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_73()) jj_scanpos = xsp;
        if (jj_3R_74()) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private bool jj_3R_245()
    {
        if (jj_scan_token(TRY)) return true;
        if (jj_3R_106()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_339()) { jj_scanpos = xsp; break; }
        }
        xsp = jj_scanpos;
        if (jj_3R_340()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_271()
    {
        if (jj_3R_277()) return true;
        return false;
    }

    private bool jj_3R_194()
    {
        if (jj_scan_token(BIT_AND)) return true;
        if (jj_3R_147()) return true;
        return false;
    }

    private bool jj_3R_270()
    {
        if (jj_3R_276()) return true;
        return false;
    }

    private bool jj_3R_244()
    {
        if (jj_scan_token(SYNCHRONIZED)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_106()) return true;
        return false;
    }

    private bool jj_3R_338()
    {
        if (jj_3R_84()) return true;
        return false;
    }

    private bool jj_3R_269()
    {
        if (jj_3R_275()) return true;
        return false;
    }

    private bool jj_3R_268()
    {
        if (jj_3R_274()) return true;
        return false;
    }

    private bool jj_3R_321()
    {
        if (jj_3R_230()) return true;
        return false;
    }

    private bool jj_3R_337()
    {
        if (jj_3R_74()) return true;
        return false;
    }

    private bool jj_3R_267()
    {
        if (jj_3R_197()) return true;
        return false;
    }

    private bool jj_3R_243()
    {
        if (jj_scan_token(THROW)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_346()
    {
        if (jj_3R_352()) return true;
        return false;
    }

    private bool jj_3R_356()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_234()) return true;
        return false;
    }

    private bool jj_3R_262()
    {
        if (jj_3R_94()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_267())
        {
            jj_scanpos = xsp;
            if (jj_3R_268())
            {
                jj_scanpos = xsp;
                if (jj_3R_269())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_270())
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_271()) return true;
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_242()
    {
        if (jj_scan_token(RETURN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_338()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_336()
    {
        if (jj_3R_74()) return true;
        return false;
    }

    private bool jj_3_12()
    {
        if (jj_3R_77()) return true;
        return false;
    }

    private bool jj_3R_256()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_12())
        {
            jj_scanpos = xsp;
            if (jj_3R_262())
            {
                jj_scanpos = xsp;
                if (jj_scan_token(91)) return true;
            }
        }
        return false;
    }

    private bool jj_3R_241()
    {
        if (jj_scan_token(CONTINUE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_337()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_161()
    {
        if (jj_3R_178()) return true;
        return false;
    }

    private bool jj_3R_320()
    {
        if (jj_3R_80()) return true;
        return false;
    }

    private bool jj_3R_249()
    {
        if (jj_3R_256()) return true;
        return false;
    }

    private bool jj_3R_142()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_141()) return true;
        return false;
    }

    private bool jj_3R_230()
    {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_249()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_240()
    {
        if (jj_scan_token(BREAK)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_336()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_352()
    {
        if (jj_3R_355()) return true;
        return false;
    }

    private bool jj_3R_345()
    {
        if (jj_3R_84()) return true;
        return false;
    }

    private bool jj_3R_178()
    {
        if (jj_scan_token(EXTENDS)) return true;
        if (jj_3R_147()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_194()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3_44()
    {
        if (jj_3R_94()) return true;
        if (jj_3R_75()) return true;
        if (jj_3R_74()) return true;
        return false;
    }

    private bool jj_3R_355()
    {
        if (jj_3R_234()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_356()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_333()
    {
        if (jj_scan_token(ELSE)) return true;
        if (jj_3R_196()) return true;
        return false;
    }

    private bool jj_3R_141()
    {
        if (jj_3R_74()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_161()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3_9()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_72()) return true;
        return false;
    }

    private bool jj_3R_354()
    {
        if (jj_3R_355()) return true;
        return false;
    }

    private bool jj_3_43()
    {
        if (jj_3R_94()) return true;
        if (jj_3R_75()) return true;
        if (jj_3R_74()) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private bool jj_3R_104()
    {
        if (jj_scan_token(LT)) return true;
        if (jj_3R_141()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_142()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private bool jj_3R_353()
    {
        if (jj_3R_195()) return true;
        return false;
    }

    private bool jj_3R_351()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_353())
        {
            jj_scanpos = xsp;
            if (jj_3R_354()) return true;
        }
        return false;
    }

    private bool jj_3R_344()
    {
        if (jj_3R_351()) return true;
        return false;
    }

    private bool jj_3R_313()
    {
        if (jj_3R_256()) return true;
        return false;
    }

    private bool jj_3R_335()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_344()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        xsp = jj_scanpos;
        if (jj_3R_345()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        xsp = jj_scanpos;
        if (jj_3R_346()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_72()
    {
        if (jj_3R_94()) return true;
        if (jj_3R_74()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_320()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_321()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_334()
    {
        if (jj_3R_94()) return true;
        if (jj_3R_75()) return true;
        if (jj_3R_74()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_84()) return true;
        return false;
    }

    private bool jj_3R_300()
    {
        if (jj_scan_token(SEMICOLON)) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_313()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_299()
    {
        if (jj_3R_72()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_9()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_284()
    {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_299()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(92)) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_300()) jj_scanpos = xsp;
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_239()
    {
        if (jj_scan_token(FOR)) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_334())
        {
            jj_scanpos = xsp;
            if (jj_3R_335()) return true;
        }
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_196()) return true;
        return false;
    }

    private bool jj_3R_283()
    {
        if (jj_3R_298()) return true;
        return false;
    }

    private bool jj_3R_238()
    {
        if (jj_scan_token(DO)) return true;
        if (jj_3R_196()) return true;
        if (jj_scan_token(WHILE)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_274()
    {
        if (jj_scan_token(130)) return true;
        if (jj_3R_74()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_283()) jj_scanpos = xsp;
        if (jj_3R_284()) return true;
        return false;
    }

    private bool jj_3R_312()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_147()) return true;
        return false;
    }

    private bool jj_3R_237()
    {
        if (jj_scan_token(WHILE)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_196()) return true;
        return false;
    }

    private bool jj_3R_298()
    {
        if (jj_scan_token(IMPLEMENTS)) return true;
        if (jj_3R_147()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_312()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_343()
    {
        if (jj_3R_162()) return true;
        return false;
    }

    private bool jj_3R_236()
    {
        if (jj_scan_token(IF)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_196()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_333()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_311()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_147()) return true;
        return false;
    }

    private bool jj_3R_297()
    {
        if (jj_scan_token(EXTENDS)) return true;
        if (jj_3R_147()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_311()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_350()
    {
        if (jj_scan_token(_DEFAULT)) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private bool jj_3R_349()
    {
        if (jj_scan_token(CASE)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private bool jj_3R_342()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_349())
        {
            jj_scanpos = xsp;
            if (jj_3R_350()) return true;
        }
        return false;
    }

    private bool jj_3R_326()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_290()) return true;
        return false;
    }

    private bool jj_3R_332()
    {
        if (jj_3R_342()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_343()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_282()
    {
        if (jj_3R_298()) return true;
        return false;
    }

    private bool jj_3R_281()
    {
        if (jj_3R_297()) return true;
        return false;
    }

    private bool jj_3R_235()
    {
        if (jj_scan_token(SWITCH)) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_332()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3R_280()
    {
        if (jj_3R_104()) return true;
        return false;
    }

    private bool jj_3R_348()
    {
        if (jj_3R_83()) return true;
        if (jj_3R_84()) return true;
        return false;
    }

    private bool jj_3R_197()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(31))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(50)) return true;
        }
        if (jj_3R_74()) return true;
        xsp = jj_scanpos;
        if (jj_3R_280()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_281()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_282()) jj_scanpos = xsp;
        if (jj_3R_230()) return true;
        return false;
    }

    private bool jj_3R_341()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(108))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(109))
            {
                jj_scanpos = xsp;
                if (jj_3R_348()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_253()
    {
        if (jj_3R_63()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_341()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_252()
    {
        if (jj_3R_259()) return true;
        return false;
    }

    private bool jj_3R_234()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_251())
        {
            jj_scanpos = xsp;
            if (jj_3R_252())
            {
                jj_scanpos = xsp;
                if (jj_3R_253()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_251()
    {
        if (jj_3R_258()) return true;
        return false;
    }

    private bool jj_3_42()
    {
        if (jj_3R_94()) return true;
        if (jj_3R_75()) return true;
        if (jj_3R_74()) return true;
        return false;
    }

    private bool jj_3R_195()
    {
        if (jj_3R_94()) return true;
        if (jj_3R_75()) return true;
        if (jj_3R_290()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_326()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_71()
    {
        if (jj_3R_103()) return true;
        return false;
    }

    private bool jj_3R_181()
    {
        if (jj_3R_197()) return true;
        return false;
    }

    private bool jj_3R_180()
    {
        if (jj_3R_196()) return true;
        return false;
    }

    private bool jj_3R_162()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_179())
        {
            jj_scanpos = xsp;
            if (jj_3R_180())
            {
                jj_scanpos = xsp;
                if (jj_3R_181()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_179()
    {
        if (jj_3R_195()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_331()
    {
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_84()) return true;
        return false;
    }

    private bool jj_3R_143()
    {
        if (jj_3R_162()) return true;
        return false;
    }

    private bool jj_3R_106()
    {
        if (jj_scan_token(LBRACE)) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_143()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(RBRACE)) return true;
        return false;
    }

    private bool jj_3_8()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(58))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(61))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(57))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(56))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(40))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(24))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(64))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(52))
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(68))
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(72))
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(129))
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_71()) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_94()
    {
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_8()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_93()
    {
        if (jj_3R_74()) return true;
        if (jj_scan_token(COLON)) return true;
        if (jj_3R_196()) return true;
        return false;
    }

    private bool jj_3R_233()
    {
        if (jj_scan_token(138)) return true;
        if (jj_3R_84()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_331()) jj_scanpos = xsp;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_70()
    {
        if (jj_3R_103()) return true;
        return false;
    }

    private bool jj_3R_224()
    {
        if (jj_3R_245()) return true;
        return false;
    }

    private bool jj_3_7()
    {
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_70()) { jj_scanpos = xsp; break; }
        }
        if (jj_scan_token(PACKAGE)) return true;
        return false;
    }

    private bool jj_3R_223()
    {
        if (jj_3R_244()) return true;
        return false;
    }

    private bool jj_3_39()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_222()
    {
        if (jj_3R_243()) return true;
        return false;
    }

    private bool jj_3R_221()
    {
        if (jj_3R_242()) return true;
        return false;
    }

    private bool jj_3R_220()
    {
        if (jj_3R_241()) return true;
        return false;
    }

    private bool jj_3R_219()
    {
        if (jj_3R_240()) return true;
        return false;
    }

    private bool jj_3R_218()
    {
        if (jj_3R_239()) return true;
        return false;
    }

    private bool jj_3R_217()
    {
        if (jj_3R_238()) return true;
        return false;
    }

    private bool jj_3R_216()
    {
        if (jj_3R_237()) return true;
        return false;
    }

    private bool jj_3R_215()
    {
        if (jj_3R_236()) return true;
        return false;
    }

    private bool jj_3R_214()
    {
        if (jj_3R_235()) return true;
        return false;
    }

    private bool jj_3R_213()
    {
        if (jj_3R_234()) return true;
        if (jj_scan_token(SEMICOLON)) return true;
        return false;
    }

    private bool jj_3R_212()
    {
        if (jj_3R_106()) return true;
        return false;
    }

    private bool jj_3R_211()
    {
        if (jj_3R_233()) return true;
        return false;
    }

    private bool jj_3R_189()
    {
        if (jj_3R_82()) return true;
        return false;
    }

    private bool jj_3_41()
    {
        if (jj_3R_93()) return true;
        return false;
    }

    private bool jj_3R_196()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_41())
        {
            jj_scanpos = xsp;
            if (jj_3R_211())
            {
                jj_scanpos = xsp;
                if (jj_3R_212())
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(91))
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_213())
                        {
                            jj_scanpos = xsp;
                            if (jj_3R_214())
                            {
                                jj_scanpos = xsp;
                                if (jj_3R_215())
                                {
                                    jj_scanpos = xsp;
                                    if (jj_3R_216())
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_3R_217())
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_3R_218())
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_3R_219())
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_220())
                                                    {
                                                        jj_scanpos = xsp;
                                                        if (jj_3R_221())
                                                        {
                                                            jj_scanpos = xsp;
                                                            if (jj_3R_222())
                                                            {
                                                                jj_scanpos = xsp;
                                                                if (jj_3R_223())
                                                                {
                                                                    jj_scanpos = xsp;
                                                                    if (jj_3R_224()) return true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_204()
    {
        if (jj_3R_230()) return true;
        return false;
    }

    private bool jj_3R_229()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_74()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(140))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(1))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(2))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(3))
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(4))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(5))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(6))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(7))
                                    {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(8))
                                        {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(9))
                                            {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(10))
                                                {
                                                    jj_scanpos = xsp;
                                                    if (jj_scan_token(11)) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3_38()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_203()
    {
        Token xsp;
        if (jj_3R_229()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_229()) { jj_scanpos = xsp; break; }
        }
        if (jj_3R_144()) return true;
        return false;
    }

    private bool jj_3_40()
    {
        Token xsp;
        if (jj_3_38()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_38()) { jj_scanpos = xsp; break; }
        }
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_39()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_188()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_40())
        {
            jj_scanpos = xsp;
            if (jj_3R_203()) return true;
        }
        return false;
    }

    private bool jj_3R_191()
    {
        if (jj_3R_80()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_204()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_163()
    {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_84()) return true;
        return false;
    }

    private bool jj_3R_190()
    {
        if (jj_3R_188()) return true;
        return false;
    }

    private bool jj_3R_125()
    {
        if (jj_scan_token(NEW)) return true;
        if (jj_3R_147()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_189()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_190())
        {
            jj_scanpos = xsp;
            if (jj_3R_191()) return true;
        }
        return false;
    }

    private bool jj_3R_91()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_37())
        {
            jj_scanpos = xsp;
            if (jj_3R_125()) return true;
        }
        return false;
    }

    private bool jj_3_37()
    {
        if (jj_scan_token(NEW)) return true;
        if (jj_3R_88()) return true;
        if (jj_3R_188()) return true;
        return false;
    }

    private bool jj_3R_145()
    {
        if (jj_3R_84()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_163()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_111()
    {
        if (jj_3R_145()) return true;
        return false;
    }

    private bool jj_3R_80()
    {
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_111()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3R_100()
    {
        if (jj_scan_token(STRING_LITERAL)) return true;
        return false;
    }

    private bool jj_3R_201()
    {
        if (jj_scan_token(FALSE)) return true;
        return false;
    }

    private bool jj_3R_186()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_200())
        {
            jj_scanpos = xsp;
            if (jj_3R_201()) return true;
        }
        return false;
    }

    private bool jj_3R_200()
    {
        if (jj_scan_token(TRUE)) return true;
        return false;
    }

    private bool jj_3R_69()
    {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private bool jj_3R_206()
    {
        if (jj_3R_231()) return true;
        return false;
    }

    private bool jj_3R_152()
    {
        if (jj_3R_156()) return true;
        return false;
    }

    private bool jj_3R_172()
    {
        if (jj_3R_186()) return true;
        return false;
    }

    private bool jj_3R_231()
    {
        if (jj_3R_100()) return true;
        return false;
    }

    private bool jj_3R_192()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(98)) jj_scanpos = xsp;
        if (jj_scan_token(LBRACKET)) return true;
        xsp = jj_scanpos;
        if (jj_3R_206()) jj_scanpos = xsp;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_156()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(74))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(78))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(83))
                {
                    jj_scanpos = xsp;
                    if (jj_scan_token(84))
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_172())
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(54)) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_122()
    {
        if (jj_3R_80()) return true;
        return false;
    }

    private bool jj_3R_121()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_74()) return true;
        return false;
    }

    private bool jj_3R_120()
    {
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_102()
    {
        if (jj_scan_token(BIT_OR)) return true;
        return false;
    }

    private bool jj_3_36()
    {
        if (jj_3R_92()) return true;
        return false;
    }

    private bool jj_3_35()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_91()) return true;
        return false;
    }

    private bool jj_3_33()
    {
        if (jj_3R_90()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(CLASS)) return true;
        return false;
    }

    private bool jj_3R_89()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_34())
        {
            jj_scanpos = xsp;
            if (jj_3_35())
            {
                jj_scanpos = xsp;
                if (jj_3_36())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_120())
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_121())
                        {
                            jj_scanpos = xsp;
                            if (jj_3R_122()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3_34()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(THIS)) return true;
        return false;
    }

    private bool jj_3R_176()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_68()) return true;
        return false;
    }

    private bool jj_3R_136()
    {
        if (jj_3R_95()) return true;
        return false;
    }

    private bool jj_3R_175()
    {
        if (jj_3R_192()) return true;
        return false;
    }

    private bool jj_3R_174()
    {
        if (jj_scan_token(LT)) return true;
        if (jj_3R_69()) return true;
        return false;
    }

    private bool jj_3R_135()
    {
        if (jj_3R_90()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(CLASS)) return true;
        return false;
    }

    private bool jj_3R_157()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_173())
        {
            jj_scanpos = xsp;
            if (jj_3R_174())
            {
                jj_scanpos = xsp;
                if (jj_3R_175())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_176()) return true;
                }
            }
        }
        return false;
    }

    private bool jj_3R_173()
    {
        if (jj_3R_100()) return true;
        return false;
    }

    private bool jj_3R_134()
    {
        if (jj_3R_91()) return true;
        return false;
    }

    private bool jj_3R_133()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_84()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private bool jj_3_32()
    {
        if (jj_3R_89()) return true;
        return false;
    }

    private bool jj_3R_132()
    {
        if (jj_scan_token(SUPER)) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_74()) return true;
        return false;
    }

    private bool jj_3R_137()
    {
        if (jj_3R_157()) return true;
        return false;
    }

    private bool jj_3R_151()
    {
        if (jj_3R_74()) return true;
        return false;
    }

    private bool jj_3R_101()
    {
        Token xsp;
        if (jj_3R_137()) return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_137()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_131()
    {
        if (jj_3R_156()) return true;
        return false;
    }

    private bool jj_3R_99()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_131())
        {
            jj_scanpos = xsp;
            if (jj_scan_token(65))
            {
                jj_scanpos = xsp;
                if (jj_3R_132())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_133())
                    {
                        jj_scanpos = xsp;
                        if (jj_3R_134())
                        {
                            jj_scanpos = xsp;
                            if (jj_3R_135())
                            {
                                jj_scanpos = xsp;
                                if (jj_3R_136()) return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_347()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(108))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(109)) return true;
        }
        return false;
    }

    private bool jj_3R_68()
    {
        if (jj_3R_101()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_102()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_92()
    {
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_82()) return true;
        if (jj_3R_74()) return true;
        return false;
    }

    private bool jj_3_31()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_88()) return true;
        return false;
    }

    private bool jj_3R_63()
    {
        if (jj_3R_99()) return true;
        Token xsp;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3_32()) { jj_scanpos = xsp; break; }
        }
        return false;
    }

    private bool jj_3R_67()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(94)) jj_scanpos = xsp;
        if (jj_3R_69()) return true;
        if (jj_scan_token(COLON)) return true;
        return false;
    }

    private bool jj_3R_227()
    {
        if (jj_scan_token(LT)) return true;
        return false;
    }

    private bool jj_3R_66()
    {
        if (jj_3R_63()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private bool jj_3R_330()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_75()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_318()) return true;
        return false;
    }

    private bool jj_3_6()
    {
        if (jj_scan_token(LT)) return true;
        if (jj_3R_69()) return true;
        return false;
    }

    private bool jj_3R_329()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_75()) return true;
        if (jj_scan_token(RPAREN)) return true;
        if (jj_3R_296()) return true;
        return false;
    }

    private bool jj_3R_327()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_329())
        {
            jj_scanpos = xsp;
            if (jj_3R_330()) return true;
        }
        return false;
    }

    private bool jj_3_5()
    {
        if (jj_scan_token(LT)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_67()) jj_scanpos = xsp;
        if (jj_3R_68()) return true;
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private bool jj_3R_199()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_226())
        {
            jj_scanpos = xsp;
            if (jj_3_5())
            {
                jj_scanpos = xsp;
                if (jj_3_6())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_227()) return true;
                }
            }
        }
        return false;
    }

    private bool jj_3R_226()
    {
        if (jj_3R_100()) return true;
        return false;
    }

    private bool jj_3_30()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_75()) return true;
        if (jj_scan_token(LBRACKET)) return true;
        return false;
    }

    private bool jj_3R_328()
    {
        if (jj_3R_63()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_347()) jj_scanpos = xsp;
        return false;
    }

    private bool jj_3R_119()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_75()) return true;
        if (jj_scan_token(RPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(98))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(97))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(85))
                {
                    jj_scanpos = xsp;
                    if (jj_3R_151())
                    {
                        jj_scanpos = xsp;
                        if (jj_scan_token(65))
                        {
                            jj_scanpos = xsp;
                            if (jj_scan_token(62))
                            {
                                jj_scanpos = xsp;
                                if (jj_scan_token(53))
                                {
                                    jj_scanpos = xsp;
                                    if (jj_3R_152()) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private bool jj_3R_118()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_75()) return true;
        if (jj_scan_token(LBRACKET)) return true;
        if (jj_scan_token(RBRACKET)) return true;
        return false;
    }

    private bool jj_3R_87()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_29())
        {
            jj_scanpos = xsp;
            if (jj_3R_118())
            {
                jj_scanpos = xsp;
                if (jj_3R_119()) return true;
            }
        }
        return false;
    }

    private bool jj_3_29()
    {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_88()) return true;
        return false;
    }

    private bool jj_3R_65()
    {
        if (jj_3R_100()) return true;
        return false;
    }

    private bool jj_3_28()
    {
        if (jj_3R_87()) return true;
        return false;
    }

    private bool jj_3_27()
    {
        if (jj_3R_86()) return true;
        return false;
    }

    private bool jj_3R_325()
    {
        if (jj_3R_328()) return true;
        return false;
    }

    private bool jj_3R_324()
    {
        if (jj_3R_327()) return true;
        return false;
    }

    private bool jj_3_3()
    {
        if (jj_3R_63()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private bool jj_3R_323()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(98))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(97)) return true;
        }
        if (jj_3R_296()) return true;
        return false;
    }

    private bool jj_3R_318()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_323())
        {
            jj_scanpos = xsp;
            if (jj_3R_324())
            {
                jj_scanpos = xsp;
                if (jj_3R_325()) return true;
            }
        }
        return false;
    }

    private bool jj_3R_171()
    {
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private bool jj_3_4()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_64())
        {
            jj_scanpos = xsp;
            if (jj_3R_65())
            {
                jj_scanpos = xsp;
                if (jj_scan_token(96))
                {
                    jj_scanpos = xsp;
                    if (jj_3R_66()) return true;
                }
            }
        }
        return false;
    }

    private bool jj_3R_64()
    {
        if (jj_3R_69()) return true;
        return false;
    }

    private bool jj_3R_185()
    {
        if (jj_3R_69()) return true;
        return false;
    }

    private bool jj_3R_184()
    {
        if (jj_3R_199()) return true;
        return false;
    }

    private bool jj_3R_259()
    {
        if (jj_scan_token(DECR)) return true;
        if (jj_3R_63()) return true;
        return false;
    }

    private bool jj_3R_310()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(110))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(111)) return true;
        }
        if (jj_3R_278()) return true;
        return false;
    }

    private bool jj_3R_183()
    {
        if (jj_3R_63()) return true;
        return false;
    }

    private bool jj_3R_319()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(112))
        {
            jj_scanpos = xsp;
            if (jj_scan_token(113))
            {
                jj_scanpos = xsp;
                if (jj_scan_token(117)) return true;
            }
        }
        if (jj_3R_296()) return true;
        return false;
    }

    private bool jj_3_26()
    {
        if (jj_3R_85()) return true;
        return false;
    }

    /** Generated Token Manager. */
    public JJTreeParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    /** Whether we are looking ahead. */
    private bool jj_lookingAhead = false;
    private bool jj_semLA;
    private int jj_gen;
    private int[] jj_la1 = new int[191];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;
    static private int[] jj_la1_4;
    static JJTreeParser()
    {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
        jj_la1_init_4();
    }
    private static void jj_la1_init_0()
    {
        jj_la1_0 = new int[] { 0x4a000ffe, 0x6, 0x6, 0x0, 0x4a000ffe, 0x0, 0x0, 0x0, 0xcf000ffe, 0x0, 0x0, 0x0, 0xcf000ffe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x4a000ffe, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffe, 0x0, 0x0, 0xffe, 0x0, 0x81000000, 0x0, 0x0, 0x1000000, 0x80000000, 0x81000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000ffe, 0x0, 0xcb000ffe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcb000ffe, 0x80000000, 0x4a000ffe, 0xcb000ffe, 0x0, 0x0, 0x0, 0x4a000ffe, 0x4a000ffe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4b000ffe, 0x0, 0x0, 0x0, 0x0, 0xcf000ffe, 0x4a000ffe, 0x0, 0x4a000000, 0x0, 0x4a000ffe, 0x0, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x4a000ffe, 0x0, 0x4a000000, 0x0, 0x0, 0x0, 0x0, 0x4a000ffe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a000ffe, 0x0, 0x0, 0x4a000ffe, 0xffe, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffe, 0x0, 0x0, 0x0, 0x4a000ffe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4e000ffe, 0x0, 0xcf000ffe, 0xce000ffe, 0x0, 0x0, 0x0, 0x4a000ffe, 0x10000000, 0xcf000ffe, 0x10000000, 0x0, 0x4b000ffe, 0x4a000ffe, 0x4a000ffe, 0x4b000ffe, 0x4a000ffe, 0x0, 0xffe, 0xffe, 0x4a000ffe, 0x20000000, 0x0, 0x0, 0xffe, 0x0, 0x4a000ffe, 0x0, 0xcb000ffe, 0x0, 0xca000ffe, 0xcb000ffe, };
    }
    private static void jj_la1_init_1()
    {
        jj_la1_1 = new int[] { 0x170a0411, 0x20000000, 0x20000000, 0x80, 0x170a0411, 0x0, 0x0, 0x0, 0xff7e2d9b, 0x0, 0x0, 0x0, 0xff7e2d9b, 0x7000000, 0x7000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x506a0491, 0x0, 0x200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8000, 0x27140100, 0x20000000, 0x0, 0x27100100, 0x40000, 0x27140100, 0x40000, 0x0, 0x40, 0x4000, 0x0, 0x0, 0x4000, 0x27100100, 0x0, 0x371e0511, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x371e0511, 0x40000, 0x100a0411, 0x371e0511, 0x0, 0x0, 0x0, 0x506a0491, 0x506a0491, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x371a0510, 0x0, 0x0, 0x0, 0x0, 0xff7e2d9b, 0x506a0491, 0x20000000, 0x100a0410, 0x0, 0x100a0410, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000040, 0x100a0410, 0x40000040, 0x100a0410, 0x0, 0x1, 0x0, 0x0, 0x100a0411, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x506a0491, 0x0, 0x0, 0x506a0491, 0x40600080, 0x0, 0x0, 0x0, 0x0, 0x40600080, 0x0, 0x0, 0x400080, 0x80, 0x506a0491, 0x0, 0x0, 0x0, 0x0, 0x200000, 0x0, 0x0, 0xd86a2c9b, 0x0, 0xff7e2d9b, 0xd86e2c9b, 0x0, 0x0, 0x0, 0x506a0491, 0x4, 0xff7e2d9b, 0x4, 0x20, 0x777a0591, 0x506a0491, 0x506a0491, 0x777a0591, 0x506a0491, 0x0, 0x0, 0x0, 0x506a0491, 0x0, 0x200, 0x0, 0x0, 0x0, 0x506a0491, 0x0, 0x371e0510, 0x4, 0x100e0410, 0x371e0510, };
    }
    private static void jj_la1_init_2()
    {
        jj_la1_2 = new int[] { 0x80, 0x0, 0x0, 0x100420, 0x80, 0x10000000, 0x8, 0x40000000, 0x8b847f7, 0x10000000, 0x8, 0x40000000, 0x8b847f7, 0x0, 0x0, 0x10000000, 0x0, 0x0, 0x2000000, 0x0, 0x800000, 0x0, 0x800000, 0x0, 0x0, 0x0, 0x40000000, 0x400, 0x3844a2, 0x0, 0x0, 0x20000000, 0x100000, 0x0, 0x2800040, 0x200000, 0x40000000, 0x40000000, 0x100000, 0x0, 0x0, 0x2300000, 0x400, 0x10000000, 0x800000, 0x2300000, 0x0, 0x10000000, 0x100000, 0x0, 0x80, 0x0, 0x200000, 0x0, 0x0, 0x8000111, 0x0, 0x20000000, 0x111, 0x0, 0x8000111, 0x0, 0x0, 0x0, 0x0, 0x10000000, 0x10000000, 0x0, 0x111, 0x10000000, 0x8800191, 0x8000000, 0x200000, 0x800000, 0x10000000, 0x0, 0x0, 0x8800191, 0x0, 0x80, 0x8000191, 0x10000000, 0x80000000, 0x2000000, 0xb844a2, 0xb844a2, 0x10000000, 0x0, 0x8, 0x8800000, 0x2000000, 0x10000000, 0x111, 0x0, 0x0, 0x0, 0x8, 0x8b847f7, 0x3844a2, 0x0, 0x0, 0x0, 0x0, 0x10000000, 0x0, 0x0, 0x20000000, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x10000000, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3844a2, 0x0, 0x0, 0x3844a2, 0x384422, 0x200000, 0x0, 0x0, 0x200000, 0x384422, 0x0, 0x22200000, 0x184420, 0x20, 0x3844a2, 0x10000000, 0x0, 0x800000, 0x2200000, 0x0, 0x2000000, 0x2000000, 0x8b846e7, 0x0, 0x8b847f7, 0x8b846e7, 0x10000000, 0x80000000, 0x80000000, 0x3844a2, 0x0, 0x8b847f7, 0x0, 0x0, 0x3845b3, 0x3844a2, 0x3844a2, 0x83845b3, 0x3844a2, 0x10000000, 0x0, 0x0, 0x3844a2, 0x0, 0x0, 0x0, 0x0, 0x10000000, 0xb844a2, 0x10000000, 0x8000111, 0x0, 0x0, 0x8000111, };
    }
    private static void jj_la1_init_3()
    {
        jj_la1_3 = new int[] { 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x3000, 0x0, 0x0, 0x0, 0x3000, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x80000, 0x0, 0x0, 0x0, 0x10, 0x80000, 0x0, 0x0, 0x0, 0xf006, 0x0, 0x0, 0x0, 0x1, 0x14008, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x80000, 0x5, 0x0, 0x0, 0x14008, 0x5, 0x4, 0x0, 0x0, 0x8000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000, 0x1, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0xf006, 0xf006, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50000, 0x50000, 0x1, 0x0, 0x3000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x10000, 0x0, 0x50000, 0x50000, 0x0, 0x0, 0x3fc00000, 0x8, 0x400, 0x800, 0x80000, 0x100000, 0x40000, 0x240, 0x240, 0x0, 0x181, 0x181, 0x0, 0xc000, 0xc000, 0x230000, 0x230000, 0xc000, 0xf006, 0x6, 0x6, 0x0, 0x6, 0x0, 0x3000, 0x3000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf006, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3000, 0x10, 0x3000, 0x3000, 0x0, 0x3fc03000, 0x3fc03000, 0x3000, 0x0, 0x3000, 0x0, 0x0, 0x3000, 0xf006, 0x3000, 0x3000, 0x3000, 0x0, 0x0, 0x0, 0xf006, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf006, 0x0, 0x0, 0x0, 0x0, 0x0, };
    }
    private static void jj_la1_init_4()
    {
        jj_la1_4 = new int[] { 0x1010, 0x1000, 0x1000, 0x0, 0x1010, 0x0, 0x0, 0x0, 0x1c12, 0x0, 0x0, 0x0, 0x1c12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010, 0x0, 0x0, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000, 0x1, 0x0, 0x1000, 0x0, 0x806, 0x0, 0x0, 0x802, 0x804, 0x806, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1802, 0x0, 0x1816, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1816, 0x4, 0x1010, 0x1816, 0x0, 0x0, 0x0, 0x1010, 0x1010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1812, 0x8, 0x8, 0x0, 0x0, 0x1c12, 0x1010, 0x0, 0x0, 0x10, 0x1010, 0x0, 0x8, 0x20, 0x0, 0x0, 0x8, 0x0, 0x1010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010, 0x0, 0x1c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010, 0x0, 0x0, 0x1010, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x1010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1410, 0x0, 0x1c12, 0x1410, 0x0, 0x1c0, 0x1c0, 0x1010, 0x0, 0x1c12, 0x0, 0x0, 0x1812, 0x1010, 0x1010, 0x1812, 0x1010, 0x0, 0x1000, 0x1000, 0x1010, 0x0, 0x0, 0x800, 0x1000, 0x0, 0x1810, 0x0, 0x1816, 0x0, 0x1814, 0x1816, };
    }
    private JJCalls[] jj_2_rtns = new JJCalls[48];
    private bool jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public JJTreeParser(Stream stream)
        : this(stream, null)
    {
    }
    /** Constructor with InputStream and supplied encoding */
    public JJTreeParser(Stream stream, String encoding)
    {
        try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch (Exception e) { throw new RuntimeException(e); }
        token_source = new JJTreeParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 191; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(Stream stream)
    {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(Stream stream, String encoding)
    {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch (Exception e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 191; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public JJTreeParser(TextReader stream)
    {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new JJTreeParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 191; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(TextReader stream)
    {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 191; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public JJTreeParser(JJTreeParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 191; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(JJTreeParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 191; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind)
    {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind)
        {
            jj_gen++;
            if (++jj_gc > 100)
            {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.Length; i++)
                {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null)
                    {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    class LookaheadSuccess : Error { }
    private LookaheadSuccess jj_ls = new LookaheadSuccess();
    private bool jj_scan_token(int kind)
    {
        if (jj_scanpos == jj_lastpos)
        {
            jj_la--;
            if (jj_scanpos.next == null)
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            }
            else
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        }
        else
        {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan)
        {
            int i = 0; Token tok = token;
            while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /** Get the next Token. */
    public Token getNextToken()
    {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    public Token getToken(int index)
    {
        Token t = jj_lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++)
        {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_func()
    {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private List<int[]> jj_expentries = new ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos)
    {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1)
        {
            jj_lasttokens[jj_endpos++] = kind;
        }
        else if (jj_endpos != 0)
        {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++)
            {
                jj_expentry[i] = jj_lasttokens[i];
            }
        jj_entries_loop: for (Iterator it = jj_expentries.iterator(); it.hasNext();)
            {
                int[] oldentry = (int[])(it.next());
                if (oldentry.Length == jj_expentry.Length)
                {
                    for (int i = 0; i < jj_expentry.Length; i++)
                    {
                        if (oldentry[i] != jj_expentry[i])
                        {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.Add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException()
    {
        jj_expentries.Clear();
        bool[] la1tokens = new bool[143];
        if (jj_kind >= 0)
        {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 191; i++)
        {
            if (jj_la1[i] == jj_gen)
            {
                for (int j = 0; j < 32; j++)
                {
                    if ((jj_la1_0[i] & (1 << j)) != 0)
                    {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0)
                    {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0)
                    {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0)
                    {
                        la1tokens[96 + j] = true;
                    }
                    if ((jj_la1_4[i] & (1 << j)) != 0)
                    {
                        la1tokens[128 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 143; i++)
        {
            if (la1tokens[i])
            {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.Add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.Count][];
        for (int i = 0; i < jj_expentries.Count; i++)
        {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    public void enable_tracing()
    {
    }

    /** Disable tracing. */
    public void disable_tracing()
    {
    }

    private void jj_rescan_token()
    {
        jj_rescan = true;
        for (int i = 0; i < 48; i++)
        {
            try
            {
                JJCalls p = jj_2_rtns[i];
                do
                {
                    if (p.gen > jj_gen)
                    {
                        jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
                        switch (i)
                        {
                            case 0: jj_3_1(); break;
                            case 1: jj_3_2(); break;
                            case 2: jj_3_3(); break;
                            case 3: jj_3_4(); break;
                            case 4: jj_3_5(); break;
                            case 5: jj_3_6(); break;
                            case 6: jj_3_7(); break;
                            case 7: jj_3_8(); break;
                            case 8: jj_3_9(); break;
                            case 9: jj_3_10(); break;
                            case 10: jj_3_11(); break;
                            case 11: jj_3_12(); break;
                            case 12: jj_3_13(); break;
                            case 13: jj_3_14(); break;
                            case 14: jj_3_15(); break;
                            case 15: jj_3_16(); break;
                            case 16: jj_3_17(); break;
                            case 17: jj_3_18(); break;
                            case 18: jj_3_19(); break;
                            case 19: jj_3_20(); break;
                            case 20: jj_3_21(); break;
                            case 21: jj_3_22(); break;
                            case 22: jj_3_23(); break;
                            case 23: jj_3_24(); break;
                            case 24: jj_3_25(); break;
                            case 25: jj_3_26(); break;
                            case 26: jj_3_27(); break;
                            case 27: jj_3_28(); break;
                            case 28: jj_3_29(); break;
                            case 29: jj_3_30(); break;
                            case 30: jj_3_31(); break;
                            case 31: jj_3_32(); break;
                            case 32: jj_3_33(); break;
                            case 33: jj_3_34(); break;
                            case 34: jj_3_35(); break;
                            case 35: jj_3_36(); break;
                            case 36: jj_3_37(); break;
                            case 37: jj_3_38(); break;
                            case 38: jj_3_39(); break;
                            case 39: jj_3_40(); break;
                            case 40: jj_3_41(); break;
                            case 41: jj_3_42(); break;
                            case 42: jj_3_43(); break;
                            case 43: jj_3_44(); break;
                            case 44: jj_3_45(); break;
                            case 45: jj_3_46(); break;
                            case 46: jj_3_47(); break;
                            case 47: jj_3_48(); break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            }
            catch (LookaheadSuccess ls) { }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla)
    {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen)
        {
            if (p.next == null) { p = p.next = new JJCalls(); break; }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
    }

    public class JJCalls
    {
        public int gen;
        public Token first;
        public int arg;
        public JJCalls next;
    }

}
