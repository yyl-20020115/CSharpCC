/* Generated By:JJTree&JavaCC: Do not edit this line. JJTreeParserConstants.java */
namespace CSharpCC.CCTree;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public class CCTreeParserConstants : CCTreeParserTreeConstants
{

    /** End of File. */
    public const int EOF = 0;
    /** RegularExpression Id. */
    public const int _LOOKAHEAD = 1;
    /** RegularExpression Id. */
    public const int _IGNORE_CASE = 2;
    /** RegularExpression Id. */
    public const int _PARSER_BEGIN = 3;
    /** RegularExpression Id. */
    public const int _PARSER_END = 4;
    /** RegularExpression Id. */
    public const int _JAVACODE = 5;
    /** RegularExpression Id. */
    public const int _TOKEN = 6;
    /** RegularExpression Id. */
    public const int _SPECIAL_TOKEN = 7;
    /** RegularExpression Id. */
    public const int _MORE = 8;
    /** RegularExpression Id. */
    public const int _SKIP = 9;
    /** RegularExpression Id. */
    public const int _TOKEN_MGR_DECLS = 10;
    /** RegularExpression Id. */
    public const int _EOF = 11;
    /** RegularExpression Id. */
    public const int SINGLE_LINE_COMMENT = 20;
    /** RegularExpression Id. */
    public const int FORMAL_COMMENT = 21;
    /** RegularExpression Id. */
    public const int MULTI_LINE_COMMENT = 22;
    /** RegularExpression Id. */
    public const int ABSTRACT = 24;
    /** RegularExpression Id. */
    public const int BOOLEAN = 25;
    /** RegularExpression Id. */
    public const int BREAK = 26;
    /** RegularExpression Id. */
    public const int BYTE = 27;
    /** RegularExpression Id. */
    public const int CASE = 28;
    /** RegularExpression Id. */
    public const int CATCH = 29;
    /** RegularExpression Id. */
    public const int CHAR = 30;
    /** RegularExpression Id. */
    public const int CLASS = 31;
    /** RegularExpression Id. */
    public const int CONST = 32;
    /** RegularExpression Id. */
    public const int CONTINUE = 33;
    /** RegularExpression Id. */
    public const int _DEFAULT = 34;
    /** RegularExpression Id. */
    public const int DO = 35;
    /** RegularExpression Id. */
    public const int DOUBLE = 36;
    /** RegularExpression Id. */
    public const int ELSE = 37;
    /** RegularExpression Id. */
    public const int EXTENDS = 38;
    /** RegularExpression Id. */
    public const int FALSE = 39;
    /** RegularExpression Id. */
    public const int FINAL = 40;
    /** RegularExpression Id. */
    public const int FINALLY = 41;
    /** RegularExpression Id. */
    public const int FLOAT = 42;
    /** RegularExpression Id. */
    public const int FOR = 43;
    /** RegularExpression Id. */
    public const int GOTO = 44;
    /** RegularExpression Id. */
    public const int IF = 45;
    /** RegularExpression Id. */
    public const int IMPLEMENTS = 46;
    /** RegularExpression Id. */
    public const int IMPORT = 47;
    /** RegularExpression Id. */
    public const int INSTANCEOF = 48;
    /** RegularExpression Id. */
    public const int INT = 49;
    /** RegularExpression Id. */
    public const int INTERFACE = 50;
    /** RegularExpression Id. */
    public const int LONG = 51;
    /** RegularExpression Id. */
    public const int NATIVE = 52;
    /** RegularExpression Id. */
    public const int NEW = 53;
    /** RegularExpression Id. */
    public const int NULL = 54;
    /** RegularExpression Id. */
    public const int PACKAGE = 55;
    /** RegularExpression Id. */
    public const int PRIVATE = 56;
    /** RegularExpression Id. */
    public const int PROTECTED = 57;
    /** RegularExpression Id. */
    public const int PUBLIC = 58;
    /** RegularExpression Id. */
    public const int RETURN = 59;
    /** RegularExpression Id. */
    public const int SHORT = 60;
    /** RegularExpression Id. */
    public const int STATIC = 61;
    /** RegularExpression Id. */
    public const int SUPER = 62;
    /** RegularExpression Id. */
    public const int SWITCH = 63;
    /** RegularExpression Id. */
    public const int SYNCHRONIZED = 64;
    /** RegularExpression Id. */
    public const int THIS = 65;
    /** RegularExpression Id. */
    public const int THROW = 66;
    /** RegularExpression Id. */
    public const int THROWS = 67;
    /** RegularExpression Id. */
    public const int TRANSIENT = 68;
    /** RegularExpression Id. */
    public const int TRUE = 69;
    /** RegularExpression Id. */
    public const int TRY = 70;
    /** RegularExpression Id. */
    public const int VOID = 71;
    /** RegularExpression Id. */
    public const int VOLATILE = 72;
    /** RegularExpression Id. */
    public const int WHILE = 73;
    /** RegularExpression Id. */
    public const int INTEGER_LITERAL = 74;
    /** RegularExpression Id. */
    public const int DECIMAL_LITERAL = 75;
    /** RegularExpression Id. */
    public const int HEX_LITERAL = 76;
    /** RegularExpression Id. */
    public const int OCTAL_LITERAL = 77;
    /** RegularExpression Id. */
    public const int FLOATING_POINT_LITERAL = 78;
    /** RegularExpression Id. */
    public const int DECIMAL_FLOATING_POINT_LITERAL = 79;
    /** RegularExpression Id. */
    public const int DECIMAL_EXPONENT = 80;
    /** RegularExpression Id. */
    public const int HEXADECIMAL_FLOATING_POINT_LITERAL = 81;
    /** RegularExpression Id. */
    public const int HEXADECIMAL_EXPONENT = 82;
    /** RegularExpression Id. */
    public const int CHARACTER_LITERAL = 83;
    /** RegularExpression Id. */
    public const int STRING_LITERAL = 84;
    /** RegularExpression Id. */
    public const int LPAREN = 85;
    /** RegularExpression Id. */
    public const int RPAREN = 86;
    /** RegularExpression Id. */
    public const int LBRACE = 87;
    /** RegularExpression Id. */
    public const int RBRACE = 88;
    /** RegularExpression Id. */
    public const int LBRACKET = 89;
    /** RegularExpression Id. */
    public const int RBRACKET = 90;
    /** RegularExpression Id. */
    public const int SEMICOLON = 91;
    /** RegularExpression Id. */
    public const int COMMA = 92;
    /** RegularExpression Id. */
    public const int DOT = 93;
    /** RegularExpression Id. */
    public const int HASH = 94;
    /** RegularExpression Id. */
    public const int ASSIGN = 95;
    /** RegularExpression Id. */
    public const int LT = 96;
    /** RegularExpression Id. */
    public const int BANG = 97;
    /** RegularExpression Id. */
    public const int TILDE = 98;
    /** RegularExpression Id. */
    public const int HOOK = 99;
    /** RegularExpression Id. */
    public const int COLON = 100;
    /** RegularExpression Id. */
    public const int DOUBLECOLON = 101;
    /** RegularExpression Id. */
    public const int EQ = 102;
    /** RegularExpression Id. */
    public const int LE = 103;
    /** RegularExpression Id. */
    public const int GE = 104;
    /** RegularExpression Id. */
    public const int NE = 105;
    /** RegularExpression Id. */
    public const int SC_OR = 106;
    /** RegularExpression Id. */
    public const int SC_AND = 107;
    /** RegularExpression Id. */
    public const int INCR = 108;
    /** RegularExpression Id. */
    public const int DECR = 109;
    /** RegularExpression Id. */
    public const int PLUS = 110;
    /** RegularExpression Id. */
    public const int MINUS = 111;
    /** RegularExpression Id. */
    public const int STAR = 112;
    /** RegularExpression Id. */
    public const int SLASH = 113;
    /** RegularExpression Id. */
    public const int BIT_AND = 114;
    /** RegularExpression Id. */
    public const int BIT_OR = 115;
    /** RegularExpression Id. */
    public const int XOR = 116;
    /** RegularExpression Id. */
    public const int REM = 117;
    /** RegularExpression Id. */
    public const int PLUSASSIGN = 118;
    /** RegularExpression Id. */
    public const int MINUSASSIGN = 119;
    /** RegularExpression Id. */
    public const int STARASSIGN = 120;
    /** RegularExpression Id. */
    public const int SLASHASSIGN = 121;
    /** RegularExpression Id. */
    public const int ANDASSIGN = 122;
    /** RegularExpression Id. */
    public const int ORASSIGN = 123;
    /** RegularExpression Id. */
    public const int XORASSIGN = 124;
    /** RegularExpression Id. */
    public const int REMASSIGN = 125;
    /** RegularExpression Id. */
    public const int RUNSIGNEDSHIFT_VALUE = 126;
    /** RegularExpression Id. */
    public const int RSIGNEDSHIFT_VALUE = 127;
    /** RegularExpression Id. */
    public const int GT = 128;
    /** RegularExpression Id. */
    public const int IDENTIFIER = 140;
    /** RegularExpression Id. */
    public const int LETTER = 141;
    /** RegularExpression Id. */
    public const int PART_LETTER = 142;

    /** Lexical state. */
    public const int DEFAULT = 0;
    /** Lexical state. */
    public const int IN_SINGLE_LINE_COMMENT = 1;
    /** Lexical state. */
    public const int IN_FORMAL_COMMENT = 2;
    /** Lexical state. */
    public const int IN_MULTI_LINE_COMMENT = 3;

    /** Literal token values. */
    public static readonly string[] tokenImage = {
    "<EOF>",
    "\"LOOKAHEAD\"",
    "\"IGNORE_CASE\"",
    "\"PARSER_BEGIN\"",
    "\"PARSER_END\"",
    "\"JAVACODE\"",
    "\"TOKEN\"",
    "\"SPECIAL_TOKEN\"",
    "\"MORE\"",
    "\"SKIP\"",
    "\"TOKEN_MGR_DECLS\"",
    "\"EOF\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 18>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 23>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"#\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"::\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"strictfp\"",
    "\"enum\"",
    "\"...\"",
    "\"template\"",
    "\"typename\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"<<\"",
    "\"assert\"",
    "\"@\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
  };

}
