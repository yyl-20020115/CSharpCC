/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
using CSharpCC.Parser;
using System.Security;
using System.Text;

namespace CSharpCC.CCTree;

public class IO
{
    private string ifn;
    private string ofn;
    private TextReader _in;
    private TextWriter _out;
    private TextWriter msg;
    private TextWriter err;

    public IO()
    {
        ifn = "<uninitialized input>";
        ofn = "";
        _in = Console.In;
        _out = Console.Out;
        msg = Console.Out;
        err = Console.Error;
    }

    public string GetInputFileName()
    {
        return ifn;
    }

    public TextReader GetIn()
    {
        return _in;
    }

    public string GetOutputFileName()
    {
        return ofn;
    }

    public TextWriter GetOut()
    {
        return _out;
    }

    public TextWriter GetMsg()
    {
        return msg;
    }

    public TextWriter GetErr()
    {
        return err;
    }


    public void Print(string s)
    {
        _out.Write(s);
    }

    public void Println(string s)
    {
        _out.WriteLine(s);
    }

    public void Println()
    {
        _out.WriteLine();
    }


    public void CloseAll()
    {
        _out?.Close();
        msg?.Flush();
        err?.Flush();
    }

    private string Create_output_file_name(string i)
    {
        string o = CCTreeOptions.GetOutputFile();

        if (o == (""))
        {
            int s = i.LastIndexOf(Path.DirectorySeparatorChar);
            if (s >= 0)
            {
                i = i[(s + 1)..];
            }

            int di = i.LastIndexOf('.');
            if (di == -1)
            {
                o = i + ".jj";
            }
            else
            {
                string suffix = i[di..];
                if (suffix == (".jj"))
                {
                    o = i + ".jj";
                }
                else
                {
                    o = i[..di] + ".jj";
                }
            }
        }

        return o;
    }


    public void SetInput(string fn)
    {
        try
        {
            string fp = fn;
            if (!File.Exists(fp))
            {
                throw new CCTreeIOException("File " + fn + " not found.");
            }
            if (Directory.Exists(fp))
            {
                throw new CCTreeIOException(fn + " is a directory. Please use a valid file name.");
            }
            if (global::CSharpCC.Parser.CSharpCCGlobals.IsGeneratedBy("JJTree", fn))
            {
                throw new CCTreeIOException(fn + " was generated by jjtree.  Cannot run jjtree again.");
            }
            ifn = fp;

            _in = new StreamReader(ifn, Encoding.GetEncoding(CCTreeOptions.GetGrammarEncoding()));

        }
        catch (NullReferenceException ne)
        { // Should never happen
            throw new CCTreeIOException(ne.ToString());
        }
        catch (SecurityException)
        {
            throw new CCTreeIOException("Security violation while trying to open " + fn);
        }
        catch (FileNotFoundException e)
        {
            throw new CCTreeIOException("File " + fn + " not found.");
        }
        catch (IOException ioe)
        {
            throw new CCTreeIOException(ioe.ToString());
        }
    }

    public void SetOutput()
    {
        try
        {
            CSharpCCGlobals.CreateOutputDir(CCTreeOptions.GetJJTreeOutputDirectory());
            string ofile = Path.Combine(CCTreeOptions.GetJJTreeOutputDirectory(), Create_output_file_name(ifn));
            ofn = ofile.ToString();
            _out = new StreamWriter(ofile);
        }
        catch (IOException ioe)
        {
            throw new CCTreeIOException("Can't create output file " + ofn);
        }
    }

}

/*end*/
